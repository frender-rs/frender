#![allow(non_camel_case_types)]
#[allow(non_snake_case)]
pub mod ElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + ElementProps::Types>
    crate::props::UpdateElement<web_sys::Element> for ElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
{
    type State =
        ElementProps::render_state::RenderState<
            dyn ElementProps::render_state::RenderStateTypes<
                children = <TypeDefs::children as frender_core::UpdateRenderState<
                    frender_dom::Dom,
                >>::State,
                class = <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::State,
                id = <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::State,
                part = <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::State,
            >,
        >;
    fn update_element(
        this: Self,
        element: &web_sys::Element,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
    }
}
pub use ElementProps::ElementProps;
#[allow(non_snake_case)]
pub mod HtmlElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlElement> for HtmlElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlElementProps :: render_state :: RenderState < dyn HtmlElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
    }
}
pub use HtmlElementProps::HtmlElementProps;
pub mod abbr;
pub use abbr::abbr;
impl<
        TypeDefs: ?::core::marker::Sized + abbr::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom> for abbr::Data<TypeDefs, ComponentType>
where
    HtmlElementProps::Data<TypeDefs>: crate::props::UpdateElement<web_sys::HtmlElement>,
{
    type State =
        crate::props::IntrinsicComponentRenderState<
            web_sys::HtmlElement,
            <HtmlElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                web_sys::HtmlElement,
            >>::State,
        >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
pub mod address;
pub use address::address;
pub mod article;
pub use article::article;
pub mod aside;
pub use aside::aside;
pub mod b;
pub use b::b;
pub mod bdi;
pub use bdi::bdi;
pub mod bdo;
pub use bdo::bdo;
pub mod cite;
pub use cite::cite;
pub mod code;
pub use code::code;
pub mod datalist;
pub use datalist::datalist;
pub mod dd;
pub use dd::dd;
pub mod dfn;
pub use dfn::dfn;
pub mod div;
pub use div::div;
pub mod dl;
pub use dl::dl;
pub mod dt;
pub use dt::dt;
pub mod em;
pub use em::em;
pub mod figcaption;
pub use figcaption::figcaption;
pub mod figure;
pub use figure::figure;
pub mod footer;
pub use footer::footer;
pub mod h1;
pub use h1::h1;
pub mod h2;
pub use h2::h2;
pub mod h3;
pub use h3::h3;
pub mod h4;
pub use h4::h4;
pub mod h5;
pub use h5::h5;
pub mod h6;
pub use h6::h6;
pub mod head;
pub use head::head;
pub mod header;
pub use header::header;
pub mod hgroup;
pub use hgroup::hgroup;
pub mod hr;
pub use hr::hr;
pub mod i;
pub use i::i;
pub mod kbd;
pub use kbd::kbd;
pub mod legend;
pub use legend::legend;
pub mod main;
pub use main::main;
pub mod mark;
pub use mark::mark;
pub mod menu;
pub use menu::menu;
pub mod nav;
pub use nav::nav;
pub mod noscript;
pub use noscript::noscript;
pub mod p;
pub use p::p;
pub mod picture;
pub use picture::picture;
pub mod pre;
pub use pre::pre;
pub mod rp;
pub use rp::rp;
pub mod rt;
pub use rt::rt;
pub mod ruby;
pub use ruby::ruby;
pub mod s;
pub use s::s;
pub mod samp;
pub use samp::samp;
pub mod section;
pub use section::section;
pub mod small;
pub use small::small;
pub mod span;
pub use span::span;
pub mod strong;
pub use strong::strong;
pub mod sub;
pub use sub::sub;
pub mod summary;
pub use summary::summary;
pub mod sup;
pub use sup::sup;
pub mod template;
pub use template::template;
pub mod title;
pub use title::title;
pub mod u;
pub use u::u;
pub mod var;
pub use var::var;
pub mod wbr;
pub use wbr::wbr;
#[allow(non_snake_case)]
pub mod HtmlHrefCommonProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlHrefCommonProps::Types>
    crate::props::UpdateElement<web_sys::HtmlAnchorElement> for HtmlHrefCommonProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlHrefCommonProps :: render_state :: RenderState < dyn HtmlHrefCommonProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , download = < TypeDefs :: download as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , href = < TypeDefs :: href as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , ping = < TypeDefs :: ping as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , referrer_policy = < TypeDefs :: referrer_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , rel = < TypeDefs :: rel as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , target = < TypeDefs :: target as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlAnchorElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.download,
            state: state.download,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "download";
                < TypeDefs :: download as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_download (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.href,
            state: state.href,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "href";
                <TypeDefs::href as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_href(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.ping,
            state: state.ping,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "ping";
                <TypeDefs::ping as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_ping(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.referrer_policy,
            state: state.referrer_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "referrerpolicy";
                < TypeDefs :: referrer_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_referrer_policy (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.rel,
            state: state.rel,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "rel";
                <TypeDefs::rel as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_rel(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.target,
            state: state.target,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "target";
                < TypeDefs :: target as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_target (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
    }
}
pub use HtmlHrefCommonProps::HtmlHrefCommonProps;
#[allow(non_snake_case)]
pub mod HtmlAnchorElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlAnchorElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlAnchorElement>
    for HtmlAnchorElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlAnchorElementProps :: render_state :: RenderState < dyn HtmlAnchorElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , download = < TypeDefs :: download as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , href = < TypeDefs :: href as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , ping = < TypeDefs :: ping as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , referrer_policy = < TypeDefs :: referrer_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , rel = < TypeDefs :: rel as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , target = < TypeDefs :: target as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , href_lang = < TypeDefs :: href_lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , type_ = < TypeDefs :: type_ as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlAnchorElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.download,
            state: state.download,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "download";
                < TypeDefs :: download as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_download (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.href,
            state: state.href,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "href";
                <TypeDefs::href as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_href(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.ping,
            state: state.ping,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "ping";
                <TypeDefs::ping as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_ping(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.referrer_policy,
            state: state.referrer_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "referrerpolicy";
                < TypeDefs :: referrer_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_referrer_policy (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.rel,
            state: state.rel,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "rel";
                <TypeDefs::rel as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_rel(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.target,
            state: state.target,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "target";
                < TypeDefs :: target as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_target (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.href_lang,
            state: state.href_lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hreflang";
                < TypeDefs :: href_lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_hreflang (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.type_,
            state: state.type_,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "type";
                <TypeDefs::type_ as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_type(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
    }
}
pub use HtmlAnchorElementProps::HtmlAnchorElementProps;
pub mod a;
pub use a::a;
impl<
        TypeDefs: ?::core::marker::Sized + a::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom> for a::Data<TypeDefs, ComponentType>
where
    HtmlAnchorElementProps::Data<TypeDefs>: crate::props::UpdateElement<web_sys::HtmlAnchorElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlAnchorElement,
        <HtmlAnchorElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlAnchorElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlAnchorElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlAnchorElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlAreaElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlAreaElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlAreaElement> for HtmlAreaElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlAreaElementProps :: render_state :: RenderState < dyn HtmlAreaElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , download = < TypeDefs :: download as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , href = < TypeDefs :: href as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , ping = < TypeDefs :: ping as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , referrer_policy = < TypeDefs :: referrer_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , rel = < TypeDefs :: rel as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , target = < TypeDefs :: target as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , alt = < TypeDefs :: alt as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , coords = < TypeDefs :: coords as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , shape = < TypeDefs :: shape as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlAreaElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.download,
            state: state.download,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "download";
                < TypeDefs :: download as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_download (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.href,
            state: state.href,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "href";
                <TypeDefs::href as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_href(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.ping,
            state: state.ping,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "ping";
                <TypeDefs::ping as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_ping(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.referrer_policy,
            state: state.referrer_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "referrerpolicy";
                < TypeDefs :: referrer_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_referrer_policy (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.rel,
            state: state.rel,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "rel";
                <TypeDefs::rel as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_rel(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.target,
            state: state.target,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "target";
                < TypeDefs :: target as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_target (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.alt,
            state: state.alt,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "alt";
                <TypeDefs::alt as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_alt(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.coords,
            state: state.coords,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "coords";
                < TypeDefs :: coords as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_coords (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.shape,
            state: state.shape,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "shape";
                <TypeDefs::shape as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_shape(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
    }
}
pub use HtmlAreaElementProps::HtmlAreaElementProps;
pub mod area;
pub use area::area;
impl<
        TypeDefs: ?::core::marker::Sized + area::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom> for area::Data<TypeDefs, ComponentType>
where
    HtmlAreaElementProps::Data<TypeDefs>: crate::props::UpdateElement<web_sys::HtmlAreaElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlAreaElement,
        <HtmlAreaElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlAreaElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlAreaElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlAreaElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlMediaElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlMediaElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlMediaElement> for HtmlMediaElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlMediaElementProps :: render_state :: RenderState < dyn HtmlMediaElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , auto_play = < TypeDefs :: auto_play as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , controls = < TypeDefs :: controls as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , cross_origin = < TypeDefs :: cross_origin as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , loop_ = < TypeDefs :: loop_ as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , muted = < TypeDefs :: muted as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , preload = < TypeDefs :: preload as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , src = < TypeDefs :: src as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlMediaElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_play,
            state: state.auto_play,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autoplay";
                < TypeDefs :: auto_play as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_autoplay (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.controls,
            state: state.controls,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "controls";
                < TypeDefs :: controls as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_controls (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.cross_origin,
            state: state.cross_origin,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "crossorigin";
                < TypeDefs :: cross_origin as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , match element { el => | v : & _ | el . set_cross_origin (Some (v)) , } , match element { el => | | el . set_cross_origin (None) , } ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.loop_,
            state: state.loop_,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "loop";
                < TypeDefs :: loop_ as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_loop (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.muted,
            state: state.muted,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "muted";
                < TypeDefs :: muted as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_muted (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.preload,
            state: state.preload,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "preload";
                < TypeDefs :: preload as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_preload (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.src,
            state: state.src,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "src";
                <TypeDefs::src as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_src(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
    }
}
pub use HtmlMediaElementProps::HtmlMediaElementProps;
#[allow(non_snake_case)]
pub mod HtmlAudioElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlAudioElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlAudioElement> for HtmlAudioElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlAudioElementProps :: render_state :: RenderState < dyn HtmlAudioElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , auto_play = < TypeDefs :: auto_play as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , controls = < TypeDefs :: controls as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , cross_origin = < TypeDefs :: cross_origin as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , loop_ = < TypeDefs :: loop_ as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , muted = < TypeDefs :: muted as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , preload = < TypeDefs :: preload as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , src = < TypeDefs :: src as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlAudioElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_play,
            state: state.auto_play,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autoplay";
                < TypeDefs :: auto_play as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_autoplay (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.controls,
            state: state.controls,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "controls";
                < TypeDefs :: controls as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_controls (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.cross_origin,
            state: state.cross_origin,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "crossorigin";
                < TypeDefs :: cross_origin as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , match element { el => | v : & _ | el . set_cross_origin (Some (v)) , } , match element { el => | | el . set_cross_origin (None) , } ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.loop_,
            state: state.loop_,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "loop";
                < TypeDefs :: loop_ as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_loop (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.muted,
            state: state.muted,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "muted";
                < TypeDefs :: muted as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_muted (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.preload,
            state: state.preload,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "preload";
                < TypeDefs :: preload as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_preload (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.src,
            state: state.src,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "src";
                <TypeDefs::src as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_src(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
    }
}
pub use HtmlAudioElementProps::HtmlAudioElementProps;
pub mod audio;
pub use audio::audio;
impl<
        TypeDefs: ?::core::marker::Sized + audio::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom> for audio::Data<TypeDefs, ComponentType>
where
    HtmlAudioElementProps::Data<TypeDefs>: crate::props::UpdateElement<web_sys::HtmlAudioElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlAudioElement,
        <HtmlAudioElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlAudioElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlAudioElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlAudioElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlVideoElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlVideoElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlVideoElement> for HtmlVideoElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlVideoElementProps :: render_state :: RenderState < dyn HtmlVideoElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , auto_play = < TypeDefs :: auto_play as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , controls = < TypeDefs :: controls as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , cross_origin = < TypeDefs :: cross_origin as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , loop_ = < TypeDefs :: loop_ as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , muted = < TypeDefs :: muted as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , preload = < TypeDefs :: preload as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , src = < TypeDefs :: src as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , height = < TypeDefs :: height as :: frender_dom :: props :: MaybeUpdateValue < u32 , > > :: State , plays_inline = < TypeDefs :: plays_inline as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , poster = < TypeDefs :: poster as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , width = < TypeDefs :: width as :: frender_dom :: props :: MaybeUpdateValue < u32 , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlVideoElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_play,
            state: state.auto_play,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autoplay";
                < TypeDefs :: auto_play as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_autoplay (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.controls,
            state: state.controls,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "controls";
                < TypeDefs :: controls as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_controls (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.cross_origin,
            state: state.cross_origin,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "crossorigin";
                < TypeDefs :: cross_origin as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , match element { el => | v : & _ | el . set_cross_origin (Some (v)) , } , match element { el => | | el . set_cross_origin (None) , } ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.loop_,
            state: state.loop_,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "loop";
                < TypeDefs :: loop_ as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_loop (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.muted,
            state: state.muted,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "muted";
                < TypeDefs :: muted as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_muted (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.preload,
            state: state.preload,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "preload";
                < TypeDefs :: preload as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_preload (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.src,
            state: state.src,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "src";
                <TypeDefs::src as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_src(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.height,
            state: state.height,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "height";
                < TypeDefs :: height as :: frender_dom :: props :: MaybeUpdateValue < u32 , > > :: maybe_update_value (data , state , | v | element . set_height (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.plays_inline,
            state: state.plays_inline,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "playsinline";
                < TypeDefs :: plays_inline as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.poster,
            state: state.poster,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "poster";
                < TypeDefs :: poster as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_poster (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.width,
            state: state.width,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "width";
                <TypeDefs::width as ::frender_dom::props::MaybeUpdateValue<u32>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_width(*v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
    }
}
pub use HtmlVideoElementProps::HtmlVideoElementProps;
pub mod video;
pub use video::video;
impl<
        TypeDefs: ?::core::marker::Sized + video::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom> for video::Data<TypeDefs, ComponentType>
where
    HtmlVideoElementProps::Data<TypeDefs>: crate::props::UpdateElement<web_sys::HtmlVideoElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlVideoElement,
        <HtmlVideoElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlVideoElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlVideoElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlVideoElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlBaseElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlBaseElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlBaseElement> for HtmlBaseElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlBaseElementProps :: render_state :: RenderState < dyn HtmlBaseElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , href = < TypeDefs :: href as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , target = < TypeDefs :: target as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlBaseElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.href,
            state: state.href,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "href";
                <TypeDefs::href as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_href(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.target,
            state: state.target,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "target";
                < TypeDefs :: target as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_target (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
    }
}
pub use HtmlBaseElementProps::HtmlBaseElementProps;
pub mod base;
pub use base::base;
impl<
        TypeDefs: ?::core::marker::Sized + base::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom> for base::Data<TypeDefs, ComponentType>
where
    HtmlBaseElementProps::Data<TypeDefs>: crate::props::UpdateElement<web_sys::HtmlBaseElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlBaseElement,
        <HtmlBaseElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlBaseElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlBaseElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlBaseElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlQuoteElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlQuoteElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlQuoteElement> for HtmlQuoteElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlQuoteElementProps :: render_state :: RenderState < dyn HtmlQuoteElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , cite = < TypeDefs :: cite as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlQuoteElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.cite,
            state: state.cite,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "cite";
                <TypeDefs::cite as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_cite(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
    }
}
pub use HtmlQuoteElementProps::HtmlQuoteElementProps;
pub mod blockquote;
pub use blockquote::blockquote;
impl<
        TypeDefs: ?::core::marker::Sized + blockquote::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom>
    for blockquote::Data<TypeDefs, ComponentType>
where
    HtmlQuoteElementProps::Data<TypeDefs>: crate::props::UpdateElement<web_sys::HtmlQuoteElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlQuoteElement,
        <HtmlQuoteElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlQuoteElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlQuoteElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlQuoteElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
pub mod q;
pub use q::q;
#[allow(non_snake_case)]
pub mod HtmlBodyElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlBodyElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlBodyElement> for HtmlBodyElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlBodyElementProps :: render_state :: RenderState < dyn HtmlBodyElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlBodyElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
    }
}
pub use HtmlBodyElementProps::HtmlBodyElementProps;
pub mod body;
pub use body::body;
impl<
        TypeDefs: ?::core::marker::Sized + body::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom> for body::Data<TypeDefs, ComponentType>
where
    HtmlBodyElementProps::Data<TypeDefs>: crate::props::UpdateElement<web_sys::HtmlBodyElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlBodyElement,
        <HtmlBodyElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlBodyElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlBodyElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlBodyElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlBrElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlBrElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlBrElement> for HtmlBrElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlBrElementProps :: render_state :: RenderState < dyn HtmlBrElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , clear = < TypeDefs :: clear as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlBrElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.clear,
            state: state.clear,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "clear";
                <TypeDefs::clear as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_clear(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
    }
}
pub use HtmlBrElementProps::HtmlBrElementProps;
pub mod br;
pub use br::br;
impl<
        TypeDefs: ?::core::marker::Sized + br::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom> for br::Data<TypeDefs, ComponentType>
where
    HtmlBrElementProps::Data<TypeDefs>: crate::props::UpdateElement<web_sys::HtmlBrElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlBrElement,
        <HtmlBrElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlBrElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlBrElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlBrElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlButtonElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlButtonElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlButtonElement>
    for HtmlButtonElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlButtonElementProps :: render_state :: RenderState < dyn HtmlButtonElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , disabled = < TypeDefs :: disabled as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , form = < TypeDefs :: form as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , form_action = < TypeDefs :: form_action as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , form_enc_type = < TypeDefs :: form_enc_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , form_method = < TypeDefs :: form_method as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , form_no_validate = < TypeDefs :: form_no_validate as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , form_target = < TypeDefs :: form_target as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , name = < TypeDefs :: name as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , type_ = < TypeDefs :: type_ as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , value = < TypeDefs :: value as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlButtonElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.disabled,
            state: state.disabled,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "disabled";
                < TypeDefs :: disabled as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_disabled (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.form,
            state: state.form,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "form";
                <TypeDefs::form as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.form_action,
            state: state.form_action,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "formaction";
                < TypeDefs :: form_action as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_form_action (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.form_enc_type,
            state: state.form_enc_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "formenctype";
                < TypeDefs :: form_enc_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_form_enctype (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.form_method,
            state: state.form_method,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "formmethod";
                < TypeDefs :: form_method as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_form_method (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.form_no_validate,
            state: state.form_no_validate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "formnovalidate";
                < TypeDefs :: form_no_validate as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_form_no_validate (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.form_target,
            state: state.form_target,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "formtarget";
                < TypeDefs :: form_target as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_form_target (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.name,
            state: state.name,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "name";
                <TypeDefs::name as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_name(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.type_,
            state: state.type_,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "type";
                <TypeDefs::type_ as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_type(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.value,
            state: state.value,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "value";
                <TypeDefs::value as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_value(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
    }
}
pub use HtmlButtonElementProps::HtmlButtonElementProps;
pub mod button;
pub use button::button;
impl<
        TypeDefs: ?::core::marker::Sized + button::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom>
    for button::Data<TypeDefs, ComponentType>
where
    HtmlButtonElementProps::Data<TypeDefs>: crate::props::UpdateElement<web_sys::HtmlButtonElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlButtonElement,
        <HtmlButtonElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlButtonElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlButtonElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlButtonElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlCanvasElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlCanvasElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlCanvasElement>
    for HtmlCanvasElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlCanvasElementProps :: render_state :: RenderState < dyn HtmlCanvasElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , height = < TypeDefs :: height as :: frender_dom :: props :: MaybeUpdateValue < u32 , > > :: State , width = < TypeDefs :: width as :: frender_dom :: props :: MaybeUpdateValue < u32 , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlCanvasElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.height,
            state: state.height,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "height";
                < TypeDefs :: height as :: frender_dom :: props :: MaybeUpdateValue < u32 , > > :: maybe_update_value (data , state , | v | element . set_height (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.width,
            state: state.width,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "width";
                <TypeDefs::width as ::frender_dom::props::MaybeUpdateValue<u32>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_width(*v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
    }
}
pub use HtmlCanvasElementProps::HtmlCanvasElementProps;
pub mod canvas;
pub use canvas::canvas;
impl<
        TypeDefs: ?::core::marker::Sized + canvas::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom>
    for canvas::Data<TypeDefs, ComponentType>
where
    HtmlCanvasElementProps::Data<TypeDefs>: crate::props::UpdateElement<web_sys::HtmlCanvasElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlCanvasElement,
        <HtmlCanvasElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlCanvasElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlCanvasElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlCanvasElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlTableCaptionElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlTableCaptionElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlTableCaptionElement>
    for HtmlTableCaptionElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlTableCaptionElementProps :: render_state :: RenderState < dyn HtmlTableCaptionElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , align = < TypeDefs :: align as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlTableCaptionElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.align,
            state: state.align,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "align";
                <TypeDefs::align as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_align(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
    }
}
pub use HtmlTableCaptionElementProps::HtmlTableCaptionElementProps;
pub mod caption;
pub use caption::caption;
impl<
        TypeDefs: ?::core::marker::Sized + caption::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom>
    for caption::Data<TypeDefs, ComponentType>
where
    HtmlTableCaptionElementProps::Data<TypeDefs>:
        crate::props::UpdateElement<web_sys::HtmlTableCaptionElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlTableCaptionElement,
        <HtmlTableCaptionElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlTableCaptionElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlTableCaptionElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlTableCaptionElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlDataElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlDataElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlDataElement> for HtmlDataElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlDataElementProps :: render_state :: RenderState < dyn HtmlDataElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , value = < TypeDefs :: value as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlDataElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.value,
            state: state.value,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "value";
                <TypeDefs::value as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_value(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
    }
}
pub use HtmlDataElementProps::HtmlDataElementProps;
pub mod data;
pub use data::data;
impl<
        TypeDefs: ?::core::marker::Sized + data::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom> for data::Data<TypeDefs, ComponentType>
where
    HtmlDataElementProps::Data<TypeDefs>: crate::props::UpdateElement<web_sys::HtmlDataElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlDataElement,
        <HtmlDataElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlDataElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlDataElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlDataElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlModElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlModElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlModElement> for HtmlModElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlModElementProps :: render_state :: RenderState < dyn HtmlModElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , cite = < TypeDefs :: cite as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , date_time = < TypeDefs :: date_time as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlModElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.cite,
            state: state.cite,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "cite";
                <TypeDefs::cite as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_cite(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.date_time,
            state: state.date_time,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "datetime";
                < TypeDefs :: date_time as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_date_time (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
    }
}
pub use HtmlModElementProps::HtmlModElementProps;
pub mod del;
pub use del::del;
impl<
        TypeDefs: ?::core::marker::Sized + del::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom> for del::Data<TypeDefs, ComponentType>
where
    HtmlModElementProps::Data<TypeDefs>: crate::props::UpdateElement<web_sys::HtmlModElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlModElement,
        <HtmlModElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlModElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlModElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlModElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
pub mod ins;
pub use ins::ins;
#[allow(non_snake_case)]
pub mod HtmlDetailsElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlDetailsElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlDetailsElement>
    for HtmlDetailsElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlDetailsElementProps :: render_state :: RenderState < dyn HtmlDetailsElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , open = < TypeDefs :: open as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlDetailsElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.open,
            state: state.open,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "open";
                <TypeDefs::open as ::frender_dom::props::MaybeUpdateValue<bool>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_open(*v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
    }
}
pub use HtmlDetailsElementProps::HtmlDetailsElementProps;
pub mod details;
pub use details::details;
impl<
        TypeDefs: ?::core::marker::Sized + details::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom>
    for details::Data<TypeDefs, ComponentType>
where
    HtmlDetailsElementProps::Data<TypeDefs>:
        crate::props::UpdateElement<web_sys::HtmlDetailsElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlDetailsElement,
        <HtmlDetailsElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlDetailsElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlDetailsElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlDetailsElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlDialogElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlDialogElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlDialogElement>
    for HtmlDialogElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlDialogElementProps :: render_state :: RenderState < dyn HtmlDialogElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , open = < TypeDefs :: open as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlDialogElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.open,
            state: state.open,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "open";
                <TypeDefs::open as ::frender_dom::props::MaybeUpdateValue<bool>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_open(*v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
    }
}
pub use HtmlDialogElementProps::HtmlDialogElementProps;
pub mod dialog;
pub use dialog::dialog;
impl<
        TypeDefs: ?::core::marker::Sized + dialog::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom>
    for dialog::Data<TypeDefs, ComponentType>
where
    HtmlDialogElementProps::Data<TypeDefs>: crate::props::UpdateElement<web_sys::HtmlDialogElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlDialogElement,
        <HtmlDialogElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlDialogElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlDialogElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlDialogElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlEmbedElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlEmbedElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlEmbedElement> for HtmlEmbedElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlEmbedElementProps :: render_state :: RenderState < dyn HtmlEmbedElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , height = < TypeDefs :: height as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , src = < TypeDefs :: src as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , type_ = < TypeDefs :: type_ as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , width = < TypeDefs :: width as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlEmbedElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.height,
            state: state.height,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "height";
                < TypeDefs :: height as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_height (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.src,
            state: state.src,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "src";
                <TypeDefs::src as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_src(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.type_,
            state: state.type_,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "type_";
                <TypeDefs::type_ as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_type(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.width,
            state: state.width,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "width";
                <TypeDefs::width as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_width(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
    }
}
pub use HtmlEmbedElementProps::HtmlEmbedElementProps;
pub mod embed;
pub use embed::embed;
impl<
        TypeDefs: ?::core::marker::Sized + embed::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom> for embed::Data<TypeDefs, ComponentType>
where
    HtmlEmbedElementProps::Data<TypeDefs>: crate::props::UpdateElement<web_sys::HtmlEmbedElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlEmbedElement,
        <HtmlEmbedElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlEmbedElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlEmbedElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlEmbedElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlFieldSetElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlFieldSetElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlFieldSetElement>
    for HtmlFieldSetElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlFieldSetElementProps :: render_state :: RenderState < dyn HtmlFieldSetElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , disabled = < TypeDefs :: disabled as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , form = < TypeDefs :: form as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , name = < TypeDefs :: name as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlFieldSetElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.disabled,
            state: state.disabled,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "disabled";
                < TypeDefs :: disabled as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_disabled (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.form,
            state: state.form,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "form";
                <TypeDefs::form as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.name,
            state: state.name,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "name";
                <TypeDefs::name as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_name(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
    }
}
pub use HtmlFieldSetElementProps::HtmlFieldSetElementProps;
pub mod fieldset;
pub use fieldset::fieldset;
impl<
        TypeDefs: ?::core::marker::Sized + fieldset::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom>
    for fieldset::Data<TypeDefs, ComponentType>
where
    HtmlFieldSetElementProps::Data<TypeDefs>:
        crate::props::UpdateElement<web_sys::HtmlFieldSetElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlFieldSetElement,
        <HtmlFieldSetElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlFieldSetElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlFieldSetElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlFieldSetElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlFormElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlFormElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlFormElement> for HtmlFormElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlFormElementProps :: render_state :: RenderState < dyn HtmlFormElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , accept = < TypeDefs :: accept as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , accept_charset = < TypeDefs :: accept_charset as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_complete = < TypeDefs :: auto_complete as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , name = < TypeDefs :: name as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , rel = < TypeDefs :: rel as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , action = < TypeDefs :: action as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , enc_type = < TypeDefs :: enc_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , method = < TypeDefs :: method as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , no_validate = < TypeDefs :: no_validate as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , target = < TypeDefs :: target as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlFormElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.accept,
            state: state.accept,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accept";
                < TypeDefs :: accept as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.accept_charset,
            state: state.accept_charset,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accept-charset";
                < TypeDefs :: accept_charset as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_accept_charset (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_complete,
            state: state.auto_complete,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocomplete";
                < TypeDefs :: auto_complete as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_autocomplete (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.name,
            state: state.name,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "name";
                <TypeDefs::name as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_name(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.rel,
            state: state.rel,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "rel";
                <TypeDefs::rel as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.action,
            state: state.action,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "action";
                < TypeDefs :: action as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_action (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enc_type,
            state: state.enc_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enctype";
                < TypeDefs :: enc_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_enctype (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.method,
            state: state.method,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "method";
                < TypeDefs :: method as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_method (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.no_validate,
            state: state.no_validate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "novalidate";
                < TypeDefs :: no_validate as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_no_validate (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.target,
            state: state.target,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "target";
                < TypeDefs :: target as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_target (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
    }
}
pub use HtmlFormElementProps::HtmlFormElementProps;
pub mod form;
pub use form::form;
impl<
        TypeDefs: ?::core::marker::Sized + form::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom> for form::Data<TypeDefs, ComponentType>
where
    HtmlFormElementProps::Data<TypeDefs>: crate::props::UpdateElement<web_sys::HtmlFormElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlFormElement,
        <HtmlFormElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlFormElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlFormElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlFormElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlHtmlElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlHtmlElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlHtmlElement> for HtmlHtmlElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlHtmlElementProps :: render_state :: RenderState < dyn HtmlHtmlElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , xmlns = < TypeDefs :: xmlns as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlHtmlElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.xmlns,
            state: state.xmlns,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "xmlns";
                <TypeDefs::xmlns as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
    }
}
pub use HtmlHtmlElementProps::HtmlHtmlElementProps;
pub mod html;
pub use html::html;
impl<
        TypeDefs: ?::core::marker::Sized + html::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom> for html::Data<TypeDefs, ComponentType>
where
    HtmlHtmlElementProps::Data<TypeDefs>: crate::props::UpdateElement<web_sys::HtmlHtmlElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlHtmlElement,
        <HtmlHtmlElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlHtmlElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlHtmlElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlHtmlElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlIFrameElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlIFrameElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlIFrameElement>
    for HtmlIFrameElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlIFrameElementProps :: render_state :: RenderState < dyn HtmlIFrameElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , allow = < TypeDefs :: allow as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , allow_fullscreen = < TypeDefs :: allow_fullscreen as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , allow_payment_request = < TypeDefs :: allow_payment_request as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , csp = < TypeDefs :: csp as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , fetch_priority = < TypeDefs :: fetch_priority as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , height = < TypeDefs :: height as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , loading = < TypeDefs :: loading as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , name = < TypeDefs :: name as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , referrer_policy = < TypeDefs :: referrer_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , sandbox = < TypeDefs :: sandbox as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , src = < TypeDefs :: src as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , src_doc = < TypeDefs :: src_doc as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , width = < TypeDefs :: width as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlIFrameElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.allow,
            state: state.allow,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "allow";
                <TypeDefs::allow as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.allow_fullscreen,
            state: state.allow_fullscreen,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "allowfullscreen";
                < TypeDefs :: allow_fullscreen as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_allow_fullscreen (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.allow_payment_request,
            state: state.allow_payment_request,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "allowpaymentrequest";
                < TypeDefs :: allow_payment_request as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_allow_payment_request (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.csp,
            state: state.csp,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "csp";
                <TypeDefs::csp as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.fetch_priority,
            state: state.fetch_priority,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "fetchpriority";
                < TypeDefs :: fetch_priority as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.height,
            state: state.height,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "height";
                < TypeDefs :: height as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_height (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.loading,
            state: state.loading,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "loading";
                < TypeDefs :: loading as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.name,
            state: state.name,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "name";
                <TypeDefs::name as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_name(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.referrer_policy,
            state: state.referrer_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "referrerpolicy";
                < TypeDefs :: referrer_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_referrer_policy (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.sandbox,
            state: state.sandbox,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "sandbox";
                < TypeDefs :: sandbox as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.src,
            state: state.src,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "src";
                <TypeDefs::src as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_src(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.src_doc,
            state: state.src_doc,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "srcdoc";
                < TypeDefs :: src_doc as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_srcdoc (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.width,
            state: state.width,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "width";
                <TypeDefs::width as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_width(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
    }
}
pub use HtmlIFrameElementProps::HtmlIFrameElementProps;
pub mod iframe;
pub use iframe::iframe;
impl<
        TypeDefs: ?::core::marker::Sized + iframe::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom>
    for iframe::Data<TypeDefs, ComponentType>
where
    HtmlIFrameElementProps::Data<TypeDefs>: crate::props::UpdateElement<web_sys::HtmlIFrameElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlIFrameElement,
        <HtmlIFrameElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlIFrameElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlIFrameElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlIFrameElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlImageElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlImageElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlImageElement> for HtmlImageElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlImageElementProps :: render_state :: RenderState < dyn HtmlImageElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , alt = < TypeDefs :: alt as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , cross_origin = < TypeDefs :: cross_origin as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , decoding = < TypeDefs :: decoding as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , element_timing = < TypeDefs :: element_timing as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , height = < TypeDefs :: height as :: frender_dom :: props :: MaybeUpdateValue < u32 , > > :: State , is_map = < TypeDefs :: is_map as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , loading = < TypeDefs :: loading as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , referrer_policy = < TypeDefs :: referrer_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , sizes = < TypeDefs :: sizes as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , src = < TypeDefs :: src as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , srcset = < TypeDefs :: srcset as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , width = < TypeDefs :: width as :: frender_dom :: props :: MaybeUpdateValue < u32 , > > :: State , use_map = < TypeDefs :: use_map as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlImageElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.alt,
            state: state.alt,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "alt";
                <TypeDefs::alt as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_alt(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.cross_origin,
            state: state.cross_origin,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "crossorigin";
                < TypeDefs :: cross_origin as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , match element { el => | v : & _ | el . set_cross_origin (Some (v)) , } , match element { el => | | el . set_cross_origin (None) , } ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.decoding,
            state: state.decoding,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "decoding";
                < TypeDefs :: decoding as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_decoding (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.element_timing,
            state: state.element_timing,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "elementtiming";
                < TypeDefs :: element_timing as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.height,
            state: state.height,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "height";
                < TypeDefs :: height as :: frender_dom :: props :: MaybeUpdateValue < u32 , > > :: maybe_update_value (data , state , | v | element . set_height (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is_map,
            state: state.is_map,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "ismap";
                < TypeDefs :: is_map as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_is_map (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.loading,
            state: state.loading,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "loading";
                < TypeDefs :: loading as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.referrer_policy,
            state: state.referrer_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "referrerpolicy";
                < TypeDefs :: referrer_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_referrer_policy (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.sizes,
            state: state.sizes,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "sizes";
                <TypeDefs::sizes as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_sizes(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.src,
            state: state.src,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "src";
                <TypeDefs::src as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_src(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.srcset,
            state: state.srcset,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "srcset";
                < TypeDefs :: srcset as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_srcset (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.width,
            state: state.width,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "width";
                <TypeDefs::width as ::frender_dom::props::MaybeUpdateValue<u32>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_width(*v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.use_map,
            state: state.use_map,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "usemap";
                < TypeDefs :: use_map as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_use_map (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
    }
}
pub use HtmlImageElementProps::HtmlImageElementProps;
pub mod img;
pub use img::img;
impl<
        TypeDefs: ?::core::marker::Sized + img::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom> for img::Data<TypeDefs, ComponentType>
where
    HtmlImageElementProps::Data<TypeDefs>: crate::props::UpdateElement<web_sys::HtmlImageElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlImageElement,
        <HtmlImageElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlImageElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlImageElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlImageElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlInputElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlInputElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlInputElement> for HtmlInputElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlInputElementProps :: render_state :: RenderState < dyn HtmlInputElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , accept = < TypeDefs :: accept as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , alt = < TypeDefs :: alt as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_complete = < TypeDefs :: auto_complete as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , capture = < TypeDefs :: capture as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , checked = < TypeDefs :: checked as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , dirname = < TypeDefs :: dirname as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , disabled = < TypeDefs :: disabled as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , form = < TypeDefs :: form as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , form_action = < TypeDefs :: form_action as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , form_enc_type = < TypeDefs :: form_enc_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , form_method = < TypeDefs :: form_method as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , form_no_validate = < TypeDefs :: form_no_validate as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , form_target = < TypeDefs :: form_target as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , height = < TypeDefs :: height as :: frender_dom :: props :: MaybeUpdateValue < u32 , > > :: State , list = < TypeDefs :: list as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , max = < TypeDefs :: max as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , max_length = < TypeDefs :: max_length as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , min = < TypeDefs :: min as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , min_length = < TypeDefs :: min_length as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , multiple = < TypeDefs :: multiple as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , name = < TypeDefs :: name as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , pattern = < TypeDefs :: pattern as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , placeholder = < TypeDefs :: placeholder as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , read_only = < TypeDefs :: read_only as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , required = < TypeDefs :: required as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , size = < TypeDefs :: size as :: frender_dom :: props :: MaybeUpdateValue < u32 , > > :: State , src = < TypeDefs :: src as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , step = < TypeDefs :: step as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , type_ = < TypeDefs :: type_ as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , value = < TypeDefs :: value as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , width = < TypeDefs :: width as :: frender_dom :: props :: MaybeUpdateValue < u32 , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlInputElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.accept,
            state: state.accept,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accept";
                < TypeDefs :: accept as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_accept (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.alt,
            state: state.alt,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "alt";
                <TypeDefs::alt as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_alt(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_complete,
            state: state.auto_complete,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocomplete";
                < TypeDefs :: auto_complete as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_autocomplete (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.capture,
            state: state.capture,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "capture";
                < TypeDefs :: capture as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.checked,
            state: state.checked,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "checked";
                < TypeDefs :: checked as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_checked (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dirname,
            state: state.dirname,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dirname";
                < TypeDefs :: dirname as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.disabled,
            state: state.disabled,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "disabled";
                < TypeDefs :: disabled as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_disabled (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.form,
            state: state.form,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "form";
                <TypeDefs::form as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.form_action,
            state: state.form_action,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "formaction";
                < TypeDefs :: form_action as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_form_action (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.form_enc_type,
            state: state.form_enc_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "formenctype";
                < TypeDefs :: form_enc_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_form_enctype (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.form_method,
            state: state.form_method,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "formmethod";
                < TypeDefs :: form_method as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_form_method (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.form_no_validate,
            state: state.form_no_validate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "formnovalidate";
                < TypeDefs :: form_no_validate as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_form_no_validate (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.form_target,
            state: state.form_target,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "formtarget";
                < TypeDefs :: form_target as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_form_target (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.height,
            state: state.height,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "height";
                < TypeDefs :: height as :: frender_dom :: props :: MaybeUpdateValue < u32 , > > :: maybe_update_value (data , state , | v | element . set_height (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.list,
            state: state.list,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "list";
                <TypeDefs::list as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.max,
            state: state.max,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "max";
                <TypeDefs::max as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_max(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.max_length,
            state: state.max_length,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "maxlength";
                < TypeDefs :: max_length as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_max_length (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.min,
            state: state.min,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "min";
                <TypeDefs::min as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_min(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.min_length,
            state: state.min_length,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "minlength";
                < TypeDefs :: min_length as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_min_length (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.multiple,
            state: state.multiple,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "multiple";
                < TypeDefs :: multiple as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_multiple (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.name,
            state: state.name,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "name";
                <TypeDefs::name as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_name(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.pattern,
            state: state.pattern,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "pattern";
                < TypeDefs :: pattern as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_pattern (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.placeholder,
            state: state.placeholder,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "placeholder";
                < TypeDefs :: placeholder as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_placeholder (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.read_only,
            state: state.read_only,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "readonly";
                < TypeDefs :: read_only as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_read_only (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.required,
            state: state.required,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "required";
                < TypeDefs :: required as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_required (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.size,
            state: state.size,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "size";
                <TypeDefs::size as ::frender_dom::props::MaybeUpdateValue<u32>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_size(*v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.src,
            state: state.src,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "src";
                <TypeDefs::src as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_src(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.step,
            state: state.step,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "step";
                <TypeDefs::step as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_step(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.type_,
            state: state.type_,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "type";
                <TypeDefs::type_ as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_type(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.value,
            state: state.value,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "value";
                <TypeDefs::value as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_value(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.width,
            state: state.width,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "width";
                <TypeDefs::width as ::frender_dom::props::MaybeUpdateValue<u32>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_width(*v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
    }
}
pub use HtmlInputElementProps::HtmlInputElementProps;
pub mod input;
pub use input::input;
impl<
        TypeDefs: ?::core::marker::Sized + input::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom> for input::Data<TypeDefs, ComponentType>
where
    HtmlInputElementProps::Data<TypeDefs>: crate::props::UpdateElement<web_sys::HtmlInputElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlInputElement,
        <HtmlInputElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlInputElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlInputElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlInputElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlLabelElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlLabelElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlLabelElement> for HtmlLabelElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlLabelElementProps :: render_state :: RenderState < dyn HtmlLabelElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , html_for = < TypeDefs :: html_for as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlLabelElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.html_for,
            state: state.html_for,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "for";
                < TypeDefs :: html_for as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_html_for (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
    }
}
pub use HtmlLabelElementProps::HtmlLabelElementProps;
pub mod label;
pub use label::label;
impl<
        TypeDefs: ?::core::marker::Sized + label::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom> for label::Data<TypeDefs, ComponentType>
where
    HtmlLabelElementProps::Data<TypeDefs>: crate::props::UpdateElement<web_sys::HtmlLabelElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlLabelElement,
        <HtmlLabelElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlLabelElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlLabelElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlLabelElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlLiElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlLiElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlLiElement> for HtmlLiElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlLiElementProps :: render_state :: RenderState < dyn HtmlLiElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , value = < TypeDefs :: value as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlLiElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.value,
            state: state.value,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "value";
                <TypeDefs::value as ::frender_dom::props::MaybeUpdateValue<i32>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_value(*v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
    }
}
pub use HtmlLiElementProps::HtmlLiElementProps;
pub mod li;
pub use li::li;
impl<
        TypeDefs: ?::core::marker::Sized + li::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom> for li::Data<TypeDefs, ComponentType>
where
    HtmlLiElementProps::Data<TypeDefs>: crate::props::UpdateElement<web_sys::HtmlLiElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlLiElement,
        <HtmlLiElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlLiElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlLiElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlLiElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlLinkElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlLinkElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlLinkElement> for HtmlLinkElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlLinkElementProps :: render_state :: RenderState < dyn HtmlLinkElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , as_ = < TypeDefs :: as_ as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , cross_origin = < TypeDefs :: cross_origin as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , fetch_priority = < TypeDefs :: fetch_priority as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , href = < TypeDefs :: href as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , href_lang = < TypeDefs :: href_lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , image_sizes = < TypeDefs :: image_sizes as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , image_src_set = < TypeDefs :: image_src_set as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , integrity = < TypeDefs :: integrity as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , media = < TypeDefs :: media as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , prefetch = < TypeDefs :: prefetch as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , referrer_policy = < TypeDefs :: referrer_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , rel = < TypeDefs :: rel as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , sizes = < TypeDefs :: sizes as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , type_ = < TypeDefs :: type_ as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , blocking = < TypeDefs :: blocking as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlLinkElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.as_,
            state: state.as_,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "as";
                <TypeDefs::as_ as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_as(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.cross_origin,
            state: state.cross_origin,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "crossorigin";
                < TypeDefs :: cross_origin as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , match element { el => | v : & _ | el . set_cross_origin (Some (v)) , } , match element { el => | | el . set_cross_origin (None) , } ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.fetch_priority,
            state: state.fetch_priority,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "fetchpriority";
                < TypeDefs :: fetch_priority as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.href,
            state: state.href,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "href";
                <TypeDefs::href as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_href(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.href_lang,
            state: state.href_lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hreflang";
                < TypeDefs :: href_lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_hreflang (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.image_sizes,
            state: state.image_sizes,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "imagesizes";
                < TypeDefs :: image_sizes as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.image_src_set,
            state: state.image_src_set,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "imagesrcset";
                < TypeDefs :: image_src_set as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.integrity,
            state: state.integrity,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "integrity";
                < TypeDefs :: integrity as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_integrity (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.media,
            state: state.media,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "media";
                <TypeDefs::media as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_media(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.prefetch,
            state: state.prefetch,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "prefetch";
                < TypeDefs :: prefetch as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.referrer_policy,
            state: state.referrer_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "referrerpolicy";
                < TypeDefs :: referrer_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_referrer_policy (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.rel,
            state: state.rel,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "rel";
                <TypeDefs::rel as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_rel(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.sizes,
            state: state.sizes,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "sizes";
                <TypeDefs::sizes as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.type_,
            state: state.type_,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "type";
                <TypeDefs::type_ as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_type(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.blocking,
            state: state.blocking,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "blocking";
                < TypeDefs :: blocking as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
    }
}
pub use HtmlLinkElementProps::HtmlLinkElementProps;
pub mod link;
pub use link::link;
impl<
        TypeDefs: ?::core::marker::Sized + link::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom> for link::Data<TypeDefs, ComponentType>
where
    HtmlLinkElementProps::Data<TypeDefs>: crate::props::UpdateElement<web_sys::HtmlLinkElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlLinkElement,
        <HtmlLinkElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlLinkElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlLinkElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlLinkElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlMapElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlMapElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlMapElement> for HtmlMapElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlMapElementProps :: render_state :: RenderState < dyn HtmlMapElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , name = < TypeDefs :: name as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlMapElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.name,
            state: state.name,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "name";
                <TypeDefs::name as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_name(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
    }
}
pub use HtmlMapElementProps::HtmlMapElementProps;
pub mod map;
pub use map::map;
impl<
        TypeDefs: ?::core::marker::Sized + map::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom> for map::Data<TypeDefs, ComponentType>
where
    HtmlMapElementProps::Data<TypeDefs>: crate::props::UpdateElement<web_sys::HtmlMapElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlMapElement,
        <HtmlMapElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlMapElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlMapElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlMapElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlMetaElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlMetaElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlMetaElement> for HtmlMetaElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlMetaElementProps :: render_state :: RenderState < dyn HtmlMetaElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , charset = < TypeDefs :: charset as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , content = < TypeDefs :: content as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , http_equiv = < TypeDefs :: http_equiv as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , name = < TypeDefs :: name as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlMetaElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.charset,
            state: state.charset,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "charset";
                < TypeDefs :: charset as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content,
            state: state.content,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "content";
                < TypeDefs :: content as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_content (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.http_equiv,
            state: state.http_equiv,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "http-equiv";
                < TypeDefs :: http_equiv as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_http_equiv (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.name,
            state: state.name,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "name";
                <TypeDefs::name as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_name(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
    }
}
pub use HtmlMetaElementProps::HtmlMetaElementProps;
pub mod meta;
pub use meta::meta;
impl<
        TypeDefs: ?::core::marker::Sized + meta::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom> for meta::Data<TypeDefs, ComponentType>
where
    HtmlMetaElementProps::Data<TypeDefs>: crate::props::UpdateElement<web_sys::HtmlMetaElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlMetaElement,
        <HtmlMetaElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlMetaElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlMetaElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlMetaElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlMeterElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlMeterElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlMeterElement> for HtmlMeterElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlMeterElementProps :: render_state :: RenderState < dyn HtmlMeterElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , value = < TypeDefs :: value as :: frender_dom :: props :: MaybeUpdateValue < f64 , > > :: State , min = < TypeDefs :: min as :: frender_dom :: props :: MaybeUpdateValue < f64 , > > :: State , max = < TypeDefs :: max as :: frender_dom :: props :: MaybeUpdateValue < f64 , > > :: State , low = < TypeDefs :: low as :: frender_dom :: props :: MaybeUpdateValue < f64 , > > :: State , high = < TypeDefs :: high as :: frender_dom :: props :: MaybeUpdateValue < f64 , > > :: State , optimum = < TypeDefs :: optimum as :: frender_dom :: props :: MaybeUpdateValue < f64 , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlMeterElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.value,
            state: state.value,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "value";
                <TypeDefs::value as ::frender_dom::props::MaybeUpdateValue<f64>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_value(*v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.min,
            state: state.min,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "min";
                <TypeDefs::min as ::frender_dom::props::MaybeUpdateValue<f64>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_min(*v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.max,
            state: state.max,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "max";
                <TypeDefs::max as ::frender_dom::props::MaybeUpdateValue<f64>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_max(*v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.low,
            state: state.low,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "low";
                <TypeDefs::low as ::frender_dom::props::MaybeUpdateValue<f64>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_low(*v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.high,
            state: state.high,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "high";
                <TypeDefs::high as ::frender_dom::props::MaybeUpdateValue<f64>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_high(*v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.optimum,
            state: state.optimum,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "optimum";
                < TypeDefs :: optimum as :: frender_dom :: props :: MaybeUpdateValue < f64 , > > :: maybe_update_value (data , state , | v | element . set_optimum (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
    }
}
pub use HtmlMeterElementProps::HtmlMeterElementProps;
pub mod meter;
pub use meter::meter;
impl<
        TypeDefs: ?::core::marker::Sized + meter::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom> for meter::Data<TypeDefs, ComponentType>
where
    HtmlMeterElementProps::Data<TypeDefs>: crate::props::UpdateElement<web_sys::HtmlMeterElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlMeterElement,
        <HtmlMeterElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlMeterElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlMeterElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlMeterElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlObjectElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlObjectElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlObjectElement>
    for HtmlObjectElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlObjectElementProps :: render_state :: RenderState < dyn HtmlObjectElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , data = < TypeDefs :: data as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , form = < TypeDefs :: form as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , height = < TypeDefs :: height as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , name = < TypeDefs :: name as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , type_ = < TypeDefs :: type_ as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , use_map = < TypeDefs :: use_map as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , width = < TypeDefs :: width as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlObjectElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.data,
            state: state.data,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "data";
                <TypeDefs::data as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_data(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.form,
            state: state.form,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "form";
                <TypeDefs::form as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.height,
            state: state.height,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "height";
                < TypeDefs :: height as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_height (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.name,
            state: state.name,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "name";
                <TypeDefs::name as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_name(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.type_,
            state: state.type_,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "type";
                <TypeDefs::type_ as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_type(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.use_map,
            state: state.use_map,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "usemap";
                < TypeDefs :: use_map as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_use_map (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.width,
            state: state.width,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "width";
                <TypeDefs::width as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_width(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
    }
}
pub use HtmlObjectElementProps::HtmlObjectElementProps;
pub mod object;
pub use object::object;
impl<
        TypeDefs: ?::core::marker::Sized + object::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom>
    for object::Data<TypeDefs, ComponentType>
where
    HtmlObjectElementProps::Data<TypeDefs>: crate::props::UpdateElement<web_sys::HtmlObjectElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlObjectElement,
        <HtmlObjectElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlObjectElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlObjectElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlObjectElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlOListElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlOListElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlOListElement> for HtmlOListElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlOListElementProps :: render_state :: RenderState < dyn HtmlOListElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , reversed = < TypeDefs :: reversed as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , start = < TypeDefs :: start as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , type_ = < TypeDefs :: type_ as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlOListElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.reversed,
            state: state.reversed,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "reversed";
                < TypeDefs :: reversed as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_reversed (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.start,
            state: state.start,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "start";
                <TypeDefs::start as ::frender_dom::props::MaybeUpdateValue<i32>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_start(*v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.type_,
            state: state.type_,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "type";
                <TypeDefs::type_ as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_type(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
    }
}
pub use HtmlOListElementProps::HtmlOListElementProps;
pub mod ol;
pub use ol::ol;
impl<
        TypeDefs: ?::core::marker::Sized + ol::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom> for ol::Data<TypeDefs, ComponentType>
where
    HtmlOListElementProps::Data<TypeDefs>: crate::props::UpdateElement<web_sys::HtmlOListElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlOListElement,
        <HtmlOListElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlOListElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlOListElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlOListElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlOptGroupElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlOptGroupElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlOptGroupElement>
    for HtmlOptGroupElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlOptGroupElementProps :: render_state :: RenderState < dyn HtmlOptGroupElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , disabled = < TypeDefs :: disabled as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , label = < TypeDefs :: label as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlOptGroupElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.disabled,
            state: state.disabled,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "disabled";
                < TypeDefs :: disabled as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_disabled (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.label,
            state: state.label,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "label";
                <TypeDefs::label as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_label(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
    }
}
pub use HtmlOptGroupElementProps::HtmlOptGroupElementProps;
pub mod optgroup;
pub use optgroup::optgroup;
impl<
        TypeDefs: ?::core::marker::Sized + optgroup::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom>
    for optgroup::Data<TypeDefs, ComponentType>
where
    HtmlOptGroupElementProps::Data<TypeDefs>:
        crate::props::UpdateElement<web_sys::HtmlOptGroupElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlOptGroupElement,
        <HtmlOptGroupElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlOptGroupElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlOptGroupElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlOptGroupElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlOptionElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlOptionElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlOptionElement>
    for HtmlOptionElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlOptionElementProps :: render_state :: RenderState < dyn HtmlOptionElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , disabled = < TypeDefs :: disabled as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , label = < TypeDefs :: label as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , selected = < TypeDefs :: selected as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , value = < TypeDefs :: value as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlOptionElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.disabled,
            state: state.disabled,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "disabled";
                < TypeDefs :: disabled as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_disabled (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.label,
            state: state.label,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "label";
                <TypeDefs::label as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_label(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.selected,
            state: state.selected,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "selected";
                < TypeDefs :: selected as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_selected (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.value,
            state: state.value,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "value";
                <TypeDefs::value as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_value(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
    }
}
pub use HtmlOptionElementProps::HtmlOptionElementProps;
pub mod option;
pub use option::option;
impl<
        TypeDefs: ?::core::marker::Sized + option::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom>
    for option::Data<TypeDefs, ComponentType>
where
    HtmlOptionElementProps::Data<TypeDefs>: crate::props::UpdateElement<web_sys::HtmlOptionElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlOptionElement,
        <HtmlOptionElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlOptionElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlOptionElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlOptionElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlOutputElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlOutputElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlOutputElement>
    for HtmlOutputElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlOutputElementProps :: render_state :: RenderState < dyn HtmlOutputElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , html_for = < TypeDefs :: html_for as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , form = < TypeDefs :: form as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , name = < TypeDefs :: name as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlOutputElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.html_for,
            state: state.html_for,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "for";
                < TypeDefs :: html_for as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.form,
            state: state.form,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "form";
                <TypeDefs::form as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.name,
            state: state.name,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "name";
                <TypeDefs::name as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_name(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
    }
}
pub use HtmlOutputElementProps::HtmlOutputElementProps;
pub mod output;
pub use output::output;
impl<
        TypeDefs: ?::core::marker::Sized + output::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom>
    for output::Data<TypeDefs, ComponentType>
where
    HtmlOutputElementProps::Data<TypeDefs>: crate::props::UpdateElement<web_sys::HtmlOutputElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlOutputElement,
        <HtmlOutputElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlOutputElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlOutputElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlOutputElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlProgressElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlProgressElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlProgressElement>
    for HtmlProgressElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlProgressElementProps :: render_state :: RenderState < dyn HtmlProgressElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , max = < TypeDefs :: max as :: frender_dom :: props :: MaybeUpdateValue < f64 , > > :: State , value = < TypeDefs :: value as :: frender_dom :: props :: MaybeUpdateValue < f64 , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlProgressElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.max,
            state: state.max,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "max";
                <TypeDefs::max as ::frender_dom::props::MaybeUpdateValue<f64>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_max(*v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.value,
            state: state.value,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "value";
                <TypeDefs::value as ::frender_dom::props::MaybeUpdateValue<f64>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_value(*v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
    }
}
pub use HtmlProgressElementProps::HtmlProgressElementProps;
pub mod progress;
pub use progress::progress;
impl<
        TypeDefs: ?::core::marker::Sized + progress::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom>
    for progress::Data<TypeDefs, ComponentType>
where
    HtmlProgressElementProps::Data<TypeDefs>:
        crate::props::UpdateElement<web_sys::HtmlProgressElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlProgressElement,
        <HtmlProgressElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlProgressElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlProgressElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlProgressElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlScriptElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlScriptElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlScriptElement>
    for HtmlScriptElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlScriptElementProps :: render_state :: RenderState < dyn HtmlScriptElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , r#async = < TypeDefs :: r#async as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , cross_origin = < TypeDefs :: cross_origin as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , defer = < TypeDefs :: defer as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , fetch_priority = < TypeDefs :: fetch_priority as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , integrity = < TypeDefs :: integrity as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , no_module = < TypeDefs :: no_module as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , referrer_policy = < TypeDefs :: referrer_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , src = < TypeDefs :: src as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , type_ = < TypeDefs :: type_ as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , blocking = < TypeDefs :: blocking as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlScriptElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.r#async,
            state: state.r#async,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "r#async";
                < TypeDefs :: r#async as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_async (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.cross_origin,
            state: state.cross_origin,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "crossorigin";
                < TypeDefs :: cross_origin as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , match element { el => | v : & _ | el . set_cross_origin (Some (v)) , } , match element { el => | | el . set_cross_origin (None) , } ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.defer,
            state: state.defer,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "defer";
                < TypeDefs :: defer as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_defer (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.fetch_priority,
            state: state.fetch_priority,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "fetchpriority";
                < TypeDefs :: fetch_priority as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.integrity,
            state: state.integrity,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "integrity";
                < TypeDefs :: integrity as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_integrity (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.no_module,
            state: state.no_module,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nomodule";
                < TypeDefs :: no_module as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_no_module (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.referrer_policy,
            state: state.referrer_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "referrerpolicy";
                < TypeDefs :: referrer_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.src,
            state: state.src,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "src";
                <TypeDefs::src as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_src(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.type_,
            state: state.type_,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "type_";
                <TypeDefs::type_ as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_type(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.blocking,
            state: state.blocking,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "blocking";
                < TypeDefs :: blocking as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
    }
}
pub use HtmlScriptElementProps::HtmlScriptElementProps;
pub mod script;
pub use script::script;
impl<
        TypeDefs: ?::core::marker::Sized + script::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom>
    for script::Data<TypeDefs, ComponentType>
where
    HtmlScriptElementProps::Data<TypeDefs>: crate::props::UpdateElement<web_sys::HtmlScriptElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlScriptElement,
        <HtmlScriptElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlScriptElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlScriptElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlScriptElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlSelectElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlSelectElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlSelectElement>
    for HtmlSelectElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlSelectElementProps :: render_state :: RenderState < dyn HtmlSelectElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , auto_complete = < TypeDefs :: auto_complete as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , disabled = < TypeDefs :: disabled as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , form = < TypeDefs :: form as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , multiple = < TypeDefs :: multiple as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , name = < TypeDefs :: name as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , required = < TypeDefs :: required as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , size = < TypeDefs :: size as :: frender_dom :: props :: MaybeUpdateValue < u32 , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlSelectElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_complete,
            state: state.auto_complete,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocomplete";
                < TypeDefs :: auto_complete as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_autocomplete (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.disabled,
            state: state.disabled,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "disabled";
                < TypeDefs :: disabled as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_disabled (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.form,
            state: state.form,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "form";
                <TypeDefs::form as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.multiple,
            state: state.multiple,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "multiple";
                < TypeDefs :: multiple as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_multiple (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.name,
            state: state.name,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "name";
                <TypeDefs::name as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_name(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.required,
            state: state.required,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "required";
                < TypeDefs :: required as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_required (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.size,
            state: state.size,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "size";
                <TypeDefs::size as ::frender_dom::props::MaybeUpdateValue<u32>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_size(*v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
    }
}
pub use HtmlSelectElementProps::HtmlSelectElementProps;
pub mod select;
pub use select::select;
impl<
        TypeDefs: ?::core::marker::Sized + select::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom>
    for select::Data<TypeDefs, ComponentType>
where
    HtmlSelectElementProps::Data<TypeDefs>: crate::props::UpdateElement<web_sys::HtmlSelectElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlSelectElement,
        <HtmlSelectElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlSelectElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlSelectElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlSelectElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlSlotElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlSlotElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlSlotElement> for HtmlSlotElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlSlotElementProps :: render_state :: RenderState < dyn HtmlSlotElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , name = < TypeDefs :: name as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlSlotElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.name,
            state: state.name,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "name";
                <TypeDefs::name as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_name(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
    }
}
pub use HtmlSlotElementProps::HtmlSlotElementProps;
pub mod slot;
pub use slot::slot;
impl<
        TypeDefs: ?::core::marker::Sized + slot::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom> for slot::Data<TypeDefs, ComponentType>
where
    HtmlSlotElementProps::Data<TypeDefs>: crate::props::UpdateElement<web_sys::HtmlSlotElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlSlotElement,
        <HtmlSlotElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlSlotElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlSlotElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlSlotElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlSourceElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlSourceElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlSourceElement>
    for HtmlSourceElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlSourceElementProps :: render_state :: RenderState < dyn HtmlSourceElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , type_ = < TypeDefs :: type_ as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , src = < TypeDefs :: src as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , srcset = < TypeDefs :: srcset as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , sizes = < TypeDefs :: sizes as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , media = < TypeDefs :: media as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , height = < TypeDefs :: height as :: frender_dom :: props :: MaybeUpdateValue < u32 , > > :: State , width = < TypeDefs :: width as :: frender_dom :: props :: MaybeUpdateValue < u32 , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlSourceElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.type_,
            state: state.type_,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "type_";
                <TypeDefs::type_ as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_type(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.src,
            state: state.src,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "src";
                <TypeDefs::src as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_src(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.srcset,
            state: state.srcset,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "srcset";
                < TypeDefs :: srcset as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_srcset (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.sizes,
            state: state.sizes,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "sizes";
                <TypeDefs::sizes as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_sizes(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.media,
            state: state.media,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "media";
                <TypeDefs::media as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_media(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.height,
            state: state.height,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "height";
                < TypeDefs :: height as :: frender_dom :: props :: MaybeUpdateValue < u32 , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.width,
            state: state.width,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "width";
                <TypeDefs::width as ::frender_dom::props::MaybeUpdateValue<u32>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
    }
}
pub use HtmlSourceElementProps::HtmlSourceElementProps;
pub mod source;
pub use source::source;
impl<
        TypeDefs: ?::core::marker::Sized + source::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom>
    for source::Data<TypeDefs, ComponentType>
where
    HtmlSourceElementProps::Data<TypeDefs>: crate::props::UpdateElement<web_sys::HtmlSourceElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlSourceElement,
        <HtmlSourceElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlSourceElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlSourceElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlSourceElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlStyleElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlStyleElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlStyleElement> for HtmlStyleElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlStyleElementProps :: render_state :: RenderState < dyn HtmlStyleElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , media = < TypeDefs :: media as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , blocking = < TypeDefs :: blocking as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , type_ = < TypeDefs :: type_ as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlStyleElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.media,
            state: state.media,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "media";
                <TypeDefs::media as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_media(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.blocking,
            state: state.blocking,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "blocking";
                < TypeDefs :: blocking as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.type_,
            state: state.type_,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "type_";
                <TypeDefs::type_ as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_type(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
    }
}
pub use HtmlStyleElementProps::HtmlStyleElementProps;
pub mod style;
pub use style::style;
impl<
        TypeDefs: ?::core::marker::Sized + style::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom> for style::Data<TypeDefs, ComponentType>
where
    HtmlStyleElementProps::Data<TypeDefs>: crate::props::UpdateElement<web_sys::HtmlStyleElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlStyleElement,
        <HtmlStyleElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlStyleElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlStyleElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlStyleElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlTableElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlTableElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlTableElement> for HtmlTableElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlTableElementProps :: render_state :: RenderState < dyn HtmlTableElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , align = < TypeDefs :: align as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , bg_color = < TypeDefs :: bg_color as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , border = < TypeDefs :: border as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , cell_padding = < TypeDefs :: cell_padding as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , cell_spacing = < TypeDefs :: cell_spacing as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , frame = < TypeDefs :: frame as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , rules = < TypeDefs :: rules as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , summary = < TypeDefs :: summary as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , width = < TypeDefs :: width as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlTableElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.align,
            state: state.align,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "align";
                <TypeDefs::align as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_align(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.bg_color,
            state: state.bg_color,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "bgcolor";
                < TypeDefs :: bg_color as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_bg_color (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.border,
            state: state.border,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "border";
                < TypeDefs :: border as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_border (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.cell_padding,
            state: state.cell_padding,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "cellpadding";
                < TypeDefs :: cell_padding as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_cell_padding (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.cell_spacing,
            state: state.cell_spacing,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "cellspacing";
                < TypeDefs :: cell_spacing as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_cell_spacing (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.frame,
            state: state.frame,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "frame";
                <TypeDefs::frame as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_frame(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.rules,
            state: state.rules,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "rules";
                <TypeDefs::rules as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_rules(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.summary,
            state: state.summary,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "summary";
                < TypeDefs :: summary as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_summary (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.width,
            state: state.width,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "width";
                <TypeDefs::width as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_width(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
    }
}
pub use HtmlTableElementProps::HtmlTableElementProps;
pub mod table;
pub use table::table;
impl<
        TypeDefs: ?::core::marker::Sized + table::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom> for table::Data<TypeDefs, ComponentType>
where
    HtmlTableElementProps::Data<TypeDefs>: crate::props::UpdateElement<web_sys::HtmlTableElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlTableElement,
        <HtmlTableElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlTableElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlTableElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlTableElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlTableSectionElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlTableSectionElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlTableSectionElement>
    for HtmlTableSectionElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlTableSectionElementProps :: render_state :: RenderState < dyn HtmlTableSectionElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , align = < TypeDefs :: align as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , bg_color = < TypeDefs :: bg_color as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , char = < TypeDefs :: char as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , char_off = < TypeDefs :: char_off as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , v_align = < TypeDefs :: v_align as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlTableSectionElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.align,
            state: state.align,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "align";
                <TypeDefs::align as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_align(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.bg_color,
            state: state.bg_color,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "bgcolor";
                < TypeDefs :: bg_color as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.char,
            state: state.char,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "char";
                <TypeDefs::char as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_ch(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.char_off,
            state: state.char_off,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "charoff";
                < TypeDefs :: char_off as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_ch_off (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.v_align,
            state: state.v_align,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "valign";
                < TypeDefs :: v_align as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_v_align (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
    }
}
pub use HtmlTableSectionElementProps::HtmlTableSectionElementProps;
pub mod tbody;
pub use tbody::tbody;
impl<
        TypeDefs: ?::core::marker::Sized + tbody::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom> for tbody::Data<TypeDefs, ComponentType>
where
    HtmlTableSectionElementProps::Data<TypeDefs>:
        crate::props::UpdateElement<web_sys::HtmlTableSectionElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlTableSectionElement,
        <HtmlTableSectionElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlTableSectionElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlTableSectionElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlTableSectionElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
pub mod tfoot;
pub use tfoot::tfoot;
pub mod thead;
pub use thead::thead;
#[allow(non_snake_case)]
pub mod HtmlTableRowElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlTableRowElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlTableRowElement>
    for HtmlTableRowElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlTableRowElementProps :: render_state :: RenderState < dyn HtmlTableRowElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , align = < TypeDefs :: align as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , bg_color = < TypeDefs :: bg_color as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , char = < TypeDefs :: char as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , char_off = < TypeDefs :: char_off as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , v_align = < TypeDefs :: v_align as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlTableRowElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.align,
            state: state.align,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "align";
                <TypeDefs::align as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_align(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.bg_color,
            state: state.bg_color,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "bgcolor";
                < TypeDefs :: bg_color as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.char,
            state: state.char,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "char";
                <TypeDefs::char as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_ch(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.char_off,
            state: state.char_off,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "charoff";
                < TypeDefs :: char_off as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_ch_off (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.v_align,
            state: state.v_align,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "valign";
                < TypeDefs :: v_align as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_v_align (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
    }
}
pub use HtmlTableRowElementProps::HtmlTableRowElementProps;
pub mod tr;
pub use tr::tr;
impl<
        TypeDefs: ?::core::marker::Sized + tr::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom> for tr::Data<TypeDefs, ComponentType>
where
    HtmlTableRowElementProps::Data<TypeDefs>:
        crate::props::UpdateElement<web_sys::HtmlTableRowElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlTableRowElement,
        <HtmlTableRowElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlTableRowElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlTableRowElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlTableRowElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlTableColElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlTableColElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlTableColElement>
    for HtmlTableColElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlTableColElementProps :: render_state :: RenderState < dyn HtmlTableColElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , align = < TypeDefs :: align as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , bg_color = < TypeDefs :: bg_color as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , char = < TypeDefs :: char as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , char_off = < TypeDefs :: char_off as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , v_align = < TypeDefs :: v_align as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , span = < TypeDefs :: span as :: frender_dom :: props :: MaybeUpdateValue < u32 , > > :: State , width = < TypeDefs :: width as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlTableColElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.align,
            state: state.align,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "align";
                <TypeDefs::align as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_align(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.bg_color,
            state: state.bg_color,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "bgcolor";
                < TypeDefs :: bg_color as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.char,
            state: state.char,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "char";
                <TypeDefs::char as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_ch(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.char_off,
            state: state.char_off,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "charoff";
                < TypeDefs :: char_off as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_ch_off (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.v_align,
            state: state.v_align,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "valign";
                < TypeDefs :: v_align as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_v_align (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.span,
            state: state.span,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "span";
                <TypeDefs::span as ::frender_dom::props::MaybeUpdateValue<u32>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_span(*v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.width,
            state: state.width,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "width";
                <TypeDefs::width as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_width(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
    }
}
pub use HtmlTableColElementProps::HtmlTableColElementProps;
pub mod col;
pub use col::col;
impl<
        TypeDefs: ?::core::marker::Sized + col::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom> for col::Data<TypeDefs, ComponentType>
where
    HtmlTableColElementProps::Data<TypeDefs>:
        crate::props::UpdateElement<web_sys::HtmlTableColElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlTableColElement,
        <HtmlTableColElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlTableColElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlTableColElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlTableColElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
pub mod colgroup;
pub use colgroup::colgroup;
#[allow(non_snake_case)]
pub mod HtmlTableCellElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlTableCellElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlTableCellElement>
    for HtmlTableCellElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlTableCellElementProps :: render_state :: RenderState < dyn HtmlTableCellElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , align = < TypeDefs :: align as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , bg_color = < TypeDefs :: bg_color as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , char = < TypeDefs :: char as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , char_off = < TypeDefs :: char_off as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , v_align = < TypeDefs :: v_align as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , col_span = < TypeDefs :: col_span as :: frender_dom :: props :: MaybeUpdateValue < u32 , > > :: State , headers = < TypeDefs :: headers as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , row_span = < TypeDefs :: row_span as :: frender_dom :: props :: MaybeUpdateValue < u32 , > > :: State , abbr = < TypeDefs :: abbr as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , axis = < TypeDefs :: axis as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , height = < TypeDefs :: height as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , scope = < TypeDefs :: scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , width = < TypeDefs :: width as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlTableCellElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.align,
            state: state.align,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "align";
                <TypeDefs::align as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_align(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.bg_color,
            state: state.bg_color,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "bgcolor";
                < TypeDefs :: bg_color as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.char,
            state: state.char,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "char";
                <TypeDefs::char as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_ch(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.char_off,
            state: state.char_off,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "charoff";
                < TypeDefs :: char_off as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_ch_off (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.v_align,
            state: state.v_align,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "valign";
                < TypeDefs :: v_align as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_v_align (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.col_span,
            state: state.col_span,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "colspan";
                < TypeDefs :: col_span as :: frender_dom :: props :: MaybeUpdateValue < u32 , > > :: maybe_update_value (data , state , | v | element . set_col_span (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.headers,
            state: state.headers,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "headers";
                < TypeDefs :: headers as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_headers (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.row_span,
            state: state.row_span,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "rowspan";
                < TypeDefs :: row_span as :: frender_dom :: props :: MaybeUpdateValue < u32 , > > :: maybe_update_value (data , state , | v | element . set_row_span (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.abbr,
            state: state.abbr,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "abbr";
                <TypeDefs::abbr as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.axis,
            state: state.axis,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "axis";
                <TypeDefs::axis as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_axis(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.height,
            state: state.height,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "height";
                < TypeDefs :: height as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_height (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.scope,
            state: state.scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "scope";
                <TypeDefs::scope as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.width,
            state: state.width,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "width";
                <TypeDefs::width as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_width(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
    }
}
pub use HtmlTableCellElementProps::HtmlTableCellElementProps;
pub mod td;
pub use td::td;
impl<
        TypeDefs: ?::core::marker::Sized + td::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom> for td::Data<TypeDefs, ComponentType>
where
    HtmlTableCellElementProps::Data<TypeDefs>:
        crate::props::UpdateElement<web_sys::HtmlTableCellElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlTableCellElement,
        <HtmlTableCellElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlTableCellElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlTableCellElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlTableCellElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
pub mod th;
pub use th::th;
#[allow(non_snake_case)]
pub mod HtmlTextAreaElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlTextAreaElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlTextAreaElement>
    for HtmlTextAreaElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlTextAreaElementProps :: render_state :: RenderState < dyn HtmlTextAreaElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , auto_complete = < TypeDefs :: auto_complete as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_correct = < TypeDefs :: auto_correct as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , cols = < TypeDefs :: cols as :: frender_dom :: props :: MaybeUpdateValue < u32 , > > :: State , disabled = < TypeDefs :: disabled as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , form = < TypeDefs :: form as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , max_length = < TypeDefs :: max_length as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , min_length = < TypeDefs :: min_length as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , name = < TypeDefs :: name as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , placeholder = < TypeDefs :: placeholder as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , read_only = < TypeDefs :: read_only as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , required = < TypeDefs :: required as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , rows = < TypeDefs :: rows as :: frender_dom :: props :: MaybeUpdateValue < u32 , > > :: State , wrap = < TypeDefs :: wrap as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlTextAreaElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_complete,
            state: state.auto_complete,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocomplete";
                < TypeDefs :: auto_complete as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_autocomplete (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_correct,
            state: state.auto_correct,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "auto_correct";
                < TypeDefs :: auto_correct as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.cols,
            state: state.cols,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "cols";
                <TypeDefs::cols as ::frender_dom::props::MaybeUpdateValue<u32>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_cols(*v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.disabled,
            state: state.disabled,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "disabled";
                < TypeDefs :: disabled as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_disabled (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.form,
            state: state.form,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "form";
                <TypeDefs::form as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.max_length,
            state: state.max_length,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "maxlength";
                < TypeDefs :: max_length as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_max_length (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.min_length,
            state: state.min_length,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "minlength";
                < TypeDefs :: min_length as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_min_length (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.name,
            state: state.name,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "name";
                <TypeDefs::name as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_name(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.placeholder,
            state: state.placeholder,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "placeholder";
                < TypeDefs :: placeholder as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_placeholder (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.read_only,
            state: state.read_only,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "readonly";
                < TypeDefs :: read_only as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_read_only (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.required,
            state: state.required,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "required";
                < TypeDefs :: required as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_required (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.rows,
            state: state.rows,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "rows";
                <TypeDefs::rows as ::frender_dom::props::MaybeUpdateValue<u32>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_rows(*v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.wrap,
            state: state.wrap,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "wrap";
                <TypeDefs::wrap as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_wrap(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
    }
}
pub use HtmlTextAreaElementProps::HtmlTextAreaElementProps;
pub mod textarea;
pub use textarea::textarea;
impl<
        TypeDefs: ?::core::marker::Sized + textarea::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom>
    for textarea::Data<TypeDefs, ComponentType>
where
    HtmlTextAreaElementProps::Data<TypeDefs>:
        crate::props::UpdateElement<web_sys::HtmlTextAreaElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlTextAreaElement,
        <HtmlTextAreaElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlTextAreaElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlTextAreaElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlTextAreaElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlTimeElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlTimeElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlTimeElement> for HtmlTimeElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlTimeElementProps :: render_state :: RenderState < dyn HtmlTimeElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , date_time = < TypeDefs :: date_time as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlTimeElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.date_time,
            state: state.date_time,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "datetime";
                < TypeDefs :: date_time as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_date_time (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
    }
}
pub use HtmlTimeElementProps::HtmlTimeElementProps;
pub mod time;
pub use time::time;
impl<
        TypeDefs: ?::core::marker::Sized + time::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom> for time::Data<TypeDefs, ComponentType>
where
    HtmlTimeElementProps::Data<TypeDefs>: crate::props::UpdateElement<web_sys::HtmlTimeElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlTimeElement,
        <HtmlTimeElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlTimeElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlTimeElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlTimeElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlTrackElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlTrackElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlTrackElement> for HtmlTrackElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlTrackElementProps :: render_state :: RenderState < dyn HtmlTrackElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , default = < TypeDefs :: default as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , kind = < TypeDefs :: kind as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , label = < TypeDefs :: label as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , src = < TypeDefs :: src as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , src_lang = < TypeDefs :: src_lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlTrackElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.default,
            state: state.default,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "default";
                < TypeDefs :: default as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_default (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.kind,
            state: state.kind,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "kind";
                <TypeDefs::kind as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_kind(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.label,
            state: state.label,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "label";
                <TypeDefs::label as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_label(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.src,
            state: state.src,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "src";
                <TypeDefs::src as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_src(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.src_lang,
            state: state.src_lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "srclang";
                < TypeDefs :: src_lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_srclang (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
    }
}
pub use HtmlTrackElementProps::HtmlTrackElementProps;
pub mod track;
pub use track::track;
impl<
        TypeDefs: ?::core::marker::Sized + track::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom> for track::Data<TypeDefs, ComponentType>
where
    HtmlTrackElementProps::Data<TypeDefs>: crate::props::UpdateElement<web_sys::HtmlTrackElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlTrackElement,
        <HtmlTrackElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlTrackElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlTrackElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlTrackElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
#[allow(non_snake_case)]
pub mod HtmlUListElementProps;
#[cfg(feature = "dom")]
impl<TypeDefs: ?::core::marker::Sized + HtmlUListElementProps::Types>
    crate::props::UpdateElement<web_sys::HtmlUListElement> for HtmlUListElementProps::Data<TypeDefs>
where
    TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
    TypeDefs::on_click: crate::props::UpdateDomEventListener<crate::props::events::Click>,
{
    type State = HtmlUListElementProps :: render_state :: RenderState < dyn HtmlUListElementProps :: render_state :: RenderStateTypes < children = < TypeDefs :: children as frender_core :: UpdateRenderState < frender_dom :: Dom , > > :: State , class = < TypeDefs :: class as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , id = < TypeDefs :: id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , part = < TypeDefs :: part as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , access_key = < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_capitalize = < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , auto_focus = < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , content_editable = () , context_menu = < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , dir = < TypeDefs :: dir as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , draggable = < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , enter_key_hint = < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , hidden = < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , inert = < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , input_mode = < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , is = < TypeDefs :: is as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_id = < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_prop = < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_ref = < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_scope = < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , item_type = < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , lang = < TypeDefs :: lang as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , nonce = < TypeDefs :: nonce as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , role = < TypeDefs :: role as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , slot = < TypeDefs :: slot as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , spellcheck = < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , style = < TypeDefs :: style as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , tab_index = < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: State , title = < TypeDefs :: title as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , translate = < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , virtual_keyboard_policy = < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , on_click = < TypeDefs :: on_click as crate :: props :: UpdateDomEventListener < crate :: props :: events :: Click , > > :: State , compact = < TypeDefs :: compact as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: State , type_ = < TypeDefs :: type_ as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: State , > , > ;
    fn update_element(
        this: Self,
        element: &web_sys::HtmlUListElement,
        children_ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let state = state.pin_project();
        let dom_element: &::web_sys::Element = element.as_ref();
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.children,
            state: state.children,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                state,
                children_ctx,
                ..
            } => ::frender_core::UpdateRenderState::update_render_state(data, children_ctx, state),
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.class,
            state: state.class,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "class";
                <TypeDefs::class as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.id,
            state: state.id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "id";
                <TypeDefs::id as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.part,
            state: state.part,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "part";
                <TypeDefs::part as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.access_key,
            state: state.access_key,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "accesskey";
                < TypeDefs :: access_key as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | element . set_access_key (v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_capitalize,
            state: state.auto_capitalize,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autocapitalize";
                < TypeDefs :: auto_capitalize as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.auto_focus,
            state: state.auto_focus,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "autofocus";
                < TypeDefs :: auto_focus as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.content_editable,
            state: state.content_editable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData { data, .. } => {}
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.context_menu,
            state: state.context_menu,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "contextmenu";
                < TypeDefs :: context_menu as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.dir,
            state: state.dir,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "dir";
                <TypeDefs::dir as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_dir(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.draggable,
            state: state.draggable,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "draggable";
                < TypeDefs :: draggable as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_draggable (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.enter_key_hint,
            state: state.enter_key_hint,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "enterkeyhint";
                < TypeDefs :: enter_key_hint as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.hidden,
            state: state.hidden,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "hidden";
                < TypeDefs :: hidden as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_hidden (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.inert,
            state: state.inert,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inert";
                < TypeDefs :: inert as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.input_mode,
            state: state.input_mode,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "inputmode";
                < TypeDefs :: input_mode as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.is,
            state: state.is,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "is";
                <TypeDefs::is as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_id,
            state: state.item_id,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemid";
                < TypeDefs :: item_id as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_prop,
            state: state.item_prop,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemprop";
                < TypeDefs :: item_prop as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_ref,
            state: state.item_ref,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemref";
                < TypeDefs :: item_ref as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_scope,
            state: state.item_scope,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemscope";
                < TypeDefs :: item_scope as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.item_type,
            state: state.item_type,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "itemtype";
                < TypeDefs :: item_type as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.lang,
            state: state.lang,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "lang";
                <TypeDefs::lang as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_lang(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.nonce,
            state: state.nonce,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "nonce";
                <TypeDefs::nonce as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.role,
            state: state.role,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "role";
                <TypeDefs::role as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.slot,
            state: state.slot,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "slot";
                <TypeDefs::slot as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.spellcheck,
            state: state.spellcheck,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "spellcheck";
                < TypeDefs :: spellcheck as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_spellcheck (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.style,
            state: state.style,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "style";
                <TypeDefs::style as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| {
                        crate::props::UpdateElementAttribute::update_element_attribute(
                            v,
                            dom_element,
                            ATTR_NAME,
                        )
                    },
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.tab_index,
            state: state.tab_index,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "tabindex";
                < TypeDefs :: tab_index as :: frender_dom :: props :: MaybeUpdateValue < i32 , > > :: maybe_update_value (data , state , | v | element . set_tab_index (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.title,
            state: state.title,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "title";
                <TypeDefs::title as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_title(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.translate,
            state: state.translate,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "translate";
                < TypeDefs :: translate as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.virtual_keyboard_policy,
            state: state.virtual_keyboard_policy,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "virtualkeyboardpolicy";
                < TypeDefs :: virtual_keyboard_policy as :: frender_dom :: props :: MaybeUpdateValue < str , > > :: maybe_update_value (data , state , | v | crate :: props :: UpdateElementAttribute :: update_element_attribute (v , dom_element , ATTR_NAME ,) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        # [allow (unused_variables)] match (crate :: props :: FieldData { data : this . on_click , state : state . on_click , element , dom_element , children_ctx : & mut * children_ctx , }) { crate :: props :: FieldData { data , state , element , .. } => { crate :: props :: UpdateDomEventListener :: < crate :: props :: events :: Click , > :: update_dom_event_listener (data , element , state) } }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.compact,
            state: state.compact,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "compact";
                < TypeDefs :: compact as :: frender_dom :: props :: MaybeUpdateValue < bool , > > :: maybe_update_value (data , state , | v | element . set_compact (* v) , | | dom_element . remove_attribute (ATTR_NAME) . unwrap () ,)
            }
        }
        #[allow(unused_variables)]
        match (crate::props::FieldData {
            data: this.type_,
            state: state.type_,
            element,
            dom_element,
            children_ctx: &mut *children_ctx,
        }) {
            crate::props::FieldData {
                data,
                dom_element,
                state,
                element,
                ..
            } => {
                #[allow(unused)]
                const ATTR_NAME: &::core::primitive::str = "type";
                <TypeDefs::type_ as ::frender_dom::props::MaybeUpdateValue<str>>::maybe_update_value(
                    data,
                    state,
                    |v| element.set_type(v),
                    || dom_element.remove_attribute(ATTR_NAME).unwrap(),
                )
            }
        }
    }
}
pub use HtmlUListElementProps::HtmlUListElementProps;
pub mod ul;
pub use ul::ul;
impl<
        TypeDefs: ?::core::marker::Sized + ul::Types,
        ComponentType: crate::props::IntrinsicComponent,
    > ::frender_core::UpdateRenderState<::frender_dom::Dom> for ul::Data<TypeDefs, ComponentType>
where
    HtmlUListElementProps::Data<TypeDefs>: crate::props::UpdateElement<web_sys::HtmlUListElement>,
{
    type State = crate::props::IntrinsicComponentRenderState<
        web_sys::HtmlUListElement,
        <HtmlUListElementProps::Data<TypeDefs> as crate::props::UpdateElement<
            web_sys::HtmlUListElement,
        >>::State,
    >;
    fn update_render_state(
        self,
        ctx: &mut ::frender_dom::Dom,
        state: ::core::pin::Pin<&mut Self::State>,
    ) {
        let (node_and_mounted, state) = state.pin_project();
        crate::utils::dom::insert_element_and_update_with_tag(
            node_and_mounted,
            ctx,
            ComponentType::INTRINSIC_TAG,
            |element, children_ctx| {
                <HtmlUListElementProps::Data<TypeDefs> as crate::props::UpdateElement<
                    web_sys::HtmlUListElement,
                >>::update_element(self.0, element, children_ctx, state)
            },
        )
    }
}
