#[allow(non_snake_case)]
#[inline(always)]
pub fn HtmlElementProps() -> Building<TypesInitial> {
    #[allow(unused_imports)]
    use super::*;
    self::Building {
        ElementProps: ElementProps::build(ElementProps()),
        access_key: (),
        auto_capitalize: (),
        auto_focus: (),
        content_editable: unimplemented!(),
        context_menu: (),
        dir: (),
        draggable: (),
        enter_key_hint: (),
        hidden: (),
        inert: (),
        input_mode: (),
        is: (),
        item_id: (),
        item_prop: (),
        item_ref: (),
        item_scope: (),
        item_type: (),
        lang: (),
        nonce: (),
        role: (),
        slot: (),
        spellcheck: (),
        style: (),
        tab_index: (),
        title: (),
        translate: (),
        virtual_keyboard_policy: (),
        on_invalid: (),
        on_animation_cancel: (),
        on_animation_end: (),
        on_animation_iteration: (),
        on_animation_start: (),
        on_before_input: (),
        on_input: (),
        on_change: (),
        on_got_pointer_capture: (),
        on_lost_pointer_capture: (),
        on_pointer_cancel: (),
        on_pointer_down: (),
        on_pointer_enter: (),
        on_pointer_leave: (),
        on_pointer_move: (),
        on_pointer_out: (),
        on_pointer_over: (),
        on_pointer_up: (),
        on_transition_cancel: (),
        on_transition_end: (),
        on_transition_run: (),
        on_transition_start: (),
        on_drag: (),
        on_drag_end: (),
        on_drag_enter: (),
        on_drag_leave: (),
        on_drag_over: (),
        on_drag_start: (),
        on_drop: (),
    }
}
pub mod prelude {}
pub mod overwrite {
    #![allow(non_camel_case_types)]
    pub type ElementProps<TypeDefs, Value> = dyn super::Types<
        ElementProps = Value,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type children<TypeDefs, Value> = self::ElementProps<
        TypeDefs,
        super::super::ElementProps::overwrite::children<
            <TypeDefs as super::Types>::ElementProps,
            Value,
        >,
    >;
    pub type class<TypeDefs, Value> = self::ElementProps<
        TypeDefs,
        super::super::ElementProps::overwrite::class<
            <TypeDefs as super::Types>::ElementProps,
            Value,
        >,
    >;
    pub type id<TypeDefs, Value> = self::ElementProps<
        TypeDefs,
        super::super::ElementProps::overwrite::id<<TypeDefs as super::Types>::ElementProps, Value>,
    >;
    pub type part<TypeDefs, Value> = self::ElementProps<
        TypeDefs,
        super::super::ElementProps::overwrite::part<
            <TypeDefs as super::Types>::ElementProps,
            Value,
        >,
    >;
    pub type on_cancel<TypeDefs, Value> = self::ElementProps<
        TypeDefs,
        super::super::ElementProps::overwrite::on_cancel<
            <TypeDefs as super::Types>::ElementProps,
            Value,
        >,
    >;
    pub type on_error<TypeDefs, Value> = self::ElementProps<
        TypeDefs,
        super::super::ElementProps::overwrite::on_error<
            <TypeDefs as super::Types>::ElementProps,
            Value,
        >,
    >;
    pub type on_scroll<TypeDefs, Value> = self::ElementProps<
        TypeDefs,
        super::super::ElementProps::overwrite::on_scroll<
            <TypeDefs as super::Types>::ElementProps,
            Value,
        >,
    >;
    pub type on_security_policy_violation<TypeDefs, Value> = self::ElementProps<
        TypeDefs,
        super::super::ElementProps::overwrite::on_security_policy_violation<
            <TypeDefs as super::Types>::ElementProps,
            Value,
        >,
    >;
    pub type on_select<TypeDefs, Value> = self::ElementProps<
        TypeDefs,
        super::super::ElementProps::overwrite::on_select<
            <TypeDefs as super::Types>::ElementProps,
            Value,
        >,
    >;
    pub type on_wheel<TypeDefs, Value> = self::ElementProps<
        TypeDefs,
        super::super::ElementProps::overwrite::on_wheel<
            <TypeDefs as super::Types>::ElementProps,
            Value,
        >,
    >;
    pub type on_copy<TypeDefs, Value> = self::ElementProps<
        TypeDefs,
        super::super::ElementProps::overwrite::on_copy<
            <TypeDefs as super::Types>::ElementProps,
            Value,
        >,
    >;
    pub type on_cut<TypeDefs, Value> = self::ElementProps<
        TypeDefs,
        super::super::ElementProps::overwrite::on_cut<
            <TypeDefs as super::Types>::ElementProps,
            Value,
        >,
    >;
    pub type on_paste<TypeDefs, Value> = self::ElementProps<
        TypeDefs,
        super::super::ElementProps::overwrite::on_paste<
            <TypeDefs as super::Types>::ElementProps,
            Value,
        >,
    >;
    pub type on_composition_end<TypeDefs, Value> = self::ElementProps<
        TypeDefs,
        super::super::ElementProps::overwrite::on_composition_end<
            <TypeDefs as super::Types>::ElementProps,
            Value,
        >,
    >;
    pub type on_composition_start<TypeDefs, Value> = self::ElementProps<
        TypeDefs,
        super::super::ElementProps::overwrite::on_composition_start<
            <TypeDefs as super::Types>::ElementProps,
            Value,
        >,
    >;
    pub type on_composition_update<TypeDefs, Value> = self::ElementProps<
        TypeDefs,
        super::super::ElementProps::overwrite::on_composition_update<
            <TypeDefs as super::Types>::ElementProps,
            Value,
        >,
    >;
    pub type on_blur<TypeDefs, Value> = self::ElementProps<
        TypeDefs,
        super::super::ElementProps::overwrite::on_blur<
            <TypeDefs as super::Types>::ElementProps,
            Value,
        >,
    >;
    pub type on_focus<TypeDefs, Value> = self::ElementProps<
        TypeDefs,
        super::super::ElementProps::overwrite::on_focus<
            <TypeDefs as super::Types>::ElementProps,
            Value,
        >,
    >;
    pub type on_focus_in<TypeDefs, Value> = self::ElementProps<
        TypeDefs,
        super::super::ElementProps::overwrite::on_focus_in<
            <TypeDefs as super::Types>::ElementProps,
            Value,
        >,
    >;
    pub type on_focus_out<TypeDefs, Value> = self::ElementProps<
        TypeDefs,
        super::super::ElementProps::overwrite::on_focus_out<
            <TypeDefs as super::Types>::ElementProps,
            Value,
        >,
    >;
    pub type on_fullscreen_change<TypeDefs, Value> = self::ElementProps<
        TypeDefs,
        super::super::ElementProps::overwrite::on_fullscreen_change<
            <TypeDefs as super::Types>::ElementProps,
            Value,
        >,
    >;
    pub type on_fullscreen_error<TypeDefs, Value> = self::ElementProps<
        TypeDefs,
        super::super::ElementProps::overwrite::on_fullscreen_error<
            <TypeDefs as super::Types>::ElementProps,
            Value,
        >,
    >;
    pub type on_key_down<TypeDefs, Value> = self::ElementProps<
        TypeDefs,
        super::super::ElementProps::overwrite::on_key_down<
            <TypeDefs as super::Types>::ElementProps,
            Value,
        >,
    >;
    pub type on_key_up<TypeDefs, Value> = self::ElementProps<
        TypeDefs,
        super::super::ElementProps::overwrite::on_key_up<
            <TypeDefs as super::Types>::ElementProps,
            Value,
        >,
    >;
    pub type on_aux_click<TypeDefs, Value> = self::ElementProps<
        TypeDefs,
        super::super::ElementProps::overwrite::on_aux_click<
            <TypeDefs as super::Types>::ElementProps,
            Value,
        >,
    >;
    pub type on_click<TypeDefs, Value> = self::ElementProps<
        TypeDefs,
        super::super::ElementProps::overwrite::on_click<
            <TypeDefs as super::Types>::ElementProps,
            Value,
        >,
    >;
    pub type on_context_menu<TypeDefs, Value> = self::ElementProps<
        TypeDefs,
        super::super::ElementProps::overwrite::on_context_menu<
            <TypeDefs as super::Types>::ElementProps,
            Value,
        >,
    >;
    pub type on_double_click<TypeDefs, Value> = self::ElementProps<
        TypeDefs,
        super::super::ElementProps::overwrite::on_double_click<
            <TypeDefs as super::Types>::ElementProps,
            Value,
        >,
    >;
    pub type on_mouse_down<TypeDefs, Value> = self::ElementProps<
        TypeDefs,
        super::super::ElementProps::overwrite::on_mouse_down<
            <TypeDefs as super::Types>::ElementProps,
            Value,
        >,
    >;
    pub type on_mouse_enter<TypeDefs, Value> = self::ElementProps<
        TypeDefs,
        super::super::ElementProps::overwrite::on_mouse_enter<
            <TypeDefs as super::Types>::ElementProps,
            Value,
        >,
    >;
    pub type on_mouse_leave<TypeDefs, Value> = self::ElementProps<
        TypeDefs,
        super::super::ElementProps::overwrite::on_mouse_leave<
            <TypeDefs as super::Types>::ElementProps,
            Value,
        >,
    >;
    pub type on_mouse_move<TypeDefs, Value> = self::ElementProps<
        TypeDefs,
        super::super::ElementProps::overwrite::on_mouse_move<
            <TypeDefs as super::Types>::ElementProps,
            Value,
        >,
    >;
    pub type on_mouse_out<TypeDefs, Value> = self::ElementProps<
        TypeDefs,
        super::super::ElementProps::overwrite::on_mouse_out<
            <TypeDefs as super::Types>::ElementProps,
            Value,
        >,
    >;
    pub type on_mouse_over<TypeDefs, Value> = self::ElementProps<
        TypeDefs,
        super::super::ElementProps::overwrite::on_mouse_over<
            <TypeDefs as super::Types>::ElementProps,
            Value,
        >,
    >;
    pub type on_mouse_up<TypeDefs, Value> = self::ElementProps<
        TypeDefs,
        super::super::ElementProps::overwrite::on_mouse_up<
            <TypeDefs as super::Types>::ElementProps,
            Value,
        >,
    >;
    pub type on_touch_cancel<TypeDefs, Value> = self::ElementProps<
        TypeDefs,
        super::super::ElementProps::overwrite::on_touch_cancel<
            <TypeDefs as super::Types>::ElementProps,
            Value,
        >,
    >;
    pub type on_touch_end<TypeDefs, Value> = self::ElementProps<
        TypeDefs,
        super::super::ElementProps::overwrite::on_touch_end<
            <TypeDefs as super::Types>::ElementProps,
            Value,
        >,
    >;
    pub type on_touch_move<TypeDefs, Value> = self::ElementProps<
        TypeDefs,
        super::super::ElementProps::overwrite::on_touch_move<
            <TypeDefs as super::Types>::ElementProps,
            Value,
        >,
    >;
    pub type on_touch_start<TypeDefs, Value> = self::ElementProps<
        TypeDefs,
        super::super::ElementProps::overwrite::on_touch_start<
            <TypeDefs as super::Types>::ElementProps,
            Value,
        >,
    >;
    pub type access_key<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = Value,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type auto_capitalize<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = Value,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type auto_focus<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = Value,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type content_editable<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = Value,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type context_menu<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = Value,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type dir<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = Value,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type draggable<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = Value,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type enter_key_hint<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = Value,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type hidden<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = Value,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type inert<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = Value,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type input_mode<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = Value,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type is<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = Value,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type item_id<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = Value,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type item_prop<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = Value,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type item_ref<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = Value,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type item_scope<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = Value,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type item_type<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = Value,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type lang<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = Value,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type nonce<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = Value,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type role<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = Value,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type slot<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = Value,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type spellcheck<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = Value,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type style<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = Value,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type tab_index<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = Value,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type title<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = Value,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type translate<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = Value,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type virtual_keyboard_policy<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = Value,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type on_invalid<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = Value,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type on_animation_cancel<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = Value,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type on_animation_end<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = Value,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type on_animation_iteration<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = Value,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type on_animation_start<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = Value,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type on_before_input<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = Value,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type on_input<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = Value,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type on_change<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = Value,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type on_got_pointer_capture<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = Value,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type on_lost_pointer_capture<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = Value,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type on_pointer_cancel<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = Value,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type on_pointer_down<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = Value,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type on_pointer_enter<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = Value,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type on_pointer_leave<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = Value,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type on_pointer_move<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = Value,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type on_pointer_out<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = Value,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type on_pointer_over<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = Value,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type on_pointer_up<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = Value,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type on_transition_cancel<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = Value,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type on_transition_end<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = Value,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type on_transition_run<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = Value,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type on_transition_start<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = Value,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type on_drag<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = Value,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type on_drag_end<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = Value,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type on_drag_enter<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = Value,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type on_drag_leave<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = Value,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type on_drag_over<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = Value,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type on_drag_start<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = Value,
        on_drop = <TypeDefs as super::Types>::on_drop,
    >;
    pub type on_drop<TypeDefs, Value> = dyn super::Types<
        ElementProps = <TypeDefs as super::Types>::ElementProps,
        access_key = <TypeDefs as super::Types>::access_key,
        auto_capitalize = <TypeDefs as super::Types>::auto_capitalize,
        auto_focus = <TypeDefs as super::Types>::auto_focus,
        content_editable = <TypeDefs as super::Types>::content_editable,
        context_menu = <TypeDefs as super::Types>::context_menu,
        dir = <TypeDefs as super::Types>::dir,
        draggable = <TypeDefs as super::Types>::draggable,
        enter_key_hint = <TypeDefs as super::Types>::enter_key_hint,
        hidden = <TypeDefs as super::Types>::hidden,
        inert = <TypeDefs as super::Types>::inert,
        input_mode = <TypeDefs as super::Types>::input_mode,
        is = <TypeDefs as super::Types>::is,
        item_id = <TypeDefs as super::Types>::item_id,
        item_prop = <TypeDefs as super::Types>::item_prop,
        item_ref = <TypeDefs as super::Types>::item_ref,
        item_scope = <TypeDefs as super::Types>::item_scope,
        item_type = <TypeDefs as super::Types>::item_type,
        lang = <TypeDefs as super::Types>::lang,
        nonce = <TypeDefs as super::Types>::nonce,
        role = <TypeDefs as super::Types>::role,
        slot = <TypeDefs as super::Types>::slot,
        spellcheck = <TypeDefs as super::Types>::spellcheck,
        style = <TypeDefs as super::Types>::style,
        tab_index = <TypeDefs as super::Types>::tab_index,
        title = <TypeDefs as super::Types>::title,
        translate = <TypeDefs as super::Types>::translate,
        virtual_keyboard_policy = <TypeDefs as super::Types>::virtual_keyboard_policy,
        on_invalid = <TypeDefs as super::Types>::on_invalid,
        on_animation_cancel = <TypeDefs as super::Types>::on_animation_cancel,
        on_animation_end = <TypeDefs as super::Types>::on_animation_end,
        on_animation_iteration = <TypeDefs as super::Types>::on_animation_iteration,
        on_animation_start = <TypeDefs as super::Types>::on_animation_start,
        on_before_input = <TypeDefs as super::Types>::on_before_input,
        on_input = <TypeDefs as super::Types>::on_input,
        on_change = <TypeDefs as super::Types>::on_change,
        on_got_pointer_capture = <TypeDefs as super::Types>::on_got_pointer_capture,
        on_lost_pointer_capture = <TypeDefs as super::Types>::on_lost_pointer_capture,
        on_pointer_cancel = <TypeDefs as super::Types>::on_pointer_cancel,
        on_pointer_down = <TypeDefs as super::Types>::on_pointer_down,
        on_pointer_enter = <TypeDefs as super::Types>::on_pointer_enter,
        on_pointer_leave = <TypeDefs as super::Types>::on_pointer_leave,
        on_pointer_move = <TypeDefs as super::Types>::on_pointer_move,
        on_pointer_out = <TypeDefs as super::Types>::on_pointer_out,
        on_pointer_over = <TypeDefs as super::Types>::on_pointer_over,
        on_pointer_up = <TypeDefs as super::Types>::on_pointer_up,
        on_transition_cancel = <TypeDefs as super::Types>::on_transition_cancel,
        on_transition_end = <TypeDefs as super::Types>::on_transition_end,
        on_transition_run = <TypeDefs as super::Types>::on_transition_run,
        on_transition_start = <TypeDefs as super::Types>::on_transition_start,
        on_drag = <TypeDefs as super::Types>::on_drag,
        on_drag_end = <TypeDefs as super::Types>::on_drag_end,
        on_drag_enter = <TypeDefs as super::Types>::on_drag_enter,
        on_drag_leave = <TypeDefs as super::Types>::on_drag_leave,
        on_drag_over = <TypeDefs as super::Types>::on_drag_over,
        on_drag_start = <TypeDefs as super::Types>::on_drag_start,
        on_drop = Value,
    >;
}
mod trait_types {
    #[allow(unused_imports)]
    use super::super::*;
    #[allow(non_camel_case_types)]
    pub trait Types {
        type ElementProps: ?::core::marker::Sized + ElementProps::Types;
        type access_key: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>;
        type auto_capitalize: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>;
        type auto_focus: crate::imports::frender_html::props::MaybeUpdateValueWithState<bool>;
        type content_editable: Todo<unimplemented![]>;
        type context_menu: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>;
        type dir: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>;
        type draggable: crate::imports::frender_html::props::MaybeUpdateValueWithState<bool>;
        type enter_key_hint: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>;
        type hidden: crate::imports::frender_html::props::MaybeUpdateValueWithState<bool>;
        type inert: crate::imports::frender_html::props::MaybeUpdateValueWithState<bool>;
        type input_mode: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>;
        type is: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>;
        type item_id: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>;
        type item_prop: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>;
        type item_ref: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>;
        type item_scope: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>;
        type item_type: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>;
        type lang: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>;
        type nonce: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>;
        type role: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>;
        type slot: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>;
        type spellcheck: crate::imports::frender_html::props::MaybeUpdateValueWithState<bool>;
        type style: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>;
        type tab_index: crate::imports::frender_html::props::MaybeUpdateValueWithState<i32>;
        type title: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>;
        type translate: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>;
        type virtual_keyboard_policy: crate::imports::frender_html::props::MaybeUpdateValueWithState<
            str,
        >;
        type on_invalid;
        type on_animation_cancel;
        type on_animation_end;
        type on_animation_iteration;
        type on_animation_start;
        type on_before_input;
        type on_input;
        type on_change;
        type on_got_pointer_capture;
        type on_lost_pointer_capture;
        type on_pointer_cancel;
        type on_pointer_down;
        type on_pointer_enter;
        type on_pointer_leave;
        type on_pointer_move;
        type on_pointer_out;
        type on_pointer_over;
        type on_pointer_up;
        type on_transition_cancel;
        type on_transition_end;
        type on_transition_run;
        type on_transition_start;
        type on_drag;
        type on_drag_end;
        type on_drag_enter;
        type on_drag_leave;
        type on_drag_over;
        type on_drag_start;
        type on_drop;
    }
}
pub use trait_types::Types;
pub use trait_types::Types as ValidTypes;
pub mod data_struct {
    #[non_exhaustive]
    pub struct HtmlElementProps<TypeDefs: super::Types + ?::core::marker::Sized> {
        pub ElementProps: super::super::ElementProps::Data<TypeDefs::ElementProps>,
        pub access_key: TypeDefs::access_key,
        pub auto_capitalize: TypeDefs::auto_capitalize,
        pub auto_focus: TypeDefs::auto_focus,
        pub content_editable: TypeDefs::content_editable,
        pub context_menu: TypeDefs::context_menu,
        pub dir: TypeDefs::dir,
        pub draggable: TypeDefs::draggable,
        pub enter_key_hint: TypeDefs::enter_key_hint,
        pub hidden: TypeDefs::hidden,
        pub inert: TypeDefs::inert,
        pub input_mode: TypeDefs::input_mode,
        pub is: TypeDefs::is,
        pub item_id: TypeDefs::item_id,
        pub item_prop: TypeDefs::item_prop,
        pub item_ref: TypeDefs::item_ref,
        pub item_scope: TypeDefs::item_scope,
        pub item_type: TypeDefs::item_type,
        pub lang: TypeDefs::lang,
        pub nonce: TypeDefs::nonce,
        pub role: TypeDefs::role,
        pub slot: TypeDefs::slot,
        pub spellcheck: TypeDefs::spellcheck,
        pub style: TypeDefs::style,
        pub tab_index: TypeDefs::tab_index,
        pub title: TypeDefs::title,
        pub translate: TypeDefs::translate,
        pub virtual_keyboard_policy: TypeDefs::virtual_keyboard_policy,
        pub on_invalid: TypeDefs::on_invalid,
        pub on_animation_cancel: TypeDefs::on_animation_cancel,
        pub on_animation_end: TypeDefs::on_animation_end,
        pub on_animation_iteration: TypeDefs::on_animation_iteration,
        pub on_animation_start: TypeDefs::on_animation_start,
        pub on_before_input: TypeDefs::on_before_input,
        pub on_input: TypeDefs::on_input,
        pub on_change: TypeDefs::on_change,
        pub on_got_pointer_capture: TypeDefs::on_got_pointer_capture,
        pub on_lost_pointer_capture: TypeDefs::on_lost_pointer_capture,
        pub on_pointer_cancel: TypeDefs::on_pointer_cancel,
        pub on_pointer_down: TypeDefs::on_pointer_down,
        pub on_pointer_enter: TypeDefs::on_pointer_enter,
        pub on_pointer_leave: TypeDefs::on_pointer_leave,
        pub on_pointer_move: TypeDefs::on_pointer_move,
        pub on_pointer_out: TypeDefs::on_pointer_out,
        pub on_pointer_over: TypeDefs::on_pointer_over,
        pub on_pointer_up: TypeDefs::on_pointer_up,
        pub on_transition_cancel: TypeDefs::on_transition_cancel,
        pub on_transition_end: TypeDefs::on_transition_end,
        pub on_transition_run: TypeDefs::on_transition_run,
        pub on_transition_start: TypeDefs::on_transition_start,
        pub on_drag: TypeDefs::on_drag,
        pub on_drag_end: TypeDefs::on_drag_end,
        pub on_drag_enter: TypeDefs::on_drag_enter,
        pub on_drag_leave: TypeDefs::on_drag_leave,
        pub on_drag_over: TypeDefs::on_drag_over,
        pub on_drag_start: TypeDefs::on_drag_start,
        pub on_drop: TypeDefs::on_drop,
    }
}
pub use ::core::convert::identity as Building;
pub use ::core::convert::identity as build;
pub use data_struct::HtmlElementProps as Data;
pub use data_struct::HtmlElementProps as Building;
pub struct Replacing<TypeDefs: ?::core::marker::Sized + Types>(pub Data<TypeDefs>);
mod types_initial {
    #[allow(unused_imports)]
    use super::super::*;
    pub type TypesInitial = dyn super::Types<
        ElementProps = ElementProps::TypesInitial,
        access_key = (),
        auto_capitalize = (),
        auto_focus = (),
        content_editable = unimplemented![],
        context_menu = (),
        dir = (),
        draggable = (),
        enter_key_hint = (),
        hidden = (),
        inert = (),
        input_mode = (),
        is = (),
        item_id = (),
        item_prop = (),
        item_ref = (),
        item_scope = (),
        item_type = (),
        lang = (),
        nonce = (),
        role = (),
        slot = (),
        spellcheck = (),
        style = (),
        tab_index = (),
        title = (),
        translate = (),
        virtual_keyboard_policy = (),
        on_invalid = (),
        on_animation_cancel = (),
        on_animation_end = (),
        on_animation_iteration = (),
        on_animation_start = (),
        on_before_input = (),
        on_input = (),
        on_change = (),
        on_got_pointer_capture = (),
        on_lost_pointer_capture = (),
        on_pointer_cancel = (),
        on_pointer_down = (),
        on_pointer_enter = (),
        on_pointer_leave = (),
        on_pointer_move = (),
        on_pointer_out = (),
        on_pointer_over = (),
        on_pointer_up = (),
        on_transition_cancel = (),
        on_transition_end = (),
        on_transition_run = (),
        on_transition_start = (),
        on_drag = (),
        on_drag_end = (),
        on_drag_enter = (),
        on_drag_leave = (),
        on_drag_over = (),
        on_drag_start = (),
        on_drop = (),
    >;
}
pub use types_initial::TypesInitial;
pub type DataInitial = Data<TypesInitial>;
#[cfg(feature = "csr")]
pub mod render_state {
    #[allow(non_camel_case_types)]
    pub trait RenderStateTypes {
        type ElementProps: crate::imports::frender_csr::props::IntrinsicComponentPollReactive;
        type access_key;
        type auto_capitalize;
        type auto_focus;
        type context_menu;
        type dir;
        type draggable;
        type enter_key_hint;
        type hidden;
        type inert;
        type input_mode;
        type is;
        type item_id;
        type item_prop;
        type item_ref;
        type item_scope;
        type item_type;
        type lang;
        type nonce;
        type role;
        type slot;
        type spellcheck;
        type style;
        type tab_index;
        type title;
        type translate;
        type virtual_keyboard_policy;
        type on_invalid;
        type on_animation_cancel;
        type on_animation_end;
        type on_animation_iteration;
        type on_animation_start;
        type on_before_input;
        type on_input;
        type on_change;
        type on_got_pointer_capture;
        type on_lost_pointer_capture;
        type on_pointer_cancel;
        type on_pointer_down;
        type on_pointer_enter;
        type on_pointer_leave;
        type on_pointer_move;
        type on_pointer_out;
        type on_pointer_over;
        type on_pointer_up;
        type on_transition_cancel;
        type on_transition_end;
        type on_transition_run;
        type on_transition_start;
        type on_drag;
        type on_drag_end;
        type on_drag_enter;
        type on_drag_leave;
        type on_drag_over;
        type on_drag_start;
        type on_drop;
    }
    crate::imports::pin_project! {
        #[project = RenderStateProj] pub struct RenderState < TypeDefs : RenderStateTypes
        > where TypeDefs : ? ::core::marker::Sized { #[pin] pub ElementProps :
        TypeDefs::ElementProps, pub access_key : TypeDefs::access_key, pub
        auto_capitalize : TypeDefs::auto_capitalize, pub auto_focus :
        TypeDefs::auto_focus, pub context_menu : TypeDefs::context_menu, pub dir :
        TypeDefs::dir, pub draggable : TypeDefs::draggable, pub enter_key_hint :
        TypeDefs::enter_key_hint, pub hidden : TypeDefs::hidden, pub inert :
        TypeDefs::inert, pub input_mode : TypeDefs::input_mode, pub is : TypeDefs::is,
        pub item_id : TypeDefs::item_id, pub item_prop : TypeDefs::item_prop, pub
        item_ref : TypeDefs::item_ref, pub item_scope : TypeDefs::item_scope, pub
        item_type : TypeDefs::item_type, pub lang : TypeDefs::lang, pub nonce :
        TypeDefs::nonce, pub role : TypeDefs::role, pub slot : TypeDefs::slot, pub
        spellcheck : TypeDefs::spellcheck, pub style : TypeDefs::style, pub tab_index :
        TypeDefs::tab_index, pub title : TypeDefs::title, pub translate :
        TypeDefs::translate, pub virtual_keyboard_policy :
        TypeDefs::virtual_keyboard_policy, pub on_invalid : TypeDefs::on_invalid, pub
        on_animation_cancel : TypeDefs::on_animation_cancel, pub on_animation_end :
        TypeDefs::on_animation_end, pub on_animation_iteration :
        TypeDefs::on_animation_iteration, pub on_animation_start :
        TypeDefs::on_animation_start, pub on_before_input : TypeDefs::on_before_input,
        pub on_input : TypeDefs::on_input, pub on_change : TypeDefs::on_change, pub
        on_got_pointer_capture : TypeDefs::on_got_pointer_capture, pub
        on_lost_pointer_capture : TypeDefs::on_lost_pointer_capture, pub
        on_pointer_cancel : TypeDefs::on_pointer_cancel, pub on_pointer_down :
        TypeDefs::on_pointer_down, pub on_pointer_enter : TypeDefs::on_pointer_enter, pub
        on_pointer_leave : TypeDefs::on_pointer_leave, pub on_pointer_move :
        TypeDefs::on_pointer_move, pub on_pointer_out : TypeDefs::on_pointer_out, pub
        on_pointer_over : TypeDefs::on_pointer_over, pub on_pointer_up :
        TypeDefs::on_pointer_up, pub on_transition_cancel :
        TypeDefs::on_transition_cancel, pub on_transition_end :
        TypeDefs::on_transition_end, pub on_transition_run : TypeDefs::on_transition_run,
        pub on_transition_start : TypeDefs::on_transition_start, pub on_drag :
        TypeDefs::on_drag, pub on_drag_end : TypeDefs::on_drag_end, pub on_drag_enter :
        TypeDefs::on_drag_enter, pub on_drag_leave : TypeDefs::on_drag_leave, pub
        on_drag_over : TypeDefs::on_drag_over, pub on_drag_start :
        TypeDefs::on_drag_start, pub on_drop : TypeDefs::on_drop, }
    }
    impl<TypeDefs: ?::core::marker::Sized + RenderStateTypes> RenderState<TypeDefs> {
        #[inline(always)]
        pub(crate) fn pin_project(
            self: ::core::pin::Pin<&mut Self>,
        ) -> RenderStateProj<'_, TypeDefs> {
            self.project()
        }
    }
    impl<TypeDefs: ?::core::marker::Sized + RenderStateTypes>
        crate::imports::frender_csr::props::IntrinsicComponentPollReactive
        for RenderState<TypeDefs>
    {
        #[inline]
        fn intrinsic_component_poll_reactive(
            self: ::core::pin::Pin<&mut Self>,
            cx: &mut ::core::task::Context<'_>,
        ) -> ::core::task::Poll<bool> {
            crate::imports::frender_csr::props::IntrinsicComponentPollReactive::intrinsic_component_poll_reactive(
                self.project().ElementProps,
                cx,
            )
        }
    }
}
mod builder_and_replacer {
    #[allow(unused_imports)]
    use super::super::*;
    impl<TypeDefs: super::Types + ?::core::marker::Sized> super::Building<TypeDefs> {
        ///See [`ElementProps::children`]
        #[inline(always)]
        pub fn children<V>(
            self,
            children: V,
        ) -> super::Building<super::overwrite::children<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps.children(children),
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        ///See [`ElementProps::class`]
        #[inline(always)]
        pub fn class<V: Todo<unimplemented![]>>(
            self,
            class: V,
        ) -> super::Building<super::overwrite::class<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps.class(class),
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        ///See [`ElementProps::id`]
        #[inline(always)]
        pub fn id<V: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>>(
            self,
            id: V,
        ) -> super::Building<super::overwrite::id<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps.id(id),
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        ///See [`ElementProps::part`]
        #[inline(always)]
        pub fn part<V: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>>(
            self,
            part: V,
        ) -> super::Building<super::overwrite::part<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps.part(part),
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        ///See [`ElementProps::on_cancel`]
        #[inline(always)]
        pub fn on_cancel<V>(
            self,
            on_cancel: V,
        ) -> super::Building<super::overwrite::on_cancel<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps.on_cancel(on_cancel),
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        ///See [`ElementProps::on_error`]
        #[inline(always)]
        pub fn on_error<V>(
            self,
            on_error: V,
        ) -> super::Building<super::overwrite::on_error<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps.on_error(on_error),
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        ///See [`ElementProps::on_scroll`]
        #[inline(always)]
        pub fn on_scroll<V>(
            self,
            on_scroll: V,
        ) -> super::Building<super::overwrite::on_scroll<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps.on_scroll(on_scroll),
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        ///See [`ElementProps::on_security_policy_violation`]
        #[inline(always)]
        pub fn on_security_policy_violation<V>(
            self,
            on_security_policy_violation: V,
        ) -> super::Building<super::overwrite::on_security_policy_violation<TypeDefs, V>> {
            super::Data {
                ElementProps: self
                    .ElementProps
                    .on_security_policy_violation(on_security_policy_violation),
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        ///See [`ElementProps::on_select`]
        #[inline(always)]
        pub fn on_select<V>(
            self,
            on_select: V,
        ) -> super::Building<super::overwrite::on_select<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps.on_select(on_select),
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        ///See [`ElementProps::on_wheel`]
        #[inline(always)]
        pub fn on_wheel<V>(
            self,
            on_wheel: V,
        ) -> super::Building<super::overwrite::on_wheel<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps.on_wheel(on_wheel),
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        ///See [`ElementProps::on_copy`]
        #[inline(always)]
        pub fn on_copy<V>(
            self,
            on_copy: V,
        ) -> super::Building<super::overwrite::on_copy<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps.on_copy(on_copy),
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        ///See [`ElementProps::on_cut`]
        #[inline(always)]
        pub fn on_cut<V>(
            self,
            on_cut: V,
        ) -> super::Building<super::overwrite::on_cut<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps.on_cut(on_cut),
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        ///See [`ElementProps::on_paste`]
        #[inline(always)]
        pub fn on_paste<V>(
            self,
            on_paste: V,
        ) -> super::Building<super::overwrite::on_paste<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps.on_paste(on_paste),
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        ///See [`ElementProps::on_composition_end`]
        #[inline(always)]
        pub fn on_composition_end<V>(
            self,
            on_composition_end: V,
        ) -> super::Building<super::overwrite::on_composition_end<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps.on_composition_end(on_composition_end),
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        ///See [`ElementProps::on_composition_start`]
        #[inline(always)]
        pub fn on_composition_start<V>(
            self,
            on_composition_start: V,
        ) -> super::Building<super::overwrite::on_composition_start<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps.on_composition_start(on_composition_start),
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        ///See [`ElementProps::on_composition_update`]
        #[inline(always)]
        pub fn on_composition_update<V>(
            self,
            on_composition_update: V,
        ) -> super::Building<super::overwrite::on_composition_update<TypeDefs, V>> {
            super::Data {
                ElementProps: self
                    .ElementProps
                    .on_composition_update(on_composition_update),
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        ///See [`ElementProps::on_blur`]
        #[inline(always)]
        pub fn on_blur<V>(
            self,
            on_blur: V,
        ) -> super::Building<super::overwrite::on_blur<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps.on_blur(on_blur),
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        ///See [`ElementProps::on_focus`]
        #[inline(always)]
        pub fn on_focus<V>(
            self,
            on_focus: V,
        ) -> super::Building<super::overwrite::on_focus<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps.on_focus(on_focus),
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        ///See [`ElementProps::on_focus_in`]
        #[inline(always)]
        pub fn on_focus_in<V>(
            self,
            on_focus_in: V,
        ) -> super::Building<super::overwrite::on_focus_in<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps.on_focus_in(on_focus_in),
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        ///See [`ElementProps::on_focus_out`]
        #[inline(always)]
        pub fn on_focus_out<V>(
            self,
            on_focus_out: V,
        ) -> super::Building<super::overwrite::on_focus_out<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps.on_focus_out(on_focus_out),
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        ///See [`ElementProps::on_fullscreen_change`]
        #[inline(always)]
        pub fn on_fullscreen_change<V>(
            self,
            on_fullscreen_change: V,
        ) -> super::Building<super::overwrite::on_fullscreen_change<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps.on_fullscreen_change(on_fullscreen_change),
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        ///See [`ElementProps::on_fullscreen_error`]
        #[inline(always)]
        pub fn on_fullscreen_error<V>(
            self,
            on_fullscreen_error: V,
        ) -> super::Building<super::overwrite::on_fullscreen_error<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps.on_fullscreen_error(on_fullscreen_error),
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        ///See [`ElementProps::on_key_down`]
        #[inline(always)]
        pub fn on_key_down<V>(
            self,
            on_key_down: V,
        ) -> super::Building<super::overwrite::on_key_down<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps.on_key_down(on_key_down),
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        ///See [`ElementProps::on_key_up`]
        #[inline(always)]
        pub fn on_key_up<V>(
            self,
            on_key_up: V,
        ) -> super::Building<super::overwrite::on_key_up<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps.on_key_up(on_key_up),
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        ///See [`ElementProps::on_aux_click`]
        #[inline(always)]
        pub fn on_aux_click<V>(
            self,
            on_aux_click: V,
        ) -> super::Building<super::overwrite::on_aux_click<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps.on_aux_click(on_aux_click),
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        ///See [`ElementProps::on_click`]
        #[inline(always)]
        pub fn on_click<V>(
            self,
            on_click: V,
        ) -> super::Building<super::overwrite::on_click<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps.on_click(on_click),
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        ///See [`ElementProps::on_context_menu`]
        #[inline(always)]
        pub fn on_context_menu<V>(
            self,
            on_context_menu: V,
        ) -> super::Building<super::overwrite::on_context_menu<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps.on_context_menu(on_context_menu),
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        ///See [`ElementProps::on_double_click`]
        #[inline(always)]
        pub fn on_double_click<V>(
            self,
            on_double_click: V,
        ) -> super::Building<super::overwrite::on_double_click<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps.on_double_click(on_double_click),
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        ///See [`ElementProps::on_mouse_down`]
        #[inline(always)]
        pub fn on_mouse_down<V>(
            self,
            on_mouse_down: V,
        ) -> super::Building<super::overwrite::on_mouse_down<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps.on_mouse_down(on_mouse_down),
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        ///See [`ElementProps::on_mouse_enter`]
        #[inline(always)]
        pub fn on_mouse_enter<V>(
            self,
            on_mouse_enter: V,
        ) -> super::Building<super::overwrite::on_mouse_enter<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps.on_mouse_enter(on_mouse_enter),
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        ///See [`ElementProps::on_mouse_leave`]
        #[inline(always)]
        pub fn on_mouse_leave<V>(
            self,
            on_mouse_leave: V,
        ) -> super::Building<super::overwrite::on_mouse_leave<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps.on_mouse_leave(on_mouse_leave),
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        ///See [`ElementProps::on_mouse_move`]
        #[inline(always)]
        pub fn on_mouse_move<V>(
            self,
            on_mouse_move: V,
        ) -> super::Building<super::overwrite::on_mouse_move<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps.on_mouse_move(on_mouse_move),
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        ///See [`ElementProps::on_mouse_out`]
        #[inline(always)]
        pub fn on_mouse_out<V>(
            self,
            on_mouse_out: V,
        ) -> super::Building<super::overwrite::on_mouse_out<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps.on_mouse_out(on_mouse_out),
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        ///See [`ElementProps::on_mouse_over`]
        #[inline(always)]
        pub fn on_mouse_over<V>(
            self,
            on_mouse_over: V,
        ) -> super::Building<super::overwrite::on_mouse_over<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps.on_mouse_over(on_mouse_over),
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        ///See [`ElementProps::on_mouse_up`]
        #[inline(always)]
        pub fn on_mouse_up<V>(
            self,
            on_mouse_up: V,
        ) -> super::Building<super::overwrite::on_mouse_up<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps.on_mouse_up(on_mouse_up),
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        ///See [`ElementProps::on_touch_cancel`]
        #[inline(always)]
        pub fn on_touch_cancel<V>(
            self,
            on_touch_cancel: V,
        ) -> super::Building<super::overwrite::on_touch_cancel<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps.on_touch_cancel(on_touch_cancel),
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        ///See [`ElementProps::on_touch_end`]
        #[inline(always)]
        pub fn on_touch_end<V>(
            self,
            on_touch_end: V,
        ) -> super::Building<super::overwrite::on_touch_end<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps.on_touch_end(on_touch_end),
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        ///See [`ElementProps::on_touch_move`]
        #[inline(always)]
        pub fn on_touch_move<V>(
            self,
            on_touch_move: V,
        ) -> super::Building<super::overwrite::on_touch_move<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps.on_touch_move(on_touch_move),
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        ///See [`ElementProps::on_touch_start`]
        #[inline(always)]
        pub fn on_touch_start<V>(
            self,
            on_touch_start: V,
        ) -> super::Building<super::overwrite::on_touch_start<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps.on_touch_start(on_touch_start),
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        #[inline(always)]
        pub fn access_key<
            V: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>,
        >(
            self,
            access_key: V,
        ) -> super::Building<super::overwrite::access_key<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        #[inline(always)]
        pub fn auto_capitalize<
            V: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>,
        >(
            self,
            auto_capitalize: V,
        ) -> super::Building<super::overwrite::auto_capitalize<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        #[inline(always)]
        pub fn auto_focus<
            V: crate::imports::frender_html::props::MaybeUpdateValueWithState<bool>,
        >(
            self,
            auto_focus: V,
        ) -> super::Building<super::overwrite::auto_focus<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        #[inline(always)]
        pub fn content_editable<V: Todo<unimplemented![]>>(
            self,
            content_editable: V,
        ) -> super::Building<super::overwrite::content_editable<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        #[deprecated = "See https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/contextMenu"]
        #[inline(always)]
        pub fn context_menu<
            V: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>,
        >(
            self,
            context_menu: V,
        ) -> super::Building<super::overwrite::context_menu<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        #[inline(always)]
        pub fn dir<V: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>>(
            self,
            dir: V,
        ) -> super::Building<super::overwrite::dir<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        #[inline(always)]
        pub fn draggable<
            V: crate::imports::frender_html::props::MaybeUpdateValueWithState<bool>,
        >(
            self,
            draggable: V,
        ) -> super::Building<super::overwrite::draggable<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        #[inline(always)]
        pub fn enter_key_hint<
            V: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>,
        >(
            self,
            enter_key_hint: V,
        ) -> super::Building<super::overwrite::enter_key_hint<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        #[inline(always)]
        pub fn hidden<V: crate::imports::frender_html::props::MaybeUpdateValueWithState<bool>>(
            self,
            hidden: V,
        ) -> super::Building<super::overwrite::hidden<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        #[inline(always)]
        pub fn inert<V: crate::imports::frender_html::props::MaybeUpdateValueWithState<bool>>(
            self,
            inert: V,
        ) -> super::Building<super::overwrite::inert<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        #[inline(always)]
        pub fn input_mode<
            V: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>,
        >(
            self,
            input_mode: V,
        ) -> super::Building<super::overwrite::input_mode<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        #[inline(always)]
        pub fn is<V: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>>(
            self,
            is: V,
        ) -> super::Building<super::overwrite::is<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        #[inline(always)]
        pub fn item_id<V: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>>(
            self,
            item_id: V,
        ) -> super::Building<super::overwrite::item_id<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        #[inline(always)]
        pub fn item_prop<V: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>>(
            self,
            item_prop: V,
        ) -> super::Building<super::overwrite::item_prop<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        #[inline(always)]
        pub fn item_ref<V: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>>(
            self,
            item_ref: V,
        ) -> super::Building<super::overwrite::item_ref<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        #[inline(always)]
        pub fn item_scope<
            V: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>,
        >(
            self,
            item_scope: V,
        ) -> super::Building<super::overwrite::item_scope<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        #[inline(always)]
        pub fn item_type<V: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>>(
            self,
            item_type: V,
        ) -> super::Building<super::overwrite::item_type<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        #[inline(always)]
        pub fn lang<V: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>>(
            self,
            lang: V,
        ) -> super::Building<super::overwrite::lang<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        #[inline(always)]
        pub fn nonce<V: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>>(
            self,
            nonce: V,
        ) -> super::Building<super::overwrite::nonce<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        #[inline(always)]
        pub fn role<V: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>>(
            self,
            role: V,
        ) -> super::Building<super::overwrite::role<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        #[inline(always)]
        pub fn slot<V: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>>(
            self,
            slot: V,
        ) -> super::Building<super::overwrite::slot<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        #[inline(always)]
        pub fn spellcheck<
            V: crate::imports::frender_html::props::MaybeUpdateValueWithState<bool>,
        >(
            self,
            spellcheck: V,
        ) -> super::Building<super::overwrite::spellcheck<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        #[inline(always)]
        pub fn style<V: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>>(
            self,
            style: V,
        ) -> super::Building<super::overwrite::style<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        #[inline(always)]
        pub fn tab_index<V: crate::imports::frender_html::props::MaybeUpdateValueWithState<i32>>(
            self,
            tab_index: V,
        ) -> super::Building<super::overwrite::tab_index<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        #[inline(always)]
        pub fn title<V: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>>(
            self,
            title: V,
        ) -> super::Building<super::overwrite::title<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        #[inline(always)]
        pub fn translate<V: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>>(
            self,
            translate: V,
        ) -> super::Building<super::overwrite::translate<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        #[inline(always)]
        pub fn virtual_keyboard_policy<
            V: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>,
        >(
            self,
            virtual_keyboard_policy: V,
        ) -> super::Building<super::overwrite::virtual_keyboard_policy<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        /// Event [`invalid`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/invalid_event)
        ///
        /// Fired when an element does not satisfy its constraints during constraint validation.
        #[inline(always)]
        pub fn on_invalid<V>(
            self,
            on_invalid: V,
        ) -> super::Building<super::overwrite::on_invalid<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        /// Event [`animationcancel`](https://developer.mozilla.org/en-US/docs/Web/API/Element/animationcancel_event)
        ///
        /// Fired when an animation unexpectedly aborts.
        #[inline(always)]
        pub fn on_animation_cancel<V>(
            self,
            on_animation_cancel: V,
        ) -> super::Building<super::overwrite::on_animation_cancel<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        /// Event [`animationend`](https://developer.mozilla.org/en-US/docs/Web/API/Element/animationend_event)
        ///
        /// Fired when an animation has completed normally.
        #[inline(always)]
        pub fn on_animation_end<V>(
            self,
            on_animation_end: V,
        ) -> super::Building<super::overwrite::on_animation_end<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        /// Event [`animationiteration`](https://developer.mozilla.org/en-US/docs/Web/API/Element/animationiteration_event)
        ///
        /// Fired when an animation iteration has completed.
        #[inline(always)]
        pub fn on_animation_iteration<V>(
            self,
            on_animation_iteration: V,
        ) -> super::Building<super::overwrite::on_animation_iteration<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        /// Event [`animationstart`](https://developer.mozilla.org/en-US/docs/Web/API/Element/animationstart_event)
        ///
        /// Fired when an animation starts.
        #[inline(always)]
        pub fn on_animation_start<V>(
            self,
            on_animation_start: V,
        ) -> super::Building<super::overwrite::on_animation_start<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        /// Event [`beforeinput`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/beforeinput_event)
        ///
        /// Fired when the value of an [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input), [`<select>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select), or [`<textarea>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea) element is about to be modified.
        #[inline(always)]
        pub fn on_before_input<V>(
            self,
            on_before_input: V,
        ) -> super::Building<super::overwrite::on_before_input<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        /// Event [`input`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event)
        ///
        /// Fired when the `value` of an [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input), [`<select>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select), or [`<textarea>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea) element has been changed.
        #[inline(always)]
        pub fn on_input<V>(
            self,
            on_input: V,
        ) -> super::Building<super::overwrite::on_input<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        /// Event [`change`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event)
        ///
        /// Fired when the `value` of an [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input), [`<select>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select), or [`<textarea>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea) element has been changed and committed by the user. Unlike the [`input`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event) event, the `change` event is not necessarily fired for each alteration to an element's `value`.
        #[inline(always)]
        pub fn on_change<V>(
            self,
            on_change: V,
        ) -> super::Building<super::overwrite::on_change<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        /// Event [`gotpointercapture`](https://developer.mozilla.org/en-US/docs/Web/API/Element/gotpointercapture_event)
        ///
        /// Fired when an element captures a pointer using [`setPointerCapture()`](https://developer.mozilla.org/en-US/docs/Web/API/Element/setPointerCapture).
        #[inline(always)]
        pub fn on_got_pointer_capture<V>(
            self,
            on_got_pointer_capture: V,
        ) -> super::Building<super::overwrite::on_got_pointer_capture<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        /// Event [`lostpointercapture`](https://developer.mozilla.org/en-US/docs/Web/API/Element/lostpointercapture_event)
        ///
        /// Fired when a [captured pointer](https://developer.mozilla.org/en-US/docs/Web/API/Pointer_events#pointer_capture) is released.
        #[inline(always)]
        pub fn on_lost_pointer_capture<V>(
            self,
            on_lost_pointer_capture: V,
        ) -> super::Building<super::overwrite::on_lost_pointer_capture<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        /// Event [`pointercancel`](https://developer.mozilla.org/en-US/docs/Web/API/Element/pointercancel_event)
        ///
        /// Fired when a pointer event is canceled.
        #[inline(always)]
        pub fn on_pointer_cancel<V>(
            self,
            on_pointer_cancel: V,
        ) -> super::Building<super::overwrite::on_pointer_cancel<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        /// Event [`pointerdown`](https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerdown_event)
        ///
        /// Fired when a pointer becomes active.
        #[inline(always)]
        pub fn on_pointer_down<V>(
            self,
            on_pointer_down: V,
        ) -> super::Building<super::overwrite::on_pointer_down<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        /// Event [`pointerenter`](https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerenter_event)
        ///
        /// Fired when a pointer is moved into the hit test boundaries of an element or one of its descendants.
        #[inline(always)]
        pub fn on_pointer_enter<V>(
            self,
            on_pointer_enter: V,
        ) -> super::Building<super::overwrite::on_pointer_enter<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        /// Event [`pointerleave`](https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerleave_event)
        ///
        /// Fired when a pointer is moved out of the hit test boundaries of an element.
        #[inline(always)]
        pub fn on_pointer_leave<V>(
            self,
            on_pointer_leave: V,
        ) -> super::Building<super::overwrite::on_pointer_leave<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        /// Event [`pointermove`](https://developer.mozilla.org/en-US/docs/Web/API/Element/pointermove_event)
        ///
        /// Fired when a pointer changes coordinates.
        #[inline(always)]
        pub fn on_pointer_move<V>(
            self,
            on_pointer_move: V,
        ) -> super::Building<super::overwrite::on_pointer_move<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        /// Event [`pointerout`](https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerout_event)
        ///
        /// Fired when a pointer is moved out of the *hit test* boundaries of an element (among other reasons).
        #[inline(always)]
        pub fn on_pointer_out<V>(
            self,
            on_pointer_out: V,
        ) -> super::Building<super::overwrite::on_pointer_out<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        /// Event [`pointerover`](https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerover_event)
        ///
        /// Fired when a pointer is moved into an element's hit test boundaries.
        #[inline(always)]
        pub fn on_pointer_over<V>(
            self,
            on_pointer_over: V,
        ) -> super::Building<super::overwrite::on_pointer_over<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        /// Event [`pointerup`](https://developer.mozilla.org/en-US/docs/Web/API/Element/pointerup_event)
        ///
        /// Fired when a pointer is no longer active.
        #[inline(always)]
        pub fn on_pointer_up<V>(
            self,
            on_pointer_up: V,
        ) -> super::Building<super::overwrite::on_pointer_up<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        /// Event [`transitioncancel`](https://developer.mozilla.org/en-US/docs/Web/API/Element/transitioncancel_event)
        ///
        /// Fired when a [CSS transition](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions) is canceled.
        #[inline(always)]
        pub fn on_transition_cancel<V>(
            self,
            on_transition_cancel: V,
        ) -> super::Building<super::overwrite::on_transition_cancel<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        /// Event [`transitionend`](https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionend_event)
        ///
        /// Fired when a [CSS transition](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions) has completed.
        #[inline(always)]
        pub fn on_transition_end<V>(
            self,
            on_transition_end: V,
        ) -> super::Building<super::overwrite::on_transition_end<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        /// Event [`transitionrun`](https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionrun_event)
        ///
        /// Fired when a [CSS transition](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions) is first created.
        #[inline(always)]
        pub fn on_transition_run<V>(
            self,
            on_transition_run: V,
        ) -> super::Building<super::overwrite::on_transition_run<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        /// Event [`transitionstart`](https://developer.mozilla.org/en-US/docs/Web/API/Element/transitionstart_event)
        ///
        /// Fired when a [CSS transition](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions) has actually started.
        #[inline(always)]
        pub fn on_transition_start<V>(
            self,
            on_transition_start: V,
        ) -> super::Building<super::overwrite::on_transition_start<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        /// Event [`drag`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event)
        ///
        /// This event is fired when an element or text selection is being dragged.
        #[inline(always)]
        pub fn on_drag<V>(
            self,
            on_drag: V,
        ) -> super::Building<super::overwrite::on_drag<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        /// Event [`dragend`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event)
        ///
        /// This event is fired when a drag operation is being ended (by releasing a mouse button or hitting the escape key).
        #[inline(always)]
        pub fn on_drag_end<V>(
            self,
            on_drag_end: V,
        ) -> super::Building<super::overwrite::on_drag_end<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        /// Event [`dragenter`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event)
        ///
        /// This event is fired when a dragged element or text selection enters a valid drop target.
        #[inline(always)]
        pub fn on_drag_enter<V>(
            self,
            on_drag_enter: V,
        ) -> super::Building<super::overwrite::on_drag_enter<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        /// Event [`dragleave`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event)
        ///
        /// This event is fired when a dragged element or text selection leaves a valid drop target.
        #[inline(always)]
        pub fn on_drag_leave<V>(
            self,
            on_drag_leave: V,
        ) -> super::Building<super::overwrite::on_drag_leave<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        /// Event [`dragover`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event)
        ///
        /// This event is fired continuously when an element or text selection is being dragged and the mouse pointer is over a valid drop target (every 50 ms WHEN mouse is not moving ELSE much faster between 5 ms (slow movement) and 1ms (fast movement) approximately. This firing pattern is different than [`mouseover`](https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event) ).
        #[inline(always)]
        pub fn on_drag_over<V>(
            self,
            on_drag_over: V,
        ) -> super::Building<super::overwrite::on_drag_over<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop: self.on_drop,
            }
        }
        /// Event [`dragstart`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event)
        ///
        /// This event is fired when the user starts dragging an element or text selection.
        #[inline(always)]
        pub fn on_drag_start<V>(
            self,
            on_drag_start: V,
        ) -> super::Building<super::overwrite::on_drag_start<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start,
                on_drop: self.on_drop,
            }
        }
        /// Event [`drop`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event)
        ///
        /// This event is fired when an element or text selection is dropped on a valid drop target.
        #[inline(always)]
        pub fn on_drop<V>(
            self,
            on_drop: V,
        ) -> super::Building<super::overwrite::on_drop<TypeDefs, V>> {
            super::Data {
                ElementProps: self.ElementProps,
                access_key: self.access_key,
                auto_capitalize: self.auto_capitalize,
                auto_focus: self.auto_focus,
                content_editable: self.content_editable,
                context_menu: self.context_menu,
                dir: self.dir,
                draggable: self.draggable,
                enter_key_hint: self.enter_key_hint,
                hidden: self.hidden,
                inert: self.inert,
                input_mode: self.input_mode,
                is: self.is,
                item_id: self.item_id,
                item_prop: self.item_prop,
                item_ref: self.item_ref,
                item_scope: self.item_scope,
                item_type: self.item_type,
                lang: self.lang,
                nonce: self.nonce,
                role: self.role,
                slot: self.slot,
                spellcheck: self.spellcheck,
                style: self.style,
                tab_index: self.tab_index,
                title: self.title,
                translate: self.translate,
                virtual_keyboard_policy: self.virtual_keyboard_policy,
                on_invalid: self.on_invalid,
                on_animation_cancel: self.on_animation_cancel,
                on_animation_end: self.on_animation_end,
                on_animation_iteration: self.on_animation_iteration,
                on_animation_start: self.on_animation_start,
                on_before_input: self.on_before_input,
                on_input: self.on_input,
                on_change: self.on_change,
                on_got_pointer_capture: self.on_got_pointer_capture,
                on_lost_pointer_capture: self.on_lost_pointer_capture,
                on_pointer_cancel: self.on_pointer_cancel,
                on_pointer_down: self.on_pointer_down,
                on_pointer_enter: self.on_pointer_enter,
                on_pointer_leave: self.on_pointer_leave,
                on_pointer_move: self.on_pointer_move,
                on_pointer_out: self.on_pointer_out,
                on_pointer_over: self.on_pointer_over,
                on_pointer_up: self.on_pointer_up,
                on_transition_cancel: self.on_transition_cancel,
                on_transition_end: self.on_transition_end,
                on_transition_run: self.on_transition_run,
                on_transition_start: self.on_transition_start,
                on_drag: self.on_drag,
                on_drag_end: self.on_drag_end,
                on_drag_enter: self.on_drag_enter,
                on_drag_leave: self.on_drag_leave,
                on_drag_over: self.on_drag_over,
                on_drag_start: self.on_drag_start,
                on_drop,
            }
        }
    }
}
#[cfg(feature = "csr")]
mod impl_update_element {
    #[allow(unused_imports)]
    use super::super::*;
    impl<TypeDefs: ?::core::marker::Sized + super::Types>
        crate::imports::frender_csr::props::UpdateElement<web_sys::HtmlElement>
        for super::Data<TypeDefs>
    where
        ElementProps::Data<TypeDefs::ElementProps>:
            crate::imports::frender_csr::props::UpdateElement<web_sys::Element>,
        unimplemented!(): __,
        TypeDefs::on_invalid:
            crate::imports::frender_html::props::UpdateDomEventListener<events::Event>,
        TypeDefs::on_animation_cancel:
            crate::imports::frender_html::props::UpdateDomEventListener<events::AnimationEvent>,
        TypeDefs::on_animation_end:
            crate::imports::frender_html::props::UpdateDomEventListener<events::AnimationEvent>,
        TypeDefs::on_animation_iteration:
            crate::imports::frender_html::props::UpdateDomEventListener<events::AnimationEvent>,
        TypeDefs::on_animation_start:
            crate::imports::frender_html::props::UpdateDomEventListener<events::AnimationEvent>,
        TypeDefs::on_before_input:
            crate::imports::frender_html::props::UpdateDomEventListener<events::InputEvent>,
        TypeDefs::on_input:
            crate::imports::frender_html::props::UpdateDomEventListener<events::Event>,
        TypeDefs::on_change:
            crate::imports::frender_html::props::UpdateDomEventListener<events::Event>,
        TypeDefs::on_got_pointer_capture:
            crate::imports::frender_html::props::UpdateDomEventListener<events::PointerEvent>,
        TypeDefs::on_lost_pointer_capture:
            crate::imports::frender_html::props::UpdateDomEventListener<events::PointerEvent>,
        TypeDefs::on_pointer_cancel:
            crate::imports::frender_html::props::UpdateDomEventListener<events::PointerEvent>,
        TypeDefs::on_pointer_down:
            crate::imports::frender_html::props::UpdateDomEventListener<events::PointerEvent>,
        TypeDefs::on_pointer_enter:
            crate::imports::frender_html::props::UpdateDomEventListener<events::PointerEvent>,
        TypeDefs::on_pointer_leave:
            crate::imports::frender_html::props::UpdateDomEventListener<events::PointerEvent>,
        TypeDefs::on_pointer_move:
            crate::imports::frender_html::props::UpdateDomEventListener<events::PointerEvent>,
        TypeDefs::on_pointer_out:
            crate::imports::frender_html::props::UpdateDomEventListener<events::PointerEvent>,
        TypeDefs::on_pointer_over:
            crate::imports::frender_html::props::UpdateDomEventListener<events::PointerEvent>,
        TypeDefs::on_pointer_up:
            crate::imports::frender_html::props::UpdateDomEventListener<events::PointerEvent>,
        TypeDefs::on_transition_cancel:
            crate::imports::frender_html::props::UpdateDomEventListener<events::TransitionEvent>,
        TypeDefs::on_transition_end:
            crate::imports::frender_html::props::UpdateDomEventListener<events::TransitionEvent>,
        TypeDefs::on_transition_run:
            crate::imports::frender_html::props::UpdateDomEventListener<events::TransitionEvent>,
        TypeDefs::on_transition_start:
            crate::imports::frender_html::props::UpdateDomEventListener<events::TransitionEvent>,
        TypeDefs::on_drag:
            crate::imports::frender_html::props::UpdateDomEventListener<events::Event>,
        TypeDefs::on_drag_end:
            crate::imports::frender_html::props::UpdateDomEventListener<events::Event>,
        TypeDefs::on_drag_enter:
            crate::imports::frender_html::props::UpdateDomEventListener<events::Event>,
        TypeDefs::on_drag_leave:
            crate::imports::frender_html::props::UpdateDomEventListener<events::Event>,
        TypeDefs::on_drag_over:
            crate::imports::frender_html::props::UpdateDomEventListener<events::Event>,
        TypeDefs::on_drag_start:
            crate::imports::frender_html::props::UpdateDomEventListener<events::Event>,
        TypeDefs::on_drop:
            crate::imports::frender_html::props::UpdateDomEventListener<events::Event>,
    {
        type State = super::render_state::RenderState<
            dyn super::render_state::RenderStateTypes<
                ElementProps = <ElementProps::Data<
                    TypeDefs::ElementProps,
                > as crate::imports::frender_csr::props::UpdateElement<
                    web_sys::Element,
                >>::State,
                access_key = <TypeDefs::access_key as ::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::State,
                auto_capitalize = <TypeDefs::auto_capitalize as ::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::State,
                auto_focus = <TypeDefs::auto_focus as ::frender_html::props::MaybeUpdateValueWithState<
                    bool,
                >>::State,
                context_menu = <TypeDefs::context_menu as ::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::State,
                dir = <TypeDefs::dir as ::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::State,
                draggable = <TypeDefs::draggable as ::frender_html::props::MaybeUpdateValueWithState<
                    bool,
                >>::State,
                enter_key_hint = <TypeDefs::enter_key_hint as ::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::State,
                hidden = <TypeDefs::hidden as ::frender_html::props::MaybeUpdateValueWithState<
                    bool,
                >>::State,
                inert = <TypeDefs::inert as ::frender_html::props::MaybeUpdateValueWithState<
                    bool,
                >>::State,
                input_mode = <TypeDefs::input_mode as ::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::State,
                is = <TypeDefs::is as ::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::State,
                item_id = <TypeDefs::item_id as ::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::State,
                item_prop = <TypeDefs::item_prop as ::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::State,
                item_ref = <TypeDefs::item_ref as ::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::State,
                item_scope = <TypeDefs::item_scope as ::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::State,
                item_type = <TypeDefs::item_type as ::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::State,
                lang = <TypeDefs::lang as ::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::State,
                nonce = <TypeDefs::nonce as ::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::State,
                role = <TypeDefs::role as ::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::State,
                slot = <TypeDefs::slot as ::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::State,
                spellcheck = <TypeDefs::spellcheck as ::frender_html::props::MaybeUpdateValueWithState<
                    bool,
                >>::State,
                style = <TypeDefs::style as ::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::State,
                tab_index = <TypeDefs::tab_index as ::frender_html::props::MaybeUpdateValueWithState<
                    i32,
                >>::State,
                title = <TypeDefs::title as ::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::State,
                translate = <TypeDefs::translate as ::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::State,
                virtual_keyboard_policy = <TypeDefs::virtual_keyboard_policy as ::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::State,
                on_invalid = <TypeDefs::on_invalid as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::Event,
                >>::State,
                on_animation_cancel = <TypeDefs::on_animation_cancel as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::AnimationEvent,
                >>::State,
                on_animation_end = <TypeDefs::on_animation_end as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::AnimationEvent,
                >>::State,
                on_animation_iteration = <TypeDefs::on_animation_iteration as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::AnimationEvent,
                >>::State,
                on_animation_start = <TypeDefs::on_animation_start as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::AnimationEvent,
                >>::State,
                on_before_input = <TypeDefs::on_before_input as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::InputEvent,
                >>::State,
                on_input = <TypeDefs::on_input as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::Event,
                >>::State,
                on_change = <TypeDefs::on_change as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::Event,
                >>::State,
                on_got_pointer_capture = <TypeDefs::on_got_pointer_capture as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::PointerEvent,
                >>::State,
                on_lost_pointer_capture = <TypeDefs::on_lost_pointer_capture as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::PointerEvent,
                >>::State,
                on_pointer_cancel = <TypeDefs::on_pointer_cancel as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::PointerEvent,
                >>::State,
                on_pointer_down = <TypeDefs::on_pointer_down as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::PointerEvent,
                >>::State,
                on_pointer_enter = <TypeDefs::on_pointer_enter as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::PointerEvent,
                >>::State,
                on_pointer_leave = <TypeDefs::on_pointer_leave as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::PointerEvent,
                >>::State,
                on_pointer_move = <TypeDefs::on_pointer_move as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::PointerEvent,
                >>::State,
                on_pointer_out = <TypeDefs::on_pointer_out as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::PointerEvent,
                >>::State,
                on_pointer_over = <TypeDefs::on_pointer_over as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::PointerEvent,
                >>::State,
                on_pointer_up = <TypeDefs::on_pointer_up as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::PointerEvent,
                >>::State,
                on_transition_cancel = <TypeDefs::on_transition_cancel as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::TransitionEvent,
                >>::State,
                on_transition_end = <TypeDefs::on_transition_end as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::TransitionEvent,
                >>::State,
                on_transition_run = <TypeDefs::on_transition_run as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::TransitionEvent,
                >>::State,
                on_transition_start = <TypeDefs::on_transition_start as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::TransitionEvent,
                >>::State,
                on_drag = <TypeDefs::on_drag as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::Event,
                >>::State,
                on_drag_end = <TypeDefs::on_drag_end as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::Event,
                >>::State,
                on_drag_enter = <TypeDefs::on_drag_enter as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::Event,
                >>::State,
                on_drag_leave = <TypeDefs::on_drag_leave as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::Event,
                >>::State,
                on_drag_over = <TypeDefs::on_drag_over as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::Event,
                >>::State,
                on_drag_start = <TypeDefs::on_drag_start as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::Event,
                >>::State,
                on_drop = <TypeDefs::on_drop as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::Event,
                >>::State,
            >,
        >;
        fn initialize_state(
            this: Self,
            element: &web_sys::HtmlElement,
            children_ctx: &mut ::frender_csr::Dom,
        ) -> Self::State {
            let dom_element: &::web_sys::Element = element.as_ref();
            unimplemented!();
            super::render_state::RenderState {
                ElementProps: <ElementProps::Data<
                    TypeDefs::ElementProps,
                > as crate::imports::frender_csr::props::UpdateElement<
                    web_sys::Element,
                >>::initialize_state(this.ElementProps, element, children_ctx),
                access_key: <TypeDefs::access_key as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::initialize_state_and_update(
                    this.access_key,
                    |v| dom_element.set_access_key(v),
                    || dom_element.remove_attribute("accesskey").unwrap(),
                ),
                auto_capitalize: <TypeDefs::auto_capitalize as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::initialize_state_and_update(
                    this.auto_capitalize,
                    |v| crate::imports::frender_csr::props::UpdateElementAttribute::update_element_attribute(
                        v,
                        dom_element,
                        "autocapitalize",
                    ),
                    || dom_element.remove_attribute("autocapitalize").unwrap(),
                ),
                auto_focus: <TypeDefs::auto_focus as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                    bool,
                >>::initialize_state_and_update(
                    this.auto_focus,
                    |v| crate::imports::frender_csr::props::UpdateElementAttribute::update_element_attribute(
                        *v,
                        dom_element,
                        "autofocus",
                    ),
                    || dom_element.remove_attribute("autofocus").unwrap(),
                ),
                context_menu: <TypeDefs::context_menu as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::initialize_state_and_update(
                    this.context_menu,
                    |v| crate::imports::frender_csr::props::UpdateElementAttribute::update_element_attribute(
                        v,
                        dom_element,
                        "contextmenu",
                    ),
                    || dom_element.remove_attribute("contextmenu").unwrap(),
                ),
                dir: <TypeDefs::dir as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::initialize_state_and_update(
                    this.dir,
                    |v| dom_element.set_dir(v),
                    || dom_element.remove_attribute("dir").unwrap(),
                ),
                draggable: <TypeDefs::draggable as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                    bool,
                >>::initialize_state_and_update(
                    this.draggable,
                    |v| dom_element.set_draggable(*v),
                    || dom_element.remove_attribute("draggable").unwrap(),
                ),
                enter_key_hint: <TypeDefs::enter_key_hint as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::initialize_state_and_update(
                    this.enter_key_hint,
                    |v| crate::imports::frender_csr::props::UpdateElementAttribute::update_element_attribute(
                        v,
                        dom_element,
                        "enterkeyhint",
                    ),
                    || dom_element.remove_attribute("enterkeyhint").unwrap(),
                ),
                hidden: <TypeDefs::hidden as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                    bool,
                >>::initialize_state_and_update(
                    this.hidden,
                    |v| dom_element.set_hidden(*v),
                    || dom_element.remove_attribute("hidden").unwrap(),
                ),
                inert: <TypeDefs::inert as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                    bool,
                >>::initialize_state_and_update(
                    this.inert,
                    |v| crate::imports::frender_csr::props::UpdateElementAttribute::update_element_attribute(
                        *v,
                        dom_element,
                        "inert",
                    ),
                    || dom_element.remove_attribute("inert").unwrap(),
                ),
                input_mode: <TypeDefs::input_mode as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::initialize_state_and_update(
                    this.input_mode,
                    |v| crate::imports::frender_csr::props::UpdateElementAttribute::update_element_attribute(
                        v,
                        dom_element,
                        "inputmode",
                    ),
                    || dom_element.remove_attribute("inputmode").unwrap(),
                ),
                is: <TypeDefs::is as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::initialize_state_and_update(
                    this.is,
                    |v| crate::imports::frender_csr::props::UpdateElementAttribute::update_element_attribute(
                        v,
                        dom_element,
                        "is",
                    ),
                    || dom_element.remove_attribute("is").unwrap(),
                ),
                item_id: <TypeDefs::item_id as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::initialize_state_and_update(
                    this.item_id,
                    |v| crate::imports::frender_csr::props::UpdateElementAttribute::update_element_attribute(
                        v,
                        dom_element,
                        "itemid",
                    ),
                    || dom_element.remove_attribute("itemid").unwrap(),
                ),
                item_prop: <TypeDefs::item_prop as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::initialize_state_and_update(
                    this.item_prop,
                    |v| crate::imports::frender_csr::props::UpdateElementAttribute::update_element_attribute(
                        v,
                        dom_element,
                        "itemprop",
                    ),
                    || dom_element.remove_attribute("itemprop").unwrap(),
                ),
                item_ref: <TypeDefs::item_ref as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::initialize_state_and_update(
                    this.item_ref,
                    |v| crate::imports::frender_csr::props::UpdateElementAttribute::update_element_attribute(
                        v,
                        dom_element,
                        "itemref",
                    ),
                    || dom_element.remove_attribute("itemref").unwrap(),
                ),
                item_scope: <TypeDefs::item_scope as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::initialize_state_and_update(
                    this.item_scope,
                    |v| crate::imports::frender_csr::props::UpdateElementAttribute::update_element_attribute(
                        v,
                        dom_element,
                        "itemscope",
                    ),
                    || dom_element.remove_attribute("itemscope").unwrap(),
                ),
                item_type: <TypeDefs::item_type as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::initialize_state_and_update(
                    this.item_type,
                    |v| crate::imports::frender_csr::props::UpdateElementAttribute::update_element_attribute(
                        v,
                        dom_element,
                        "itemtype",
                    ),
                    || dom_element.remove_attribute("itemtype").unwrap(),
                ),
                lang: <TypeDefs::lang as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::initialize_state_and_update(
                    this.lang,
                    |v| dom_element.set_lang(v),
                    || dom_element.remove_attribute("lang").unwrap(),
                ),
                nonce: <TypeDefs::nonce as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::initialize_state_and_update(
                    this.nonce,
                    |v| crate::imports::frender_csr::props::UpdateElementAttribute::update_element_attribute(
                        v,
                        dom_element,
                        "nonce",
                    ),
                    || dom_element.remove_attribute("nonce").unwrap(),
                ),
                role: <TypeDefs::role as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::initialize_state_and_update(
                    this.role,
                    |v| crate::imports::frender_csr::props::UpdateElementAttribute::update_element_attribute(
                        v,
                        dom_element,
                        "role",
                    ),
                    || dom_element.remove_attribute("role").unwrap(),
                ),
                slot: <TypeDefs::slot as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::initialize_state_and_update(
                    this.slot,
                    |v| crate::imports::frender_csr::props::UpdateElementAttribute::update_element_attribute(
                        v,
                        dom_element,
                        "slot",
                    ),
                    || dom_element.remove_attribute("slot").unwrap(),
                ),
                spellcheck: <TypeDefs::spellcheck as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                    bool,
                >>::initialize_state_and_update(
                    this.spellcheck,
                    |v| dom_element.set_spellcheck(*v),
                    || dom_element.remove_attribute("spellcheck").unwrap(),
                ),
                style: <TypeDefs::style as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::initialize_state_and_update(
                    this.style,
                    |v| crate::imports::frender_csr::props::UpdateElementAttribute::update_element_attribute(
                        v,
                        dom_element,
                        "style",
                    ),
                    || dom_element.remove_attribute("style").unwrap(),
                ),
                tab_index: <TypeDefs::tab_index as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                    i32,
                >>::initialize_state_and_update(
                    this.tab_index,
                    |v| dom_element.set_tab_index(*v),
                    || dom_element.remove_attribute("tabindex").unwrap(),
                ),
                title: <TypeDefs::title as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::initialize_state_and_update(
                    this.title,
                    |v| dom_element.set_title(v),
                    || dom_element.remove_attribute("title").unwrap(),
                ),
                translate: <TypeDefs::translate as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::initialize_state_and_update(
                    this.translate,
                    |v| crate::imports::frender_csr::props::UpdateElementAttribute::update_element_attribute(
                        v,
                        dom_element,
                        "translate",
                    ),
                    || dom_element.remove_attribute("translate").unwrap(),
                ),
                virtual_keyboard_policy: <TypeDefs::virtual_keyboard_policy as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::initialize_state_and_update(
                    this.virtual_keyboard_policy,
                    |v| crate::imports::frender_csr::props::UpdateElementAttribute::update_element_attribute(
                        v,
                        dom_element,
                        "virtualkeyboardpolicy",
                    ),
                    || dom_element.remove_attribute("virtualkeyboardpolicy").unwrap(),
                ),
                on_invalid: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::Event,
                >::initialize_dom_event_listener_state(this.on_invalid, element),
                on_animation_cancel: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::AnimationEvent,
                >::initialize_dom_event_listener_state(
                    this.on_animation_cancel,
                    element,
                ),
                on_animation_end: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::AnimationEvent,
                >::initialize_dom_event_listener_state(this.on_animation_end, element),
                on_animation_iteration: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::AnimationEvent,
                >::initialize_dom_event_listener_state(
                    this.on_animation_iteration,
                    element,
                ),
                on_animation_start: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::AnimationEvent,
                >::initialize_dom_event_listener_state(this.on_animation_start, element),
                on_before_input: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::InputEvent,
                >::initialize_dom_event_listener_state(this.on_before_input, element),
                on_input: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::Event,
                >::initialize_dom_event_listener_state(this.on_input, element),
                on_change: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::Event,
                >::initialize_dom_event_listener_state(this.on_change, element),
                on_got_pointer_capture: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::PointerEvent,
                >::initialize_dom_event_listener_state(
                    this.on_got_pointer_capture,
                    element,
                ),
                on_lost_pointer_capture: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::PointerEvent,
                >::initialize_dom_event_listener_state(
                    this.on_lost_pointer_capture,
                    element,
                ),
                on_pointer_cancel: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::PointerEvent,
                >::initialize_dom_event_listener_state(this.on_pointer_cancel, element),
                on_pointer_down: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::PointerEvent,
                >::initialize_dom_event_listener_state(this.on_pointer_down, element),
                on_pointer_enter: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::PointerEvent,
                >::initialize_dom_event_listener_state(this.on_pointer_enter, element),
                on_pointer_leave: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::PointerEvent,
                >::initialize_dom_event_listener_state(this.on_pointer_leave, element),
                on_pointer_move: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::PointerEvent,
                >::initialize_dom_event_listener_state(this.on_pointer_move, element),
                on_pointer_out: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::PointerEvent,
                >::initialize_dom_event_listener_state(this.on_pointer_out, element),
                on_pointer_over: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::PointerEvent,
                >::initialize_dom_event_listener_state(this.on_pointer_over, element),
                on_pointer_up: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::PointerEvent,
                >::initialize_dom_event_listener_state(this.on_pointer_up, element),
                on_transition_cancel: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::TransitionEvent,
                >::initialize_dom_event_listener_state(
                    this.on_transition_cancel,
                    element,
                ),
                on_transition_end: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::TransitionEvent,
                >::initialize_dom_event_listener_state(this.on_transition_end, element),
                on_transition_run: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::TransitionEvent,
                >::initialize_dom_event_listener_state(this.on_transition_run, element),
                on_transition_start: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::TransitionEvent,
                >::initialize_dom_event_listener_state(
                    this.on_transition_start,
                    element,
                ),
                on_drag: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::Event,
                >::initialize_dom_event_listener_state(this.on_drag, element),
                on_drag_end: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::Event,
                >::initialize_dom_event_listener_state(this.on_drag_end, element),
                on_drag_enter: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::Event,
                >::initialize_dom_event_listener_state(this.on_drag_enter, element),
                on_drag_leave: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::Event,
                >::initialize_dom_event_listener_state(this.on_drag_leave, element),
                on_drag_over: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::Event,
                >::initialize_dom_event_listener_state(this.on_drag_over, element),
                on_drag_start: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::Event,
                >::initialize_dom_event_listener_state(this.on_drag_start, element),
                on_drop: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::Event,
                >::initialize_dom_event_listener_state(this.on_drop, element),
            }
        }
        fn update_element(
            this: Self,
            element: &web_sys::HtmlElement,
            children_ctx: &mut ::frender_csr::Dom,
            state: ::core::pin::Pin<&mut Self::State>,
        ) {
            let state = state.pin_project();
            let dom_element: &::web_sys::Element = element.as_ref();
            crate::imports::frender_csr::props::UpdateElement::update_element(
                this.ElementProps,
                element.as_ref(),
                children_ctx,
                state.ElementProps,
            );
            <TypeDefs::access_key as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                str,
            >>::maybe_update_value_with_state(
                this.access_key,
                state.access_key,
                |v| dom_element.set_access_key(v),
                || dom_element.remove_attribute("accesskey").unwrap(),
            );
            <TypeDefs::auto_capitalize as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                str,
            >>::maybe_update_value_with_state(
                this.auto_capitalize,
                state.auto_capitalize,
                |v| crate::imports::frender_csr::props::UpdateElementAttribute::update_element_attribute(
                    v,
                    dom_element,
                    "autocapitalize",
                ),
                || dom_element.remove_attribute("autocapitalize").unwrap(),
            );
            <TypeDefs::auto_focus as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                bool,
            >>::maybe_update_value_with_state(
                this.auto_focus,
                state.auto_focus,
                |v| crate::imports::frender_csr::props::UpdateElementAttribute::update_element_attribute(
                    *v,
                    dom_element,
                    "autofocus",
                ),
                || dom_element.remove_attribute("autofocus").unwrap(),
            );
            unimplemented! {}
            <TypeDefs::context_menu as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                str,
            >>::maybe_update_value_with_state(
                this.context_menu,
                state.context_menu,
                |v| crate::imports::frender_csr::props::UpdateElementAttribute::update_element_attribute(
                    v,
                    dom_element,
                    "contextmenu",
                ),
                || dom_element.remove_attribute("contextmenu").unwrap(),
            );
            <TypeDefs::dir as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                str,
            >>::maybe_update_value_with_state(
                this.dir,
                state.dir,
                |v| dom_element.set_dir(v),
                || dom_element.remove_attribute("dir").unwrap(),
            );
            <TypeDefs::draggable as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                bool,
            >>::maybe_update_value_with_state(
                this.draggable,
                state.draggable,
                |v| dom_element.set_draggable(*v),
                || dom_element.remove_attribute("draggable").unwrap(),
            );
            <TypeDefs::enter_key_hint as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                str,
            >>::maybe_update_value_with_state(
                this.enter_key_hint,
                state.enter_key_hint,
                |v| crate::imports::frender_csr::props::UpdateElementAttribute::update_element_attribute(
                    v,
                    dom_element,
                    "enterkeyhint",
                ),
                || dom_element.remove_attribute("enterkeyhint").unwrap(),
            );
            <TypeDefs::hidden as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                bool,
            >>::maybe_update_value_with_state(
                this.hidden,
                state.hidden,
                |v| dom_element.set_hidden(*v),
                || dom_element.remove_attribute("hidden").unwrap(),
            );
            <TypeDefs::inert as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                bool,
            >>::maybe_update_value_with_state(
                this.inert,
                state.inert,
                |v| {
                    crate::imports::frender_csr::props::UpdateElementAttribute::update_element_attribute(
                    *v,
                    dom_element,
                    "inert",
                )
                },
                || dom_element.remove_attribute("inert").unwrap(),
            );
            <TypeDefs::input_mode as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                str,
            >>::maybe_update_value_with_state(
                this.input_mode,
                state.input_mode,
                |v| crate::imports::frender_csr::props::UpdateElementAttribute::update_element_attribute(
                    v,
                    dom_element,
                    "inputmode",
                ),
                || dom_element.remove_attribute("inputmode").unwrap(),
            );
            <TypeDefs::is as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                str,
            >>::maybe_update_value_with_state(
                this.is,
                state.is,
                |v| crate::imports::frender_csr::props::UpdateElementAttribute::update_element_attribute(
                    v,
                    dom_element,
                    "is",
                ),
                || dom_element.remove_attribute("is").unwrap(),
            );
            <TypeDefs::item_id as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                str,
            >>::maybe_update_value_with_state(
                this.item_id,
                state.item_id,
                |v| {
                    crate::imports::frender_csr::props::UpdateElementAttribute::update_element_attribute(
                    v,
                    dom_element,
                    "itemid",
                )
                },
                || dom_element.remove_attribute("itemid").unwrap(),
            );
            <TypeDefs::item_prop as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                str,
            >>::maybe_update_value_with_state(
                this.item_prop,
                state.item_prop,
                |v| crate::imports::frender_csr::props::UpdateElementAttribute::update_element_attribute(
                    v,
                    dom_element,
                    "itemprop",
                ),
                || dom_element.remove_attribute("itemprop").unwrap(),
            );
            <TypeDefs::item_ref as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                str,
            >>::maybe_update_value_with_state(
                this.item_ref,
                state.item_ref,
                |v| crate::imports::frender_csr::props::UpdateElementAttribute::update_element_attribute(
                    v,
                    dom_element,
                    "itemref",
                ),
                || dom_element.remove_attribute("itemref").unwrap(),
            );
            <TypeDefs::item_scope as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                str,
            >>::maybe_update_value_with_state(
                this.item_scope,
                state.item_scope,
                |v| crate::imports::frender_csr::props::UpdateElementAttribute::update_element_attribute(
                    v,
                    dom_element,
                    "itemscope",
                ),
                || dom_element.remove_attribute("itemscope").unwrap(),
            );
            <TypeDefs::item_type as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                str,
            >>::maybe_update_value_with_state(
                this.item_type,
                state.item_type,
                |v| crate::imports::frender_csr::props::UpdateElementAttribute::update_element_attribute(
                    v,
                    dom_element,
                    "itemtype",
                ),
                || dom_element.remove_attribute("itemtype").unwrap(),
            );
            <TypeDefs::lang as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                str,
            >>::maybe_update_value_with_state(
                this.lang,
                state.lang,
                |v| dom_element.set_lang(v),
                || dom_element.remove_attribute("lang").unwrap(),
            );
            <TypeDefs::nonce as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                str,
            >>::maybe_update_value_with_state(
                this.nonce,
                state.nonce,
                |v| {
                    crate::imports::frender_csr::props::UpdateElementAttribute::update_element_attribute(
                    v,
                    dom_element,
                    "nonce",
                )
                },
                || dom_element.remove_attribute("nonce").unwrap(),
            );
            <TypeDefs::role as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                str,
            >>::maybe_update_value_with_state(
                this.role,
                state.role,
                |v| {
                    crate::imports::frender_csr::props::UpdateElementAttribute::update_element_attribute(
                    v,
                    dom_element,
                    "role",
                )
                },
                || dom_element.remove_attribute("role").unwrap(),
            );
            <TypeDefs::slot as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                str,
            >>::maybe_update_value_with_state(
                this.slot,
                state.slot,
                |v| {
                    crate::imports::frender_csr::props::UpdateElementAttribute::update_element_attribute(
                    v,
                    dom_element,
                    "slot",
                )
                },
                || dom_element.remove_attribute("slot").unwrap(),
            );
            <TypeDefs::spellcheck as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                bool,
            >>::maybe_update_value_with_state(
                this.spellcheck,
                state.spellcheck,
                |v| dom_element.set_spellcheck(*v),
                || dom_element.remove_attribute("spellcheck").unwrap(),
            );
            <TypeDefs::style as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                str,
            >>::maybe_update_value_with_state(
                this.style,
                state.style,
                |v| {
                    crate::imports::frender_csr::props::UpdateElementAttribute::update_element_attribute(
                    v,
                    dom_element,
                    "style",
                )
                },
                || dom_element.remove_attribute("style").unwrap(),
            );
            <TypeDefs::tab_index as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                i32,
            >>::maybe_update_value_with_state(
                this.tab_index,
                state.tab_index,
                |v| dom_element.set_tab_index(*v),
                || dom_element.remove_attribute("tabindex").unwrap(),
            );
            <TypeDefs::title as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                str,
            >>::maybe_update_value_with_state(
                this.title,
                state.title,
                |v| dom_element.set_title(v),
                || dom_element.remove_attribute("title").unwrap(),
            );
            <TypeDefs::translate as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                str,
            >>::maybe_update_value_with_state(
                this.translate,
                state.translate,
                |v| crate::imports::frender_csr::props::UpdateElementAttribute::update_element_attribute(
                    v,
                    dom_element,
                    "translate",
                ),
                || dom_element.remove_attribute("translate").unwrap(),
            );
            <TypeDefs::virtual_keyboard_policy as crate::imports::frender_html::props::MaybeUpdateValueWithState<
                str,
            >>::maybe_update_value_with_state(
                this.virtual_keyboard_policy,
                state.virtual_keyboard_policy,
                |v| crate::imports::frender_csr::props::UpdateElementAttribute::update_element_attribute(
                    v,
                    dom_element,
                    "virtualkeyboardpolicy",
                ),
                || dom_element.remove_attribute("virtualkeyboardpolicy").unwrap(),
            );
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::Event,
            >::update_dom_event_listener(this.on_invalid, element, state.on_invalid);
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::AnimationEvent,
            >::update_dom_event_listener(
                this.on_animation_cancel,
                element,
                state.on_animation_cancel,
            );
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::AnimationEvent,
            >::update_dom_event_listener(
                this.on_animation_end,
                element,
                state.on_animation_end,
            );
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::AnimationEvent,
            >::update_dom_event_listener(
                this.on_animation_iteration,
                element,
                state.on_animation_iteration,
            );
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::AnimationEvent,
            >::update_dom_event_listener(
                this.on_animation_start,
                element,
                state.on_animation_start,
            );
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::InputEvent,
            >::update_dom_event_listener(
                this.on_before_input,
                element,
                state.on_before_input,
            );
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::Event,
            >::update_dom_event_listener(this.on_input, element, state.on_input);
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::Event,
            >::update_dom_event_listener(this.on_change, element, state.on_change);
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::PointerEvent,
            >::update_dom_event_listener(
                this.on_got_pointer_capture,
                element,
                state.on_got_pointer_capture,
            );
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::PointerEvent,
            >::update_dom_event_listener(
                this.on_lost_pointer_capture,
                element,
                state.on_lost_pointer_capture,
            );
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::PointerEvent,
            >::update_dom_event_listener(
                this.on_pointer_cancel,
                element,
                state.on_pointer_cancel,
            );
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::PointerEvent,
            >::update_dom_event_listener(
                this.on_pointer_down,
                element,
                state.on_pointer_down,
            );
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::PointerEvent,
            >::update_dom_event_listener(
                this.on_pointer_enter,
                element,
                state.on_pointer_enter,
            );
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::PointerEvent,
            >::update_dom_event_listener(
                this.on_pointer_leave,
                element,
                state.on_pointer_leave,
            );
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::PointerEvent,
            >::update_dom_event_listener(
                this.on_pointer_move,
                element,
                state.on_pointer_move,
            );
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::PointerEvent,
            >::update_dom_event_listener(
                this.on_pointer_out,
                element,
                state.on_pointer_out,
            );
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::PointerEvent,
            >::update_dom_event_listener(
                this.on_pointer_over,
                element,
                state.on_pointer_over,
            );
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::PointerEvent,
            >::update_dom_event_listener(
                this.on_pointer_up,
                element,
                state.on_pointer_up,
            );
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::TransitionEvent,
            >::update_dom_event_listener(
                this.on_transition_cancel,
                element,
                state.on_transition_cancel,
            );
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::TransitionEvent,
            >::update_dom_event_listener(
                this.on_transition_end,
                element,
                state.on_transition_end,
            );
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::TransitionEvent,
            >::update_dom_event_listener(
                this.on_transition_run,
                element,
                state.on_transition_run,
            );
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::TransitionEvent,
            >::update_dom_event_listener(
                this.on_transition_start,
                element,
                state.on_transition_start,
            );
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::Event,
            >::update_dom_event_listener(this.on_drag, element, state.on_drag);
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::Event,
            >::update_dom_event_listener(this.on_drag_end, element, state.on_drag_end);
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::Event,
            >::update_dom_event_listener(
                this.on_drag_enter,
                element,
                state.on_drag_enter,
            );
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::Event,
            >::update_dom_event_listener(
                this.on_drag_leave,
                element,
                state.on_drag_leave,
            );
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::Event,
            >::update_dom_event_listener(this.on_drag_over, element, state.on_drag_over);
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::Event,
            >::update_dom_event_listener(
                this.on_drag_start,
                element,
                state.on_drag_start,
            );
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::Event,
            >::update_dom_event_listener(this.on_drop, element, state.on_drop);
        }
    }
}
#[cfg(feature = "ssr")]
mod impl_into_ssr_data {
    #[allow(unused_imports)]
    use super::super::*;
    impl<
            TypeDefs: ?::core::marker::Sized + super::Types,
            W: ::frender_ssr::AsyncWrite + ::core::marker::Unpin,
        > ::frender_ssr::IntoSsrData<W> for super::Data<TypeDefs>
    where
        ElementProps::Data<TypeDefs::ElementProps>: ::frender_ssr::IntoSsrData<W>,
        unimplemented!(): __,
    {
        type Children =
            <ElementProps::Data<TypeDefs::ElementProps> as ::frender_ssr::IntoSsrData<W>>::Children;
        type ChildrenRenderState = <ElementProps::Data<
            TypeDefs::ElementProps,
        > as ::frender_ssr::IntoSsrData<W>>::ChildrenRenderState;
        type Attrs = ::core::iter::Chain<
            <ElementProps::Data<TypeDefs::ElementProps> as ::frender_ssr::IntoSsrData<W>>::Attrs,
            ::frender_ssr::utils::filter::FilterArray<
                ::frender_ssr::element::html::HtmlAttrPair<'static>,
                27usize,
            >,
        >;
        fn into_ssr_data(this: Self) -> (Self::Children, Self::Attrs) {
            let (children, attrs) = ::frender_ssr::IntoSsrData::into_ssr_data(this.ElementProps);
            (
                children,
                attrs
                    .chain(
                        ::frender_ssr::utils::filter::FilterIdentity(
                            [
                                <TypeDefs::access_key as ::frender_html::props::MaybeUpdateValueWithState<
                                    str,
                                >>::maybe_into_html_attribute_value(this.access_key)
                                    .map(|value| (
                                        ::std::borrow::Cow::Borrowed("accesskey"),
                                        if let Some(value) = value {
                                            ::frender_ssr::element::html::HtmlAttributeValue::String(
                                                value,
                                            )
                                        } else {
                                            ::frender_ssr::element::html::HtmlAttributeValue::BooleanTrue
                                        },
                                    )),
                                <TypeDefs::auto_capitalize as ::frender_html::props::MaybeUpdateValueWithState<
                                    str,
                                >>::maybe_into_html_attribute_value(this.auto_capitalize)
                                    .map(|value| (
                                        ::std::borrow::Cow::Borrowed("autocapitalize"),
                                        if let Some(value) = value {
                                            ::frender_ssr::element::html::HtmlAttributeValue::String(
                                                value,
                                            )
                                        } else {
                                            ::frender_ssr::element::html::HtmlAttributeValue::BooleanTrue
                                        },
                                    )),
                                <TypeDefs::auto_focus as ::frender_html::props::MaybeUpdateValueWithState<
                                    bool,
                                >>::maybe_into_html_attribute_value(this.auto_focus)
                                    .map(|value| (
                                        ::std::borrow::Cow::Borrowed("autofocus"),
                                        if let Some(value) = value {
                                            ::frender_ssr::element::html::HtmlAttributeValue::String(
                                                value,
                                            )
                                        } else {
                                            ::frender_ssr::element::html::HtmlAttributeValue::BooleanTrue
                                        },
                                    )),
                                unimplemented!(),
                                <TypeDefs::context_menu as ::frender_html::props::MaybeUpdateValueWithState<
                                    str,
                                >>::maybe_into_html_attribute_value(this.context_menu)
                                    .map(|value| (
                                        ::std::borrow::Cow::Borrowed("contextmenu"),
                                        if let Some(value) = value {
                                            ::frender_ssr::element::html::HtmlAttributeValue::String(
                                                value,
                                            )
                                        } else {
                                            ::frender_ssr::element::html::HtmlAttributeValue::BooleanTrue
                                        },
                                    )),
                                <TypeDefs::dir as ::frender_html::props::MaybeUpdateValueWithState<
                                    str,
                                >>::maybe_into_html_attribute_value(this.dir)
                                    .map(|value| (
                                        ::std::borrow::Cow::Borrowed("dir"),
                                        if let Some(value) = value {
                                            ::frender_ssr::element::html::HtmlAttributeValue::String(
                                                value,
                                            )
                                        } else {
                                            ::frender_ssr::element::html::HtmlAttributeValue::BooleanTrue
                                        },
                                    )),
                                <TypeDefs::draggable as ::frender_html::props::MaybeUpdateValueWithState<
                                    bool,
                                >>::maybe_into_html_attribute_value(this.draggable)
                                    .map(|value| (
                                        ::std::borrow::Cow::Borrowed("draggable"),
                                        if let Some(value) = value {
                                            ::frender_ssr::element::html::HtmlAttributeValue::String(
                                                value,
                                            )
                                        } else {
                                            ::frender_ssr::element::html::HtmlAttributeValue::BooleanTrue
                                        },
                                    )),
                                <TypeDefs::enter_key_hint as ::frender_html::props::MaybeUpdateValueWithState<
                                    str,
                                >>::maybe_into_html_attribute_value(this.enter_key_hint)
                                    .map(|value| (
                                        ::std::borrow::Cow::Borrowed("enterkeyhint"),
                                        if let Some(value) = value {
                                            ::frender_ssr::element::html::HtmlAttributeValue::String(
                                                value,
                                            )
                                        } else {
                                            ::frender_ssr::element::html::HtmlAttributeValue::BooleanTrue
                                        },
                                    )),
                                <TypeDefs::hidden as ::frender_html::props::MaybeUpdateValueWithState<
                                    bool,
                                >>::maybe_into_html_attribute_value(this.hidden)
                                    .map(|value| (
                                        ::std::borrow::Cow::Borrowed("hidden"),
                                        if let Some(value) = value {
                                            ::frender_ssr::element::html::HtmlAttributeValue::String(
                                                value,
                                            )
                                        } else {
                                            ::frender_ssr::element::html::HtmlAttributeValue::BooleanTrue
                                        },
                                    )),
                                <TypeDefs::inert as ::frender_html::props::MaybeUpdateValueWithState<
                                    bool,
                                >>::maybe_into_html_attribute_value(this.inert)
                                    .map(|value| (
                                        ::std::borrow::Cow::Borrowed("inert"),
                                        if let Some(value) = value {
                                            ::frender_ssr::element::html::HtmlAttributeValue::String(
                                                value,
                                            )
                                        } else {
                                            ::frender_ssr::element::html::HtmlAttributeValue::BooleanTrue
                                        },
                                    )),
                                <TypeDefs::input_mode as ::frender_html::props::MaybeUpdateValueWithState<
                                    str,
                                >>::maybe_into_html_attribute_value(this.input_mode)
                                    .map(|value| (
                                        ::std::borrow::Cow::Borrowed("inputmode"),
                                        if let Some(value) = value {
                                            ::frender_ssr::element::html::HtmlAttributeValue::String(
                                                value,
                                            )
                                        } else {
                                            ::frender_ssr::element::html::HtmlAttributeValue::BooleanTrue
                                        },
                                    )),
                                <TypeDefs::is as ::frender_html::props::MaybeUpdateValueWithState<
                                    str,
                                >>::maybe_into_html_attribute_value(this.is)
                                    .map(|value| (
                                        ::std::borrow::Cow::Borrowed("is"),
                                        if let Some(value) = value {
                                            ::frender_ssr::element::html::HtmlAttributeValue::String(
                                                value,
                                            )
                                        } else {
                                            ::frender_ssr::element::html::HtmlAttributeValue::BooleanTrue
                                        },
                                    )),
                                <TypeDefs::item_id as ::frender_html::props::MaybeUpdateValueWithState<
                                    str,
                                >>::maybe_into_html_attribute_value(this.item_id)
                                    .map(|value| (
                                        ::std::borrow::Cow::Borrowed("itemid"),
                                        if let Some(value) = value {
                                            ::frender_ssr::element::html::HtmlAttributeValue::String(
                                                value,
                                            )
                                        } else {
                                            ::frender_ssr::element::html::HtmlAttributeValue::BooleanTrue
                                        },
                                    )),
                                <TypeDefs::item_prop as ::frender_html::props::MaybeUpdateValueWithState<
                                    str,
                                >>::maybe_into_html_attribute_value(this.item_prop)
                                    .map(|value| (
                                        ::std::borrow::Cow::Borrowed("itemprop"),
                                        if let Some(value) = value {
                                            ::frender_ssr::element::html::HtmlAttributeValue::String(
                                                value,
                                            )
                                        } else {
                                            ::frender_ssr::element::html::HtmlAttributeValue::BooleanTrue
                                        },
                                    )),
                                <TypeDefs::item_ref as ::frender_html::props::MaybeUpdateValueWithState<
                                    str,
                                >>::maybe_into_html_attribute_value(this.item_ref)
                                    .map(|value| (
                                        ::std::borrow::Cow::Borrowed("itemref"),
                                        if let Some(value) = value {
                                            ::frender_ssr::element::html::HtmlAttributeValue::String(
                                                value,
                                            )
                                        } else {
                                            ::frender_ssr::element::html::HtmlAttributeValue::BooleanTrue
                                        },
                                    )),
                                <TypeDefs::item_scope as ::frender_html::props::MaybeUpdateValueWithState<
                                    str,
                                >>::maybe_into_html_attribute_value(this.item_scope)
                                    .map(|value| (
                                        ::std::borrow::Cow::Borrowed("itemscope"),
                                        if let Some(value) = value {
                                            ::frender_ssr::element::html::HtmlAttributeValue::String(
                                                value,
                                            )
                                        } else {
                                            ::frender_ssr::element::html::HtmlAttributeValue::BooleanTrue
                                        },
                                    )),
                                <TypeDefs::item_type as ::frender_html::props::MaybeUpdateValueWithState<
                                    str,
                                >>::maybe_into_html_attribute_value(this.item_type)
                                    .map(|value| (
                                        ::std::borrow::Cow::Borrowed("itemtype"),
                                        if let Some(value) = value {
                                            ::frender_ssr::element::html::HtmlAttributeValue::String(
                                                value,
                                            )
                                        } else {
                                            ::frender_ssr::element::html::HtmlAttributeValue::BooleanTrue
                                        },
                                    )),
                                <TypeDefs::lang as ::frender_html::props::MaybeUpdateValueWithState<
                                    str,
                                >>::maybe_into_html_attribute_value(this.lang)
                                    .map(|value| (
                                        ::std::borrow::Cow::Borrowed("lang"),
                                        if let Some(value) = value {
                                            ::frender_ssr::element::html::HtmlAttributeValue::String(
                                                value,
                                            )
                                        } else {
                                            ::frender_ssr::element::html::HtmlAttributeValue::BooleanTrue
                                        },
                                    )),
                                <TypeDefs::nonce as ::frender_html::props::MaybeUpdateValueWithState<
                                    str,
                                >>::maybe_into_html_attribute_value(this.nonce)
                                    .map(|value| (
                                        ::std::borrow::Cow::Borrowed("nonce"),
                                        if let Some(value) = value {
                                            ::frender_ssr::element::html::HtmlAttributeValue::String(
                                                value,
                                            )
                                        } else {
                                            ::frender_ssr::element::html::HtmlAttributeValue::BooleanTrue
                                        },
                                    )),
                                <TypeDefs::role as ::frender_html::props::MaybeUpdateValueWithState<
                                    str,
                                >>::maybe_into_html_attribute_value(this.role)
                                    .map(|value| (
                                        ::std::borrow::Cow::Borrowed("role"),
                                        if let Some(value) = value {
                                            ::frender_ssr::element::html::HtmlAttributeValue::String(
                                                value,
                                            )
                                        } else {
                                            ::frender_ssr::element::html::HtmlAttributeValue::BooleanTrue
                                        },
                                    )),
                                <TypeDefs::slot as ::frender_html::props::MaybeUpdateValueWithState<
                                    str,
                                >>::maybe_into_html_attribute_value(this.slot)
                                    .map(|value| (
                                        ::std::borrow::Cow::Borrowed("slot"),
                                        if let Some(value) = value {
                                            ::frender_ssr::element::html::HtmlAttributeValue::String(
                                                value,
                                            )
                                        } else {
                                            ::frender_ssr::element::html::HtmlAttributeValue::BooleanTrue
                                        },
                                    )),
                                <TypeDefs::spellcheck as ::frender_html::props::MaybeUpdateValueWithState<
                                    bool,
                                >>::maybe_into_html_attribute_value(this.spellcheck)
                                    .map(|value| (
                                        ::std::borrow::Cow::Borrowed("spellcheck"),
                                        if let Some(value) = value {
                                            ::frender_ssr::element::html::HtmlAttributeValue::String(
                                                value,
                                            )
                                        } else {
                                            ::frender_ssr::element::html::HtmlAttributeValue::BooleanTrue
                                        },
                                    )),
                                <TypeDefs::style as ::frender_html::props::MaybeUpdateValueWithState<
                                    str,
                                >>::maybe_into_html_attribute_value(this.style)
                                    .map(|value| (
                                        ::std::borrow::Cow::Borrowed("style"),
                                        if let Some(value) = value {
                                            ::frender_ssr::element::html::HtmlAttributeValue::String(
                                                value,
                                            )
                                        } else {
                                            ::frender_ssr::element::html::HtmlAttributeValue::BooleanTrue
                                        },
                                    )),
                                <TypeDefs::tab_index as ::frender_html::props::MaybeUpdateValueWithState<
                                    i32,
                                >>::maybe_into_html_attribute_value(this.tab_index)
                                    .map(|value| (
                                        ::std::borrow::Cow::Borrowed("tabindex"),
                                        if let Some(value) = value {
                                            ::frender_ssr::element::html::HtmlAttributeValue::String(
                                                value,
                                            )
                                        } else {
                                            ::frender_ssr::element::html::HtmlAttributeValue::BooleanTrue
                                        },
                                    )),
                                <TypeDefs::title as ::frender_html::props::MaybeUpdateValueWithState<
                                    str,
                                >>::maybe_into_html_attribute_value(this.title)
                                    .map(|value| (
                                        ::std::borrow::Cow::Borrowed("title"),
                                        if let Some(value) = value {
                                            ::frender_ssr::element::html::HtmlAttributeValue::String(
                                                value,
                                            )
                                        } else {
                                            ::frender_ssr::element::html::HtmlAttributeValue::BooleanTrue
                                        },
                                    )),
                                <TypeDefs::translate as ::frender_html::props::MaybeUpdateValueWithState<
                                    str,
                                >>::maybe_into_html_attribute_value(this.translate)
                                    .map(|value| (
                                        ::std::borrow::Cow::Borrowed("translate"),
                                        if let Some(value) = value {
                                            ::frender_ssr::element::html::HtmlAttributeValue::String(
                                                value,
                                            )
                                        } else {
                                            ::frender_ssr::element::html::HtmlAttributeValue::BooleanTrue
                                        },
                                    )),
                                <TypeDefs::virtual_keyboard_policy as ::frender_html::props::MaybeUpdateValueWithState<
                                    str,
                                >>::maybe_into_html_attribute_value(
                                        this.virtual_keyboard_policy,
                                    )
                                    .map(|value| (
                                        ::std::borrow::Cow::Borrowed("virtualkeyboardpolicy"),
                                        if let Some(value) = value {
                                            ::frender_ssr::element::html::HtmlAttributeValue::String(
                                                value,
                                            )
                                        } else {
                                            ::frender_ssr::element::html::HtmlAttributeValue::BooleanTrue
                                        },
                                    )),
                            ]
                                .into_iter(),
                        ),
                    ),
            )
        }
    }
}
