#[allow(non_snake_case)]
#[inline(always)]
pub fn ElementProps() -> Building<TypesInitial> {
    #[allow(unused_imports)]
    use super::*;
    self::Building {
        children: (),
        class: (),
        id: (),
        part: (),
        on_cancel: (),
        on_error: (),
        on_scroll: (),
        on_security_policy_violation: (),
        on_select: (),
        on_wheel: (),
        on_copy: (),
        on_cut: (),
        on_paste: (),
        on_composition_end: (),
        on_composition_start: (),
        on_composition_update: (),
        on_blur: (),
        on_focus: (),
        on_focus_in: (),
        on_focus_out: (),
        on_fullscreen_change: (),
        on_fullscreen_error: (),
        on_key_down: (),
        on_key_up: (),
        on_aux_click: (),
        on_click: (),
        on_context_menu: (),
        on_double_click: (),
        on_mouse_down: (),
        on_mouse_enter: (),
        on_mouse_leave: (),
        on_mouse_move: (),
        on_mouse_out: (),
        on_mouse_over: (),
        on_mouse_up: (),
        on_touch_cancel: (),
        on_touch_end: (),
        on_touch_move: (),
        on_touch_start: (),
    }
}
pub mod prelude {}
pub mod overwrite {
    #![allow(non_camel_case_types)]
    pub type children<TypeDefs, Value> = dyn super::Types<
        children = Value,
        class = <TypeDefs as super::Types>::class,
        id = <TypeDefs as super::Types>::id,
        part = <TypeDefs as super::Types>::part,
        on_cancel = <TypeDefs as super::Types>::on_cancel,
        on_error = <TypeDefs as super::Types>::on_error,
        on_scroll = <TypeDefs as super::Types>::on_scroll,
        on_security_policy_violation = <TypeDefs as super::Types>::on_security_policy_violation,
        on_select = <TypeDefs as super::Types>::on_select,
        on_wheel = <TypeDefs as super::Types>::on_wheel,
        on_copy = <TypeDefs as super::Types>::on_copy,
        on_cut = <TypeDefs as super::Types>::on_cut,
        on_paste = <TypeDefs as super::Types>::on_paste,
        on_composition_end = <TypeDefs as super::Types>::on_composition_end,
        on_composition_start = <TypeDefs as super::Types>::on_composition_start,
        on_composition_update = <TypeDefs as super::Types>::on_composition_update,
        on_blur = <TypeDefs as super::Types>::on_blur,
        on_focus = <TypeDefs as super::Types>::on_focus,
        on_focus_in = <TypeDefs as super::Types>::on_focus_in,
        on_focus_out = <TypeDefs as super::Types>::on_focus_out,
        on_fullscreen_change = <TypeDefs as super::Types>::on_fullscreen_change,
        on_fullscreen_error = <TypeDefs as super::Types>::on_fullscreen_error,
        on_key_down = <TypeDefs as super::Types>::on_key_down,
        on_key_up = <TypeDefs as super::Types>::on_key_up,
        on_aux_click = <TypeDefs as super::Types>::on_aux_click,
        on_click = <TypeDefs as super::Types>::on_click,
        on_context_menu = <TypeDefs as super::Types>::on_context_menu,
        on_double_click = <TypeDefs as super::Types>::on_double_click,
        on_mouse_down = <TypeDefs as super::Types>::on_mouse_down,
        on_mouse_enter = <TypeDefs as super::Types>::on_mouse_enter,
        on_mouse_leave = <TypeDefs as super::Types>::on_mouse_leave,
        on_mouse_move = <TypeDefs as super::Types>::on_mouse_move,
        on_mouse_out = <TypeDefs as super::Types>::on_mouse_out,
        on_mouse_over = <TypeDefs as super::Types>::on_mouse_over,
        on_mouse_up = <TypeDefs as super::Types>::on_mouse_up,
        on_touch_cancel = <TypeDefs as super::Types>::on_touch_cancel,
        on_touch_end = <TypeDefs as super::Types>::on_touch_end,
        on_touch_move = <TypeDefs as super::Types>::on_touch_move,
        on_touch_start = <TypeDefs as super::Types>::on_touch_start,
    >;
    pub type class<TypeDefs, Value> = dyn super::Types<
        children = <TypeDefs as super::Types>::children,
        class = Value,
        id = <TypeDefs as super::Types>::id,
        part = <TypeDefs as super::Types>::part,
        on_cancel = <TypeDefs as super::Types>::on_cancel,
        on_error = <TypeDefs as super::Types>::on_error,
        on_scroll = <TypeDefs as super::Types>::on_scroll,
        on_security_policy_violation = <TypeDefs as super::Types>::on_security_policy_violation,
        on_select = <TypeDefs as super::Types>::on_select,
        on_wheel = <TypeDefs as super::Types>::on_wheel,
        on_copy = <TypeDefs as super::Types>::on_copy,
        on_cut = <TypeDefs as super::Types>::on_cut,
        on_paste = <TypeDefs as super::Types>::on_paste,
        on_composition_end = <TypeDefs as super::Types>::on_composition_end,
        on_composition_start = <TypeDefs as super::Types>::on_composition_start,
        on_composition_update = <TypeDefs as super::Types>::on_composition_update,
        on_blur = <TypeDefs as super::Types>::on_blur,
        on_focus = <TypeDefs as super::Types>::on_focus,
        on_focus_in = <TypeDefs as super::Types>::on_focus_in,
        on_focus_out = <TypeDefs as super::Types>::on_focus_out,
        on_fullscreen_change = <TypeDefs as super::Types>::on_fullscreen_change,
        on_fullscreen_error = <TypeDefs as super::Types>::on_fullscreen_error,
        on_key_down = <TypeDefs as super::Types>::on_key_down,
        on_key_up = <TypeDefs as super::Types>::on_key_up,
        on_aux_click = <TypeDefs as super::Types>::on_aux_click,
        on_click = <TypeDefs as super::Types>::on_click,
        on_context_menu = <TypeDefs as super::Types>::on_context_menu,
        on_double_click = <TypeDefs as super::Types>::on_double_click,
        on_mouse_down = <TypeDefs as super::Types>::on_mouse_down,
        on_mouse_enter = <TypeDefs as super::Types>::on_mouse_enter,
        on_mouse_leave = <TypeDefs as super::Types>::on_mouse_leave,
        on_mouse_move = <TypeDefs as super::Types>::on_mouse_move,
        on_mouse_out = <TypeDefs as super::Types>::on_mouse_out,
        on_mouse_over = <TypeDefs as super::Types>::on_mouse_over,
        on_mouse_up = <TypeDefs as super::Types>::on_mouse_up,
        on_touch_cancel = <TypeDefs as super::Types>::on_touch_cancel,
        on_touch_end = <TypeDefs as super::Types>::on_touch_end,
        on_touch_move = <TypeDefs as super::Types>::on_touch_move,
        on_touch_start = <TypeDefs as super::Types>::on_touch_start,
    >;
    pub type id<TypeDefs, Value> = dyn super::Types<
        children = <TypeDefs as super::Types>::children,
        class = <TypeDefs as super::Types>::class,
        id = Value,
        part = <TypeDefs as super::Types>::part,
        on_cancel = <TypeDefs as super::Types>::on_cancel,
        on_error = <TypeDefs as super::Types>::on_error,
        on_scroll = <TypeDefs as super::Types>::on_scroll,
        on_security_policy_violation = <TypeDefs as super::Types>::on_security_policy_violation,
        on_select = <TypeDefs as super::Types>::on_select,
        on_wheel = <TypeDefs as super::Types>::on_wheel,
        on_copy = <TypeDefs as super::Types>::on_copy,
        on_cut = <TypeDefs as super::Types>::on_cut,
        on_paste = <TypeDefs as super::Types>::on_paste,
        on_composition_end = <TypeDefs as super::Types>::on_composition_end,
        on_composition_start = <TypeDefs as super::Types>::on_composition_start,
        on_composition_update = <TypeDefs as super::Types>::on_composition_update,
        on_blur = <TypeDefs as super::Types>::on_blur,
        on_focus = <TypeDefs as super::Types>::on_focus,
        on_focus_in = <TypeDefs as super::Types>::on_focus_in,
        on_focus_out = <TypeDefs as super::Types>::on_focus_out,
        on_fullscreen_change = <TypeDefs as super::Types>::on_fullscreen_change,
        on_fullscreen_error = <TypeDefs as super::Types>::on_fullscreen_error,
        on_key_down = <TypeDefs as super::Types>::on_key_down,
        on_key_up = <TypeDefs as super::Types>::on_key_up,
        on_aux_click = <TypeDefs as super::Types>::on_aux_click,
        on_click = <TypeDefs as super::Types>::on_click,
        on_context_menu = <TypeDefs as super::Types>::on_context_menu,
        on_double_click = <TypeDefs as super::Types>::on_double_click,
        on_mouse_down = <TypeDefs as super::Types>::on_mouse_down,
        on_mouse_enter = <TypeDefs as super::Types>::on_mouse_enter,
        on_mouse_leave = <TypeDefs as super::Types>::on_mouse_leave,
        on_mouse_move = <TypeDefs as super::Types>::on_mouse_move,
        on_mouse_out = <TypeDefs as super::Types>::on_mouse_out,
        on_mouse_over = <TypeDefs as super::Types>::on_mouse_over,
        on_mouse_up = <TypeDefs as super::Types>::on_mouse_up,
        on_touch_cancel = <TypeDefs as super::Types>::on_touch_cancel,
        on_touch_end = <TypeDefs as super::Types>::on_touch_end,
        on_touch_move = <TypeDefs as super::Types>::on_touch_move,
        on_touch_start = <TypeDefs as super::Types>::on_touch_start,
    >;
    pub type part<TypeDefs, Value> = dyn super::Types<
        children = <TypeDefs as super::Types>::children,
        class = <TypeDefs as super::Types>::class,
        id = <TypeDefs as super::Types>::id,
        part = Value,
        on_cancel = <TypeDefs as super::Types>::on_cancel,
        on_error = <TypeDefs as super::Types>::on_error,
        on_scroll = <TypeDefs as super::Types>::on_scroll,
        on_security_policy_violation = <TypeDefs as super::Types>::on_security_policy_violation,
        on_select = <TypeDefs as super::Types>::on_select,
        on_wheel = <TypeDefs as super::Types>::on_wheel,
        on_copy = <TypeDefs as super::Types>::on_copy,
        on_cut = <TypeDefs as super::Types>::on_cut,
        on_paste = <TypeDefs as super::Types>::on_paste,
        on_composition_end = <TypeDefs as super::Types>::on_composition_end,
        on_composition_start = <TypeDefs as super::Types>::on_composition_start,
        on_composition_update = <TypeDefs as super::Types>::on_composition_update,
        on_blur = <TypeDefs as super::Types>::on_blur,
        on_focus = <TypeDefs as super::Types>::on_focus,
        on_focus_in = <TypeDefs as super::Types>::on_focus_in,
        on_focus_out = <TypeDefs as super::Types>::on_focus_out,
        on_fullscreen_change = <TypeDefs as super::Types>::on_fullscreen_change,
        on_fullscreen_error = <TypeDefs as super::Types>::on_fullscreen_error,
        on_key_down = <TypeDefs as super::Types>::on_key_down,
        on_key_up = <TypeDefs as super::Types>::on_key_up,
        on_aux_click = <TypeDefs as super::Types>::on_aux_click,
        on_click = <TypeDefs as super::Types>::on_click,
        on_context_menu = <TypeDefs as super::Types>::on_context_menu,
        on_double_click = <TypeDefs as super::Types>::on_double_click,
        on_mouse_down = <TypeDefs as super::Types>::on_mouse_down,
        on_mouse_enter = <TypeDefs as super::Types>::on_mouse_enter,
        on_mouse_leave = <TypeDefs as super::Types>::on_mouse_leave,
        on_mouse_move = <TypeDefs as super::Types>::on_mouse_move,
        on_mouse_out = <TypeDefs as super::Types>::on_mouse_out,
        on_mouse_over = <TypeDefs as super::Types>::on_mouse_over,
        on_mouse_up = <TypeDefs as super::Types>::on_mouse_up,
        on_touch_cancel = <TypeDefs as super::Types>::on_touch_cancel,
        on_touch_end = <TypeDefs as super::Types>::on_touch_end,
        on_touch_move = <TypeDefs as super::Types>::on_touch_move,
        on_touch_start = <TypeDefs as super::Types>::on_touch_start,
    >;
    pub type on_cancel<TypeDefs, Value> = dyn super::Types<
        children = <TypeDefs as super::Types>::children,
        class = <TypeDefs as super::Types>::class,
        id = <TypeDefs as super::Types>::id,
        part = <TypeDefs as super::Types>::part,
        on_cancel = Value,
        on_error = <TypeDefs as super::Types>::on_error,
        on_scroll = <TypeDefs as super::Types>::on_scroll,
        on_security_policy_violation = <TypeDefs as super::Types>::on_security_policy_violation,
        on_select = <TypeDefs as super::Types>::on_select,
        on_wheel = <TypeDefs as super::Types>::on_wheel,
        on_copy = <TypeDefs as super::Types>::on_copy,
        on_cut = <TypeDefs as super::Types>::on_cut,
        on_paste = <TypeDefs as super::Types>::on_paste,
        on_composition_end = <TypeDefs as super::Types>::on_composition_end,
        on_composition_start = <TypeDefs as super::Types>::on_composition_start,
        on_composition_update = <TypeDefs as super::Types>::on_composition_update,
        on_blur = <TypeDefs as super::Types>::on_blur,
        on_focus = <TypeDefs as super::Types>::on_focus,
        on_focus_in = <TypeDefs as super::Types>::on_focus_in,
        on_focus_out = <TypeDefs as super::Types>::on_focus_out,
        on_fullscreen_change = <TypeDefs as super::Types>::on_fullscreen_change,
        on_fullscreen_error = <TypeDefs as super::Types>::on_fullscreen_error,
        on_key_down = <TypeDefs as super::Types>::on_key_down,
        on_key_up = <TypeDefs as super::Types>::on_key_up,
        on_aux_click = <TypeDefs as super::Types>::on_aux_click,
        on_click = <TypeDefs as super::Types>::on_click,
        on_context_menu = <TypeDefs as super::Types>::on_context_menu,
        on_double_click = <TypeDefs as super::Types>::on_double_click,
        on_mouse_down = <TypeDefs as super::Types>::on_mouse_down,
        on_mouse_enter = <TypeDefs as super::Types>::on_mouse_enter,
        on_mouse_leave = <TypeDefs as super::Types>::on_mouse_leave,
        on_mouse_move = <TypeDefs as super::Types>::on_mouse_move,
        on_mouse_out = <TypeDefs as super::Types>::on_mouse_out,
        on_mouse_over = <TypeDefs as super::Types>::on_mouse_over,
        on_mouse_up = <TypeDefs as super::Types>::on_mouse_up,
        on_touch_cancel = <TypeDefs as super::Types>::on_touch_cancel,
        on_touch_end = <TypeDefs as super::Types>::on_touch_end,
        on_touch_move = <TypeDefs as super::Types>::on_touch_move,
        on_touch_start = <TypeDefs as super::Types>::on_touch_start,
    >;
    pub type on_error<TypeDefs, Value> = dyn super::Types<
        children = <TypeDefs as super::Types>::children,
        class = <TypeDefs as super::Types>::class,
        id = <TypeDefs as super::Types>::id,
        part = <TypeDefs as super::Types>::part,
        on_cancel = <TypeDefs as super::Types>::on_cancel,
        on_error = Value,
        on_scroll = <TypeDefs as super::Types>::on_scroll,
        on_security_policy_violation = <TypeDefs as super::Types>::on_security_policy_violation,
        on_select = <TypeDefs as super::Types>::on_select,
        on_wheel = <TypeDefs as super::Types>::on_wheel,
        on_copy = <TypeDefs as super::Types>::on_copy,
        on_cut = <TypeDefs as super::Types>::on_cut,
        on_paste = <TypeDefs as super::Types>::on_paste,
        on_composition_end = <TypeDefs as super::Types>::on_composition_end,
        on_composition_start = <TypeDefs as super::Types>::on_composition_start,
        on_composition_update = <TypeDefs as super::Types>::on_composition_update,
        on_blur = <TypeDefs as super::Types>::on_blur,
        on_focus = <TypeDefs as super::Types>::on_focus,
        on_focus_in = <TypeDefs as super::Types>::on_focus_in,
        on_focus_out = <TypeDefs as super::Types>::on_focus_out,
        on_fullscreen_change = <TypeDefs as super::Types>::on_fullscreen_change,
        on_fullscreen_error = <TypeDefs as super::Types>::on_fullscreen_error,
        on_key_down = <TypeDefs as super::Types>::on_key_down,
        on_key_up = <TypeDefs as super::Types>::on_key_up,
        on_aux_click = <TypeDefs as super::Types>::on_aux_click,
        on_click = <TypeDefs as super::Types>::on_click,
        on_context_menu = <TypeDefs as super::Types>::on_context_menu,
        on_double_click = <TypeDefs as super::Types>::on_double_click,
        on_mouse_down = <TypeDefs as super::Types>::on_mouse_down,
        on_mouse_enter = <TypeDefs as super::Types>::on_mouse_enter,
        on_mouse_leave = <TypeDefs as super::Types>::on_mouse_leave,
        on_mouse_move = <TypeDefs as super::Types>::on_mouse_move,
        on_mouse_out = <TypeDefs as super::Types>::on_mouse_out,
        on_mouse_over = <TypeDefs as super::Types>::on_mouse_over,
        on_mouse_up = <TypeDefs as super::Types>::on_mouse_up,
        on_touch_cancel = <TypeDefs as super::Types>::on_touch_cancel,
        on_touch_end = <TypeDefs as super::Types>::on_touch_end,
        on_touch_move = <TypeDefs as super::Types>::on_touch_move,
        on_touch_start = <TypeDefs as super::Types>::on_touch_start,
    >;
    pub type on_scroll<TypeDefs, Value> = dyn super::Types<
        children = <TypeDefs as super::Types>::children,
        class = <TypeDefs as super::Types>::class,
        id = <TypeDefs as super::Types>::id,
        part = <TypeDefs as super::Types>::part,
        on_cancel = <TypeDefs as super::Types>::on_cancel,
        on_error = <TypeDefs as super::Types>::on_error,
        on_scroll = Value,
        on_security_policy_violation = <TypeDefs as super::Types>::on_security_policy_violation,
        on_select = <TypeDefs as super::Types>::on_select,
        on_wheel = <TypeDefs as super::Types>::on_wheel,
        on_copy = <TypeDefs as super::Types>::on_copy,
        on_cut = <TypeDefs as super::Types>::on_cut,
        on_paste = <TypeDefs as super::Types>::on_paste,
        on_composition_end = <TypeDefs as super::Types>::on_composition_end,
        on_composition_start = <TypeDefs as super::Types>::on_composition_start,
        on_composition_update = <TypeDefs as super::Types>::on_composition_update,
        on_blur = <TypeDefs as super::Types>::on_blur,
        on_focus = <TypeDefs as super::Types>::on_focus,
        on_focus_in = <TypeDefs as super::Types>::on_focus_in,
        on_focus_out = <TypeDefs as super::Types>::on_focus_out,
        on_fullscreen_change = <TypeDefs as super::Types>::on_fullscreen_change,
        on_fullscreen_error = <TypeDefs as super::Types>::on_fullscreen_error,
        on_key_down = <TypeDefs as super::Types>::on_key_down,
        on_key_up = <TypeDefs as super::Types>::on_key_up,
        on_aux_click = <TypeDefs as super::Types>::on_aux_click,
        on_click = <TypeDefs as super::Types>::on_click,
        on_context_menu = <TypeDefs as super::Types>::on_context_menu,
        on_double_click = <TypeDefs as super::Types>::on_double_click,
        on_mouse_down = <TypeDefs as super::Types>::on_mouse_down,
        on_mouse_enter = <TypeDefs as super::Types>::on_mouse_enter,
        on_mouse_leave = <TypeDefs as super::Types>::on_mouse_leave,
        on_mouse_move = <TypeDefs as super::Types>::on_mouse_move,
        on_mouse_out = <TypeDefs as super::Types>::on_mouse_out,
        on_mouse_over = <TypeDefs as super::Types>::on_mouse_over,
        on_mouse_up = <TypeDefs as super::Types>::on_mouse_up,
        on_touch_cancel = <TypeDefs as super::Types>::on_touch_cancel,
        on_touch_end = <TypeDefs as super::Types>::on_touch_end,
        on_touch_move = <TypeDefs as super::Types>::on_touch_move,
        on_touch_start = <TypeDefs as super::Types>::on_touch_start,
    >;
    pub type on_security_policy_violation<TypeDefs, Value> = dyn super::Types<
        children = <TypeDefs as super::Types>::children,
        class = <TypeDefs as super::Types>::class,
        id = <TypeDefs as super::Types>::id,
        part = <TypeDefs as super::Types>::part,
        on_cancel = <TypeDefs as super::Types>::on_cancel,
        on_error = <TypeDefs as super::Types>::on_error,
        on_scroll = <TypeDefs as super::Types>::on_scroll,
        on_security_policy_violation = Value,
        on_select = <TypeDefs as super::Types>::on_select,
        on_wheel = <TypeDefs as super::Types>::on_wheel,
        on_copy = <TypeDefs as super::Types>::on_copy,
        on_cut = <TypeDefs as super::Types>::on_cut,
        on_paste = <TypeDefs as super::Types>::on_paste,
        on_composition_end = <TypeDefs as super::Types>::on_composition_end,
        on_composition_start = <TypeDefs as super::Types>::on_composition_start,
        on_composition_update = <TypeDefs as super::Types>::on_composition_update,
        on_blur = <TypeDefs as super::Types>::on_blur,
        on_focus = <TypeDefs as super::Types>::on_focus,
        on_focus_in = <TypeDefs as super::Types>::on_focus_in,
        on_focus_out = <TypeDefs as super::Types>::on_focus_out,
        on_fullscreen_change = <TypeDefs as super::Types>::on_fullscreen_change,
        on_fullscreen_error = <TypeDefs as super::Types>::on_fullscreen_error,
        on_key_down = <TypeDefs as super::Types>::on_key_down,
        on_key_up = <TypeDefs as super::Types>::on_key_up,
        on_aux_click = <TypeDefs as super::Types>::on_aux_click,
        on_click = <TypeDefs as super::Types>::on_click,
        on_context_menu = <TypeDefs as super::Types>::on_context_menu,
        on_double_click = <TypeDefs as super::Types>::on_double_click,
        on_mouse_down = <TypeDefs as super::Types>::on_mouse_down,
        on_mouse_enter = <TypeDefs as super::Types>::on_mouse_enter,
        on_mouse_leave = <TypeDefs as super::Types>::on_mouse_leave,
        on_mouse_move = <TypeDefs as super::Types>::on_mouse_move,
        on_mouse_out = <TypeDefs as super::Types>::on_mouse_out,
        on_mouse_over = <TypeDefs as super::Types>::on_mouse_over,
        on_mouse_up = <TypeDefs as super::Types>::on_mouse_up,
        on_touch_cancel = <TypeDefs as super::Types>::on_touch_cancel,
        on_touch_end = <TypeDefs as super::Types>::on_touch_end,
        on_touch_move = <TypeDefs as super::Types>::on_touch_move,
        on_touch_start = <TypeDefs as super::Types>::on_touch_start,
    >;
    pub type on_select<TypeDefs, Value> = dyn super::Types<
        children = <TypeDefs as super::Types>::children,
        class = <TypeDefs as super::Types>::class,
        id = <TypeDefs as super::Types>::id,
        part = <TypeDefs as super::Types>::part,
        on_cancel = <TypeDefs as super::Types>::on_cancel,
        on_error = <TypeDefs as super::Types>::on_error,
        on_scroll = <TypeDefs as super::Types>::on_scroll,
        on_security_policy_violation = <TypeDefs as super::Types>::on_security_policy_violation,
        on_select = Value,
        on_wheel = <TypeDefs as super::Types>::on_wheel,
        on_copy = <TypeDefs as super::Types>::on_copy,
        on_cut = <TypeDefs as super::Types>::on_cut,
        on_paste = <TypeDefs as super::Types>::on_paste,
        on_composition_end = <TypeDefs as super::Types>::on_composition_end,
        on_composition_start = <TypeDefs as super::Types>::on_composition_start,
        on_composition_update = <TypeDefs as super::Types>::on_composition_update,
        on_blur = <TypeDefs as super::Types>::on_blur,
        on_focus = <TypeDefs as super::Types>::on_focus,
        on_focus_in = <TypeDefs as super::Types>::on_focus_in,
        on_focus_out = <TypeDefs as super::Types>::on_focus_out,
        on_fullscreen_change = <TypeDefs as super::Types>::on_fullscreen_change,
        on_fullscreen_error = <TypeDefs as super::Types>::on_fullscreen_error,
        on_key_down = <TypeDefs as super::Types>::on_key_down,
        on_key_up = <TypeDefs as super::Types>::on_key_up,
        on_aux_click = <TypeDefs as super::Types>::on_aux_click,
        on_click = <TypeDefs as super::Types>::on_click,
        on_context_menu = <TypeDefs as super::Types>::on_context_menu,
        on_double_click = <TypeDefs as super::Types>::on_double_click,
        on_mouse_down = <TypeDefs as super::Types>::on_mouse_down,
        on_mouse_enter = <TypeDefs as super::Types>::on_mouse_enter,
        on_mouse_leave = <TypeDefs as super::Types>::on_mouse_leave,
        on_mouse_move = <TypeDefs as super::Types>::on_mouse_move,
        on_mouse_out = <TypeDefs as super::Types>::on_mouse_out,
        on_mouse_over = <TypeDefs as super::Types>::on_mouse_over,
        on_mouse_up = <TypeDefs as super::Types>::on_mouse_up,
        on_touch_cancel = <TypeDefs as super::Types>::on_touch_cancel,
        on_touch_end = <TypeDefs as super::Types>::on_touch_end,
        on_touch_move = <TypeDefs as super::Types>::on_touch_move,
        on_touch_start = <TypeDefs as super::Types>::on_touch_start,
    >;
    pub type on_wheel<TypeDefs, Value> = dyn super::Types<
        children = <TypeDefs as super::Types>::children,
        class = <TypeDefs as super::Types>::class,
        id = <TypeDefs as super::Types>::id,
        part = <TypeDefs as super::Types>::part,
        on_cancel = <TypeDefs as super::Types>::on_cancel,
        on_error = <TypeDefs as super::Types>::on_error,
        on_scroll = <TypeDefs as super::Types>::on_scroll,
        on_security_policy_violation = <TypeDefs as super::Types>::on_security_policy_violation,
        on_select = <TypeDefs as super::Types>::on_select,
        on_wheel = Value,
        on_copy = <TypeDefs as super::Types>::on_copy,
        on_cut = <TypeDefs as super::Types>::on_cut,
        on_paste = <TypeDefs as super::Types>::on_paste,
        on_composition_end = <TypeDefs as super::Types>::on_composition_end,
        on_composition_start = <TypeDefs as super::Types>::on_composition_start,
        on_composition_update = <TypeDefs as super::Types>::on_composition_update,
        on_blur = <TypeDefs as super::Types>::on_blur,
        on_focus = <TypeDefs as super::Types>::on_focus,
        on_focus_in = <TypeDefs as super::Types>::on_focus_in,
        on_focus_out = <TypeDefs as super::Types>::on_focus_out,
        on_fullscreen_change = <TypeDefs as super::Types>::on_fullscreen_change,
        on_fullscreen_error = <TypeDefs as super::Types>::on_fullscreen_error,
        on_key_down = <TypeDefs as super::Types>::on_key_down,
        on_key_up = <TypeDefs as super::Types>::on_key_up,
        on_aux_click = <TypeDefs as super::Types>::on_aux_click,
        on_click = <TypeDefs as super::Types>::on_click,
        on_context_menu = <TypeDefs as super::Types>::on_context_menu,
        on_double_click = <TypeDefs as super::Types>::on_double_click,
        on_mouse_down = <TypeDefs as super::Types>::on_mouse_down,
        on_mouse_enter = <TypeDefs as super::Types>::on_mouse_enter,
        on_mouse_leave = <TypeDefs as super::Types>::on_mouse_leave,
        on_mouse_move = <TypeDefs as super::Types>::on_mouse_move,
        on_mouse_out = <TypeDefs as super::Types>::on_mouse_out,
        on_mouse_over = <TypeDefs as super::Types>::on_mouse_over,
        on_mouse_up = <TypeDefs as super::Types>::on_mouse_up,
        on_touch_cancel = <TypeDefs as super::Types>::on_touch_cancel,
        on_touch_end = <TypeDefs as super::Types>::on_touch_end,
        on_touch_move = <TypeDefs as super::Types>::on_touch_move,
        on_touch_start = <TypeDefs as super::Types>::on_touch_start,
    >;
    pub type on_copy<TypeDefs, Value> = dyn super::Types<
        children = <TypeDefs as super::Types>::children,
        class = <TypeDefs as super::Types>::class,
        id = <TypeDefs as super::Types>::id,
        part = <TypeDefs as super::Types>::part,
        on_cancel = <TypeDefs as super::Types>::on_cancel,
        on_error = <TypeDefs as super::Types>::on_error,
        on_scroll = <TypeDefs as super::Types>::on_scroll,
        on_security_policy_violation = <TypeDefs as super::Types>::on_security_policy_violation,
        on_select = <TypeDefs as super::Types>::on_select,
        on_wheel = <TypeDefs as super::Types>::on_wheel,
        on_copy = Value,
        on_cut = <TypeDefs as super::Types>::on_cut,
        on_paste = <TypeDefs as super::Types>::on_paste,
        on_composition_end = <TypeDefs as super::Types>::on_composition_end,
        on_composition_start = <TypeDefs as super::Types>::on_composition_start,
        on_composition_update = <TypeDefs as super::Types>::on_composition_update,
        on_blur = <TypeDefs as super::Types>::on_blur,
        on_focus = <TypeDefs as super::Types>::on_focus,
        on_focus_in = <TypeDefs as super::Types>::on_focus_in,
        on_focus_out = <TypeDefs as super::Types>::on_focus_out,
        on_fullscreen_change = <TypeDefs as super::Types>::on_fullscreen_change,
        on_fullscreen_error = <TypeDefs as super::Types>::on_fullscreen_error,
        on_key_down = <TypeDefs as super::Types>::on_key_down,
        on_key_up = <TypeDefs as super::Types>::on_key_up,
        on_aux_click = <TypeDefs as super::Types>::on_aux_click,
        on_click = <TypeDefs as super::Types>::on_click,
        on_context_menu = <TypeDefs as super::Types>::on_context_menu,
        on_double_click = <TypeDefs as super::Types>::on_double_click,
        on_mouse_down = <TypeDefs as super::Types>::on_mouse_down,
        on_mouse_enter = <TypeDefs as super::Types>::on_mouse_enter,
        on_mouse_leave = <TypeDefs as super::Types>::on_mouse_leave,
        on_mouse_move = <TypeDefs as super::Types>::on_mouse_move,
        on_mouse_out = <TypeDefs as super::Types>::on_mouse_out,
        on_mouse_over = <TypeDefs as super::Types>::on_mouse_over,
        on_mouse_up = <TypeDefs as super::Types>::on_mouse_up,
        on_touch_cancel = <TypeDefs as super::Types>::on_touch_cancel,
        on_touch_end = <TypeDefs as super::Types>::on_touch_end,
        on_touch_move = <TypeDefs as super::Types>::on_touch_move,
        on_touch_start = <TypeDefs as super::Types>::on_touch_start,
    >;
    pub type on_cut<TypeDefs, Value> = dyn super::Types<
        children = <TypeDefs as super::Types>::children,
        class = <TypeDefs as super::Types>::class,
        id = <TypeDefs as super::Types>::id,
        part = <TypeDefs as super::Types>::part,
        on_cancel = <TypeDefs as super::Types>::on_cancel,
        on_error = <TypeDefs as super::Types>::on_error,
        on_scroll = <TypeDefs as super::Types>::on_scroll,
        on_security_policy_violation = <TypeDefs as super::Types>::on_security_policy_violation,
        on_select = <TypeDefs as super::Types>::on_select,
        on_wheel = <TypeDefs as super::Types>::on_wheel,
        on_copy = <TypeDefs as super::Types>::on_copy,
        on_cut = Value,
        on_paste = <TypeDefs as super::Types>::on_paste,
        on_composition_end = <TypeDefs as super::Types>::on_composition_end,
        on_composition_start = <TypeDefs as super::Types>::on_composition_start,
        on_composition_update = <TypeDefs as super::Types>::on_composition_update,
        on_blur = <TypeDefs as super::Types>::on_blur,
        on_focus = <TypeDefs as super::Types>::on_focus,
        on_focus_in = <TypeDefs as super::Types>::on_focus_in,
        on_focus_out = <TypeDefs as super::Types>::on_focus_out,
        on_fullscreen_change = <TypeDefs as super::Types>::on_fullscreen_change,
        on_fullscreen_error = <TypeDefs as super::Types>::on_fullscreen_error,
        on_key_down = <TypeDefs as super::Types>::on_key_down,
        on_key_up = <TypeDefs as super::Types>::on_key_up,
        on_aux_click = <TypeDefs as super::Types>::on_aux_click,
        on_click = <TypeDefs as super::Types>::on_click,
        on_context_menu = <TypeDefs as super::Types>::on_context_menu,
        on_double_click = <TypeDefs as super::Types>::on_double_click,
        on_mouse_down = <TypeDefs as super::Types>::on_mouse_down,
        on_mouse_enter = <TypeDefs as super::Types>::on_mouse_enter,
        on_mouse_leave = <TypeDefs as super::Types>::on_mouse_leave,
        on_mouse_move = <TypeDefs as super::Types>::on_mouse_move,
        on_mouse_out = <TypeDefs as super::Types>::on_mouse_out,
        on_mouse_over = <TypeDefs as super::Types>::on_mouse_over,
        on_mouse_up = <TypeDefs as super::Types>::on_mouse_up,
        on_touch_cancel = <TypeDefs as super::Types>::on_touch_cancel,
        on_touch_end = <TypeDefs as super::Types>::on_touch_end,
        on_touch_move = <TypeDefs as super::Types>::on_touch_move,
        on_touch_start = <TypeDefs as super::Types>::on_touch_start,
    >;
    pub type on_paste<TypeDefs, Value> = dyn super::Types<
        children = <TypeDefs as super::Types>::children,
        class = <TypeDefs as super::Types>::class,
        id = <TypeDefs as super::Types>::id,
        part = <TypeDefs as super::Types>::part,
        on_cancel = <TypeDefs as super::Types>::on_cancel,
        on_error = <TypeDefs as super::Types>::on_error,
        on_scroll = <TypeDefs as super::Types>::on_scroll,
        on_security_policy_violation = <TypeDefs as super::Types>::on_security_policy_violation,
        on_select = <TypeDefs as super::Types>::on_select,
        on_wheel = <TypeDefs as super::Types>::on_wheel,
        on_copy = <TypeDefs as super::Types>::on_copy,
        on_cut = <TypeDefs as super::Types>::on_cut,
        on_paste = Value,
        on_composition_end = <TypeDefs as super::Types>::on_composition_end,
        on_composition_start = <TypeDefs as super::Types>::on_composition_start,
        on_composition_update = <TypeDefs as super::Types>::on_composition_update,
        on_blur = <TypeDefs as super::Types>::on_blur,
        on_focus = <TypeDefs as super::Types>::on_focus,
        on_focus_in = <TypeDefs as super::Types>::on_focus_in,
        on_focus_out = <TypeDefs as super::Types>::on_focus_out,
        on_fullscreen_change = <TypeDefs as super::Types>::on_fullscreen_change,
        on_fullscreen_error = <TypeDefs as super::Types>::on_fullscreen_error,
        on_key_down = <TypeDefs as super::Types>::on_key_down,
        on_key_up = <TypeDefs as super::Types>::on_key_up,
        on_aux_click = <TypeDefs as super::Types>::on_aux_click,
        on_click = <TypeDefs as super::Types>::on_click,
        on_context_menu = <TypeDefs as super::Types>::on_context_menu,
        on_double_click = <TypeDefs as super::Types>::on_double_click,
        on_mouse_down = <TypeDefs as super::Types>::on_mouse_down,
        on_mouse_enter = <TypeDefs as super::Types>::on_mouse_enter,
        on_mouse_leave = <TypeDefs as super::Types>::on_mouse_leave,
        on_mouse_move = <TypeDefs as super::Types>::on_mouse_move,
        on_mouse_out = <TypeDefs as super::Types>::on_mouse_out,
        on_mouse_over = <TypeDefs as super::Types>::on_mouse_over,
        on_mouse_up = <TypeDefs as super::Types>::on_mouse_up,
        on_touch_cancel = <TypeDefs as super::Types>::on_touch_cancel,
        on_touch_end = <TypeDefs as super::Types>::on_touch_end,
        on_touch_move = <TypeDefs as super::Types>::on_touch_move,
        on_touch_start = <TypeDefs as super::Types>::on_touch_start,
    >;
    pub type on_composition_end<TypeDefs, Value> = dyn super::Types<
        children = <TypeDefs as super::Types>::children,
        class = <TypeDefs as super::Types>::class,
        id = <TypeDefs as super::Types>::id,
        part = <TypeDefs as super::Types>::part,
        on_cancel = <TypeDefs as super::Types>::on_cancel,
        on_error = <TypeDefs as super::Types>::on_error,
        on_scroll = <TypeDefs as super::Types>::on_scroll,
        on_security_policy_violation = <TypeDefs as super::Types>::on_security_policy_violation,
        on_select = <TypeDefs as super::Types>::on_select,
        on_wheel = <TypeDefs as super::Types>::on_wheel,
        on_copy = <TypeDefs as super::Types>::on_copy,
        on_cut = <TypeDefs as super::Types>::on_cut,
        on_paste = <TypeDefs as super::Types>::on_paste,
        on_composition_end = Value,
        on_composition_start = <TypeDefs as super::Types>::on_composition_start,
        on_composition_update = <TypeDefs as super::Types>::on_composition_update,
        on_blur = <TypeDefs as super::Types>::on_blur,
        on_focus = <TypeDefs as super::Types>::on_focus,
        on_focus_in = <TypeDefs as super::Types>::on_focus_in,
        on_focus_out = <TypeDefs as super::Types>::on_focus_out,
        on_fullscreen_change = <TypeDefs as super::Types>::on_fullscreen_change,
        on_fullscreen_error = <TypeDefs as super::Types>::on_fullscreen_error,
        on_key_down = <TypeDefs as super::Types>::on_key_down,
        on_key_up = <TypeDefs as super::Types>::on_key_up,
        on_aux_click = <TypeDefs as super::Types>::on_aux_click,
        on_click = <TypeDefs as super::Types>::on_click,
        on_context_menu = <TypeDefs as super::Types>::on_context_menu,
        on_double_click = <TypeDefs as super::Types>::on_double_click,
        on_mouse_down = <TypeDefs as super::Types>::on_mouse_down,
        on_mouse_enter = <TypeDefs as super::Types>::on_mouse_enter,
        on_mouse_leave = <TypeDefs as super::Types>::on_mouse_leave,
        on_mouse_move = <TypeDefs as super::Types>::on_mouse_move,
        on_mouse_out = <TypeDefs as super::Types>::on_mouse_out,
        on_mouse_over = <TypeDefs as super::Types>::on_mouse_over,
        on_mouse_up = <TypeDefs as super::Types>::on_mouse_up,
        on_touch_cancel = <TypeDefs as super::Types>::on_touch_cancel,
        on_touch_end = <TypeDefs as super::Types>::on_touch_end,
        on_touch_move = <TypeDefs as super::Types>::on_touch_move,
        on_touch_start = <TypeDefs as super::Types>::on_touch_start,
    >;
    pub type on_composition_start<TypeDefs, Value> = dyn super::Types<
        children = <TypeDefs as super::Types>::children,
        class = <TypeDefs as super::Types>::class,
        id = <TypeDefs as super::Types>::id,
        part = <TypeDefs as super::Types>::part,
        on_cancel = <TypeDefs as super::Types>::on_cancel,
        on_error = <TypeDefs as super::Types>::on_error,
        on_scroll = <TypeDefs as super::Types>::on_scroll,
        on_security_policy_violation = <TypeDefs as super::Types>::on_security_policy_violation,
        on_select = <TypeDefs as super::Types>::on_select,
        on_wheel = <TypeDefs as super::Types>::on_wheel,
        on_copy = <TypeDefs as super::Types>::on_copy,
        on_cut = <TypeDefs as super::Types>::on_cut,
        on_paste = <TypeDefs as super::Types>::on_paste,
        on_composition_end = <TypeDefs as super::Types>::on_composition_end,
        on_composition_start = Value,
        on_composition_update = <TypeDefs as super::Types>::on_composition_update,
        on_blur = <TypeDefs as super::Types>::on_blur,
        on_focus = <TypeDefs as super::Types>::on_focus,
        on_focus_in = <TypeDefs as super::Types>::on_focus_in,
        on_focus_out = <TypeDefs as super::Types>::on_focus_out,
        on_fullscreen_change = <TypeDefs as super::Types>::on_fullscreen_change,
        on_fullscreen_error = <TypeDefs as super::Types>::on_fullscreen_error,
        on_key_down = <TypeDefs as super::Types>::on_key_down,
        on_key_up = <TypeDefs as super::Types>::on_key_up,
        on_aux_click = <TypeDefs as super::Types>::on_aux_click,
        on_click = <TypeDefs as super::Types>::on_click,
        on_context_menu = <TypeDefs as super::Types>::on_context_menu,
        on_double_click = <TypeDefs as super::Types>::on_double_click,
        on_mouse_down = <TypeDefs as super::Types>::on_mouse_down,
        on_mouse_enter = <TypeDefs as super::Types>::on_mouse_enter,
        on_mouse_leave = <TypeDefs as super::Types>::on_mouse_leave,
        on_mouse_move = <TypeDefs as super::Types>::on_mouse_move,
        on_mouse_out = <TypeDefs as super::Types>::on_mouse_out,
        on_mouse_over = <TypeDefs as super::Types>::on_mouse_over,
        on_mouse_up = <TypeDefs as super::Types>::on_mouse_up,
        on_touch_cancel = <TypeDefs as super::Types>::on_touch_cancel,
        on_touch_end = <TypeDefs as super::Types>::on_touch_end,
        on_touch_move = <TypeDefs as super::Types>::on_touch_move,
        on_touch_start = <TypeDefs as super::Types>::on_touch_start,
    >;
    pub type on_composition_update<TypeDefs, Value> = dyn super::Types<
        children = <TypeDefs as super::Types>::children,
        class = <TypeDefs as super::Types>::class,
        id = <TypeDefs as super::Types>::id,
        part = <TypeDefs as super::Types>::part,
        on_cancel = <TypeDefs as super::Types>::on_cancel,
        on_error = <TypeDefs as super::Types>::on_error,
        on_scroll = <TypeDefs as super::Types>::on_scroll,
        on_security_policy_violation = <TypeDefs as super::Types>::on_security_policy_violation,
        on_select = <TypeDefs as super::Types>::on_select,
        on_wheel = <TypeDefs as super::Types>::on_wheel,
        on_copy = <TypeDefs as super::Types>::on_copy,
        on_cut = <TypeDefs as super::Types>::on_cut,
        on_paste = <TypeDefs as super::Types>::on_paste,
        on_composition_end = <TypeDefs as super::Types>::on_composition_end,
        on_composition_start = <TypeDefs as super::Types>::on_composition_start,
        on_composition_update = Value,
        on_blur = <TypeDefs as super::Types>::on_blur,
        on_focus = <TypeDefs as super::Types>::on_focus,
        on_focus_in = <TypeDefs as super::Types>::on_focus_in,
        on_focus_out = <TypeDefs as super::Types>::on_focus_out,
        on_fullscreen_change = <TypeDefs as super::Types>::on_fullscreen_change,
        on_fullscreen_error = <TypeDefs as super::Types>::on_fullscreen_error,
        on_key_down = <TypeDefs as super::Types>::on_key_down,
        on_key_up = <TypeDefs as super::Types>::on_key_up,
        on_aux_click = <TypeDefs as super::Types>::on_aux_click,
        on_click = <TypeDefs as super::Types>::on_click,
        on_context_menu = <TypeDefs as super::Types>::on_context_menu,
        on_double_click = <TypeDefs as super::Types>::on_double_click,
        on_mouse_down = <TypeDefs as super::Types>::on_mouse_down,
        on_mouse_enter = <TypeDefs as super::Types>::on_mouse_enter,
        on_mouse_leave = <TypeDefs as super::Types>::on_mouse_leave,
        on_mouse_move = <TypeDefs as super::Types>::on_mouse_move,
        on_mouse_out = <TypeDefs as super::Types>::on_mouse_out,
        on_mouse_over = <TypeDefs as super::Types>::on_mouse_over,
        on_mouse_up = <TypeDefs as super::Types>::on_mouse_up,
        on_touch_cancel = <TypeDefs as super::Types>::on_touch_cancel,
        on_touch_end = <TypeDefs as super::Types>::on_touch_end,
        on_touch_move = <TypeDefs as super::Types>::on_touch_move,
        on_touch_start = <TypeDefs as super::Types>::on_touch_start,
    >;
    pub type on_blur<TypeDefs, Value> = dyn super::Types<
        children = <TypeDefs as super::Types>::children,
        class = <TypeDefs as super::Types>::class,
        id = <TypeDefs as super::Types>::id,
        part = <TypeDefs as super::Types>::part,
        on_cancel = <TypeDefs as super::Types>::on_cancel,
        on_error = <TypeDefs as super::Types>::on_error,
        on_scroll = <TypeDefs as super::Types>::on_scroll,
        on_security_policy_violation = <TypeDefs as super::Types>::on_security_policy_violation,
        on_select = <TypeDefs as super::Types>::on_select,
        on_wheel = <TypeDefs as super::Types>::on_wheel,
        on_copy = <TypeDefs as super::Types>::on_copy,
        on_cut = <TypeDefs as super::Types>::on_cut,
        on_paste = <TypeDefs as super::Types>::on_paste,
        on_composition_end = <TypeDefs as super::Types>::on_composition_end,
        on_composition_start = <TypeDefs as super::Types>::on_composition_start,
        on_composition_update = <TypeDefs as super::Types>::on_composition_update,
        on_blur = Value,
        on_focus = <TypeDefs as super::Types>::on_focus,
        on_focus_in = <TypeDefs as super::Types>::on_focus_in,
        on_focus_out = <TypeDefs as super::Types>::on_focus_out,
        on_fullscreen_change = <TypeDefs as super::Types>::on_fullscreen_change,
        on_fullscreen_error = <TypeDefs as super::Types>::on_fullscreen_error,
        on_key_down = <TypeDefs as super::Types>::on_key_down,
        on_key_up = <TypeDefs as super::Types>::on_key_up,
        on_aux_click = <TypeDefs as super::Types>::on_aux_click,
        on_click = <TypeDefs as super::Types>::on_click,
        on_context_menu = <TypeDefs as super::Types>::on_context_menu,
        on_double_click = <TypeDefs as super::Types>::on_double_click,
        on_mouse_down = <TypeDefs as super::Types>::on_mouse_down,
        on_mouse_enter = <TypeDefs as super::Types>::on_mouse_enter,
        on_mouse_leave = <TypeDefs as super::Types>::on_mouse_leave,
        on_mouse_move = <TypeDefs as super::Types>::on_mouse_move,
        on_mouse_out = <TypeDefs as super::Types>::on_mouse_out,
        on_mouse_over = <TypeDefs as super::Types>::on_mouse_over,
        on_mouse_up = <TypeDefs as super::Types>::on_mouse_up,
        on_touch_cancel = <TypeDefs as super::Types>::on_touch_cancel,
        on_touch_end = <TypeDefs as super::Types>::on_touch_end,
        on_touch_move = <TypeDefs as super::Types>::on_touch_move,
        on_touch_start = <TypeDefs as super::Types>::on_touch_start,
    >;
    pub type on_focus<TypeDefs, Value> = dyn super::Types<
        children = <TypeDefs as super::Types>::children,
        class = <TypeDefs as super::Types>::class,
        id = <TypeDefs as super::Types>::id,
        part = <TypeDefs as super::Types>::part,
        on_cancel = <TypeDefs as super::Types>::on_cancel,
        on_error = <TypeDefs as super::Types>::on_error,
        on_scroll = <TypeDefs as super::Types>::on_scroll,
        on_security_policy_violation = <TypeDefs as super::Types>::on_security_policy_violation,
        on_select = <TypeDefs as super::Types>::on_select,
        on_wheel = <TypeDefs as super::Types>::on_wheel,
        on_copy = <TypeDefs as super::Types>::on_copy,
        on_cut = <TypeDefs as super::Types>::on_cut,
        on_paste = <TypeDefs as super::Types>::on_paste,
        on_composition_end = <TypeDefs as super::Types>::on_composition_end,
        on_composition_start = <TypeDefs as super::Types>::on_composition_start,
        on_composition_update = <TypeDefs as super::Types>::on_composition_update,
        on_blur = <TypeDefs as super::Types>::on_blur,
        on_focus = Value,
        on_focus_in = <TypeDefs as super::Types>::on_focus_in,
        on_focus_out = <TypeDefs as super::Types>::on_focus_out,
        on_fullscreen_change = <TypeDefs as super::Types>::on_fullscreen_change,
        on_fullscreen_error = <TypeDefs as super::Types>::on_fullscreen_error,
        on_key_down = <TypeDefs as super::Types>::on_key_down,
        on_key_up = <TypeDefs as super::Types>::on_key_up,
        on_aux_click = <TypeDefs as super::Types>::on_aux_click,
        on_click = <TypeDefs as super::Types>::on_click,
        on_context_menu = <TypeDefs as super::Types>::on_context_menu,
        on_double_click = <TypeDefs as super::Types>::on_double_click,
        on_mouse_down = <TypeDefs as super::Types>::on_mouse_down,
        on_mouse_enter = <TypeDefs as super::Types>::on_mouse_enter,
        on_mouse_leave = <TypeDefs as super::Types>::on_mouse_leave,
        on_mouse_move = <TypeDefs as super::Types>::on_mouse_move,
        on_mouse_out = <TypeDefs as super::Types>::on_mouse_out,
        on_mouse_over = <TypeDefs as super::Types>::on_mouse_over,
        on_mouse_up = <TypeDefs as super::Types>::on_mouse_up,
        on_touch_cancel = <TypeDefs as super::Types>::on_touch_cancel,
        on_touch_end = <TypeDefs as super::Types>::on_touch_end,
        on_touch_move = <TypeDefs as super::Types>::on_touch_move,
        on_touch_start = <TypeDefs as super::Types>::on_touch_start,
    >;
    pub type on_focus_in<TypeDefs, Value> = dyn super::Types<
        children = <TypeDefs as super::Types>::children,
        class = <TypeDefs as super::Types>::class,
        id = <TypeDefs as super::Types>::id,
        part = <TypeDefs as super::Types>::part,
        on_cancel = <TypeDefs as super::Types>::on_cancel,
        on_error = <TypeDefs as super::Types>::on_error,
        on_scroll = <TypeDefs as super::Types>::on_scroll,
        on_security_policy_violation = <TypeDefs as super::Types>::on_security_policy_violation,
        on_select = <TypeDefs as super::Types>::on_select,
        on_wheel = <TypeDefs as super::Types>::on_wheel,
        on_copy = <TypeDefs as super::Types>::on_copy,
        on_cut = <TypeDefs as super::Types>::on_cut,
        on_paste = <TypeDefs as super::Types>::on_paste,
        on_composition_end = <TypeDefs as super::Types>::on_composition_end,
        on_composition_start = <TypeDefs as super::Types>::on_composition_start,
        on_composition_update = <TypeDefs as super::Types>::on_composition_update,
        on_blur = <TypeDefs as super::Types>::on_blur,
        on_focus = <TypeDefs as super::Types>::on_focus,
        on_focus_in = Value,
        on_focus_out = <TypeDefs as super::Types>::on_focus_out,
        on_fullscreen_change = <TypeDefs as super::Types>::on_fullscreen_change,
        on_fullscreen_error = <TypeDefs as super::Types>::on_fullscreen_error,
        on_key_down = <TypeDefs as super::Types>::on_key_down,
        on_key_up = <TypeDefs as super::Types>::on_key_up,
        on_aux_click = <TypeDefs as super::Types>::on_aux_click,
        on_click = <TypeDefs as super::Types>::on_click,
        on_context_menu = <TypeDefs as super::Types>::on_context_menu,
        on_double_click = <TypeDefs as super::Types>::on_double_click,
        on_mouse_down = <TypeDefs as super::Types>::on_mouse_down,
        on_mouse_enter = <TypeDefs as super::Types>::on_mouse_enter,
        on_mouse_leave = <TypeDefs as super::Types>::on_mouse_leave,
        on_mouse_move = <TypeDefs as super::Types>::on_mouse_move,
        on_mouse_out = <TypeDefs as super::Types>::on_mouse_out,
        on_mouse_over = <TypeDefs as super::Types>::on_mouse_over,
        on_mouse_up = <TypeDefs as super::Types>::on_mouse_up,
        on_touch_cancel = <TypeDefs as super::Types>::on_touch_cancel,
        on_touch_end = <TypeDefs as super::Types>::on_touch_end,
        on_touch_move = <TypeDefs as super::Types>::on_touch_move,
        on_touch_start = <TypeDefs as super::Types>::on_touch_start,
    >;
    pub type on_focus_out<TypeDefs, Value> = dyn super::Types<
        children = <TypeDefs as super::Types>::children,
        class = <TypeDefs as super::Types>::class,
        id = <TypeDefs as super::Types>::id,
        part = <TypeDefs as super::Types>::part,
        on_cancel = <TypeDefs as super::Types>::on_cancel,
        on_error = <TypeDefs as super::Types>::on_error,
        on_scroll = <TypeDefs as super::Types>::on_scroll,
        on_security_policy_violation = <TypeDefs as super::Types>::on_security_policy_violation,
        on_select = <TypeDefs as super::Types>::on_select,
        on_wheel = <TypeDefs as super::Types>::on_wheel,
        on_copy = <TypeDefs as super::Types>::on_copy,
        on_cut = <TypeDefs as super::Types>::on_cut,
        on_paste = <TypeDefs as super::Types>::on_paste,
        on_composition_end = <TypeDefs as super::Types>::on_composition_end,
        on_composition_start = <TypeDefs as super::Types>::on_composition_start,
        on_composition_update = <TypeDefs as super::Types>::on_composition_update,
        on_blur = <TypeDefs as super::Types>::on_blur,
        on_focus = <TypeDefs as super::Types>::on_focus,
        on_focus_in = <TypeDefs as super::Types>::on_focus_in,
        on_focus_out = Value,
        on_fullscreen_change = <TypeDefs as super::Types>::on_fullscreen_change,
        on_fullscreen_error = <TypeDefs as super::Types>::on_fullscreen_error,
        on_key_down = <TypeDefs as super::Types>::on_key_down,
        on_key_up = <TypeDefs as super::Types>::on_key_up,
        on_aux_click = <TypeDefs as super::Types>::on_aux_click,
        on_click = <TypeDefs as super::Types>::on_click,
        on_context_menu = <TypeDefs as super::Types>::on_context_menu,
        on_double_click = <TypeDefs as super::Types>::on_double_click,
        on_mouse_down = <TypeDefs as super::Types>::on_mouse_down,
        on_mouse_enter = <TypeDefs as super::Types>::on_mouse_enter,
        on_mouse_leave = <TypeDefs as super::Types>::on_mouse_leave,
        on_mouse_move = <TypeDefs as super::Types>::on_mouse_move,
        on_mouse_out = <TypeDefs as super::Types>::on_mouse_out,
        on_mouse_over = <TypeDefs as super::Types>::on_mouse_over,
        on_mouse_up = <TypeDefs as super::Types>::on_mouse_up,
        on_touch_cancel = <TypeDefs as super::Types>::on_touch_cancel,
        on_touch_end = <TypeDefs as super::Types>::on_touch_end,
        on_touch_move = <TypeDefs as super::Types>::on_touch_move,
        on_touch_start = <TypeDefs as super::Types>::on_touch_start,
    >;
    pub type on_fullscreen_change<TypeDefs, Value> = dyn super::Types<
        children = <TypeDefs as super::Types>::children,
        class = <TypeDefs as super::Types>::class,
        id = <TypeDefs as super::Types>::id,
        part = <TypeDefs as super::Types>::part,
        on_cancel = <TypeDefs as super::Types>::on_cancel,
        on_error = <TypeDefs as super::Types>::on_error,
        on_scroll = <TypeDefs as super::Types>::on_scroll,
        on_security_policy_violation = <TypeDefs as super::Types>::on_security_policy_violation,
        on_select = <TypeDefs as super::Types>::on_select,
        on_wheel = <TypeDefs as super::Types>::on_wheel,
        on_copy = <TypeDefs as super::Types>::on_copy,
        on_cut = <TypeDefs as super::Types>::on_cut,
        on_paste = <TypeDefs as super::Types>::on_paste,
        on_composition_end = <TypeDefs as super::Types>::on_composition_end,
        on_composition_start = <TypeDefs as super::Types>::on_composition_start,
        on_composition_update = <TypeDefs as super::Types>::on_composition_update,
        on_blur = <TypeDefs as super::Types>::on_blur,
        on_focus = <TypeDefs as super::Types>::on_focus,
        on_focus_in = <TypeDefs as super::Types>::on_focus_in,
        on_focus_out = <TypeDefs as super::Types>::on_focus_out,
        on_fullscreen_change = Value,
        on_fullscreen_error = <TypeDefs as super::Types>::on_fullscreen_error,
        on_key_down = <TypeDefs as super::Types>::on_key_down,
        on_key_up = <TypeDefs as super::Types>::on_key_up,
        on_aux_click = <TypeDefs as super::Types>::on_aux_click,
        on_click = <TypeDefs as super::Types>::on_click,
        on_context_menu = <TypeDefs as super::Types>::on_context_menu,
        on_double_click = <TypeDefs as super::Types>::on_double_click,
        on_mouse_down = <TypeDefs as super::Types>::on_mouse_down,
        on_mouse_enter = <TypeDefs as super::Types>::on_mouse_enter,
        on_mouse_leave = <TypeDefs as super::Types>::on_mouse_leave,
        on_mouse_move = <TypeDefs as super::Types>::on_mouse_move,
        on_mouse_out = <TypeDefs as super::Types>::on_mouse_out,
        on_mouse_over = <TypeDefs as super::Types>::on_mouse_over,
        on_mouse_up = <TypeDefs as super::Types>::on_mouse_up,
        on_touch_cancel = <TypeDefs as super::Types>::on_touch_cancel,
        on_touch_end = <TypeDefs as super::Types>::on_touch_end,
        on_touch_move = <TypeDefs as super::Types>::on_touch_move,
        on_touch_start = <TypeDefs as super::Types>::on_touch_start,
    >;
    pub type on_fullscreen_error<TypeDefs, Value> = dyn super::Types<
        children = <TypeDefs as super::Types>::children,
        class = <TypeDefs as super::Types>::class,
        id = <TypeDefs as super::Types>::id,
        part = <TypeDefs as super::Types>::part,
        on_cancel = <TypeDefs as super::Types>::on_cancel,
        on_error = <TypeDefs as super::Types>::on_error,
        on_scroll = <TypeDefs as super::Types>::on_scroll,
        on_security_policy_violation = <TypeDefs as super::Types>::on_security_policy_violation,
        on_select = <TypeDefs as super::Types>::on_select,
        on_wheel = <TypeDefs as super::Types>::on_wheel,
        on_copy = <TypeDefs as super::Types>::on_copy,
        on_cut = <TypeDefs as super::Types>::on_cut,
        on_paste = <TypeDefs as super::Types>::on_paste,
        on_composition_end = <TypeDefs as super::Types>::on_composition_end,
        on_composition_start = <TypeDefs as super::Types>::on_composition_start,
        on_composition_update = <TypeDefs as super::Types>::on_composition_update,
        on_blur = <TypeDefs as super::Types>::on_blur,
        on_focus = <TypeDefs as super::Types>::on_focus,
        on_focus_in = <TypeDefs as super::Types>::on_focus_in,
        on_focus_out = <TypeDefs as super::Types>::on_focus_out,
        on_fullscreen_change = <TypeDefs as super::Types>::on_fullscreen_change,
        on_fullscreen_error = Value,
        on_key_down = <TypeDefs as super::Types>::on_key_down,
        on_key_up = <TypeDefs as super::Types>::on_key_up,
        on_aux_click = <TypeDefs as super::Types>::on_aux_click,
        on_click = <TypeDefs as super::Types>::on_click,
        on_context_menu = <TypeDefs as super::Types>::on_context_menu,
        on_double_click = <TypeDefs as super::Types>::on_double_click,
        on_mouse_down = <TypeDefs as super::Types>::on_mouse_down,
        on_mouse_enter = <TypeDefs as super::Types>::on_mouse_enter,
        on_mouse_leave = <TypeDefs as super::Types>::on_mouse_leave,
        on_mouse_move = <TypeDefs as super::Types>::on_mouse_move,
        on_mouse_out = <TypeDefs as super::Types>::on_mouse_out,
        on_mouse_over = <TypeDefs as super::Types>::on_mouse_over,
        on_mouse_up = <TypeDefs as super::Types>::on_mouse_up,
        on_touch_cancel = <TypeDefs as super::Types>::on_touch_cancel,
        on_touch_end = <TypeDefs as super::Types>::on_touch_end,
        on_touch_move = <TypeDefs as super::Types>::on_touch_move,
        on_touch_start = <TypeDefs as super::Types>::on_touch_start,
    >;
    pub type on_key_down<TypeDefs, Value> = dyn super::Types<
        children = <TypeDefs as super::Types>::children,
        class = <TypeDefs as super::Types>::class,
        id = <TypeDefs as super::Types>::id,
        part = <TypeDefs as super::Types>::part,
        on_cancel = <TypeDefs as super::Types>::on_cancel,
        on_error = <TypeDefs as super::Types>::on_error,
        on_scroll = <TypeDefs as super::Types>::on_scroll,
        on_security_policy_violation = <TypeDefs as super::Types>::on_security_policy_violation,
        on_select = <TypeDefs as super::Types>::on_select,
        on_wheel = <TypeDefs as super::Types>::on_wheel,
        on_copy = <TypeDefs as super::Types>::on_copy,
        on_cut = <TypeDefs as super::Types>::on_cut,
        on_paste = <TypeDefs as super::Types>::on_paste,
        on_composition_end = <TypeDefs as super::Types>::on_composition_end,
        on_composition_start = <TypeDefs as super::Types>::on_composition_start,
        on_composition_update = <TypeDefs as super::Types>::on_composition_update,
        on_blur = <TypeDefs as super::Types>::on_blur,
        on_focus = <TypeDefs as super::Types>::on_focus,
        on_focus_in = <TypeDefs as super::Types>::on_focus_in,
        on_focus_out = <TypeDefs as super::Types>::on_focus_out,
        on_fullscreen_change = <TypeDefs as super::Types>::on_fullscreen_change,
        on_fullscreen_error = <TypeDefs as super::Types>::on_fullscreen_error,
        on_key_down = Value,
        on_key_up = <TypeDefs as super::Types>::on_key_up,
        on_aux_click = <TypeDefs as super::Types>::on_aux_click,
        on_click = <TypeDefs as super::Types>::on_click,
        on_context_menu = <TypeDefs as super::Types>::on_context_menu,
        on_double_click = <TypeDefs as super::Types>::on_double_click,
        on_mouse_down = <TypeDefs as super::Types>::on_mouse_down,
        on_mouse_enter = <TypeDefs as super::Types>::on_mouse_enter,
        on_mouse_leave = <TypeDefs as super::Types>::on_mouse_leave,
        on_mouse_move = <TypeDefs as super::Types>::on_mouse_move,
        on_mouse_out = <TypeDefs as super::Types>::on_mouse_out,
        on_mouse_over = <TypeDefs as super::Types>::on_mouse_over,
        on_mouse_up = <TypeDefs as super::Types>::on_mouse_up,
        on_touch_cancel = <TypeDefs as super::Types>::on_touch_cancel,
        on_touch_end = <TypeDefs as super::Types>::on_touch_end,
        on_touch_move = <TypeDefs as super::Types>::on_touch_move,
        on_touch_start = <TypeDefs as super::Types>::on_touch_start,
    >;
    pub type on_key_up<TypeDefs, Value> = dyn super::Types<
        children = <TypeDefs as super::Types>::children,
        class = <TypeDefs as super::Types>::class,
        id = <TypeDefs as super::Types>::id,
        part = <TypeDefs as super::Types>::part,
        on_cancel = <TypeDefs as super::Types>::on_cancel,
        on_error = <TypeDefs as super::Types>::on_error,
        on_scroll = <TypeDefs as super::Types>::on_scroll,
        on_security_policy_violation = <TypeDefs as super::Types>::on_security_policy_violation,
        on_select = <TypeDefs as super::Types>::on_select,
        on_wheel = <TypeDefs as super::Types>::on_wheel,
        on_copy = <TypeDefs as super::Types>::on_copy,
        on_cut = <TypeDefs as super::Types>::on_cut,
        on_paste = <TypeDefs as super::Types>::on_paste,
        on_composition_end = <TypeDefs as super::Types>::on_composition_end,
        on_composition_start = <TypeDefs as super::Types>::on_composition_start,
        on_composition_update = <TypeDefs as super::Types>::on_composition_update,
        on_blur = <TypeDefs as super::Types>::on_blur,
        on_focus = <TypeDefs as super::Types>::on_focus,
        on_focus_in = <TypeDefs as super::Types>::on_focus_in,
        on_focus_out = <TypeDefs as super::Types>::on_focus_out,
        on_fullscreen_change = <TypeDefs as super::Types>::on_fullscreen_change,
        on_fullscreen_error = <TypeDefs as super::Types>::on_fullscreen_error,
        on_key_down = <TypeDefs as super::Types>::on_key_down,
        on_key_up = Value,
        on_aux_click = <TypeDefs as super::Types>::on_aux_click,
        on_click = <TypeDefs as super::Types>::on_click,
        on_context_menu = <TypeDefs as super::Types>::on_context_menu,
        on_double_click = <TypeDefs as super::Types>::on_double_click,
        on_mouse_down = <TypeDefs as super::Types>::on_mouse_down,
        on_mouse_enter = <TypeDefs as super::Types>::on_mouse_enter,
        on_mouse_leave = <TypeDefs as super::Types>::on_mouse_leave,
        on_mouse_move = <TypeDefs as super::Types>::on_mouse_move,
        on_mouse_out = <TypeDefs as super::Types>::on_mouse_out,
        on_mouse_over = <TypeDefs as super::Types>::on_mouse_over,
        on_mouse_up = <TypeDefs as super::Types>::on_mouse_up,
        on_touch_cancel = <TypeDefs as super::Types>::on_touch_cancel,
        on_touch_end = <TypeDefs as super::Types>::on_touch_end,
        on_touch_move = <TypeDefs as super::Types>::on_touch_move,
        on_touch_start = <TypeDefs as super::Types>::on_touch_start,
    >;
    pub type on_aux_click<TypeDefs, Value> = dyn super::Types<
        children = <TypeDefs as super::Types>::children,
        class = <TypeDefs as super::Types>::class,
        id = <TypeDefs as super::Types>::id,
        part = <TypeDefs as super::Types>::part,
        on_cancel = <TypeDefs as super::Types>::on_cancel,
        on_error = <TypeDefs as super::Types>::on_error,
        on_scroll = <TypeDefs as super::Types>::on_scroll,
        on_security_policy_violation = <TypeDefs as super::Types>::on_security_policy_violation,
        on_select = <TypeDefs as super::Types>::on_select,
        on_wheel = <TypeDefs as super::Types>::on_wheel,
        on_copy = <TypeDefs as super::Types>::on_copy,
        on_cut = <TypeDefs as super::Types>::on_cut,
        on_paste = <TypeDefs as super::Types>::on_paste,
        on_composition_end = <TypeDefs as super::Types>::on_composition_end,
        on_composition_start = <TypeDefs as super::Types>::on_composition_start,
        on_composition_update = <TypeDefs as super::Types>::on_composition_update,
        on_blur = <TypeDefs as super::Types>::on_blur,
        on_focus = <TypeDefs as super::Types>::on_focus,
        on_focus_in = <TypeDefs as super::Types>::on_focus_in,
        on_focus_out = <TypeDefs as super::Types>::on_focus_out,
        on_fullscreen_change = <TypeDefs as super::Types>::on_fullscreen_change,
        on_fullscreen_error = <TypeDefs as super::Types>::on_fullscreen_error,
        on_key_down = <TypeDefs as super::Types>::on_key_down,
        on_key_up = <TypeDefs as super::Types>::on_key_up,
        on_aux_click = Value,
        on_click = <TypeDefs as super::Types>::on_click,
        on_context_menu = <TypeDefs as super::Types>::on_context_menu,
        on_double_click = <TypeDefs as super::Types>::on_double_click,
        on_mouse_down = <TypeDefs as super::Types>::on_mouse_down,
        on_mouse_enter = <TypeDefs as super::Types>::on_mouse_enter,
        on_mouse_leave = <TypeDefs as super::Types>::on_mouse_leave,
        on_mouse_move = <TypeDefs as super::Types>::on_mouse_move,
        on_mouse_out = <TypeDefs as super::Types>::on_mouse_out,
        on_mouse_over = <TypeDefs as super::Types>::on_mouse_over,
        on_mouse_up = <TypeDefs as super::Types>::on_mouse_up,
        on_touch_cancel = <TypeDefs as super::Types>::on_touch_cancel,
        on_touch_end = <TypeDefs as super::Types>::on_touch_end,
        on_touch_move = <TypeDefs as super::Types>::on_touch_move,
        on_touch_start = <TypeDefs as super::Types>::on_touch_start,
    >;
    pub type on_click<TypeDefs, Value> = dyn super::Types<
        children = <TypeDefs as super::Types>::children,
        class = <TypeDefs as super::Types>::class,
        id = <TypeDefs as super::Types>::id,
        part = <TypeDefs as super::Types>::part,
        on_cancel = <TypeDefs as super::Types>::on_cancel,
        on_error = <TypeDefs as super::Types>::on_error,
        on_scroll = <TypeDefs as super::Types>::on_scroll,
        on_security_policy_violation = <TypeDefs as super::Types>::on_security_policy_violation,
        on_select = <TypeDefs as super::Types>::on_select,
        on_wheel = <TypeDefs as super::Types>::on_wheel,
        on_copy = <TypeDefs as super::Types>::on_copy,
        on_cut = <TypeDefs as super::Types>::on_cut,
        on_paste = <TypeDefs as super::Types>::on_paste,
        on_composition_end = <TypeDefs as super::Types>::on_composition_end,
        on_composition_start = <TypeDefs as super::Types>::on_composition_start,
        on_composition_update = <TypeDefs as super::Types>::on_composition_update,
        on_blur = <TypeDefs as super::Types>::on_blur,
        on_focus = <TypeDefs as super::Types>::on_focus,
        on_focus_in = <TypeDefs as super::Types>::on_focus_in,
        on_focus_out = <TypeDefs as super::Types>::on_focus_out,
        on_fullscreen_change = <TypeDefs as super::Types>::on_fullscreen_change,
        on_fullscreen_error = <TypeDefs as super::Types>::on_fullscreen_error,
        on_key_down = <TypeDefs as super::Types>::on_key_down,
        on_key_up = <TypeDefs as super::Types>::on_key_up,
        on_aux_click = <TypeDefs as super::Types>::on_aux_click,
        on_click = Value,
        on_context_menu = <TypeDefs as super::Types>::on_context_menu,
        on_double_click = <TypeDefs as super::Types>::on_double_click,
        on_mouse_down = <TypeDefs as super::Types>::on_mouse_down,
        on_mouse_enter = <TypeDefs as super::Types>::on_mouse_enter,
        on_mouse_leave = <TypeDefs as super::Types>::on_mouse_leave,
        on_mouse_move = <TypeDefs as super::Types>::on_mouse_move,
        on_mouse_out = <TypeDefs as super::Types>::on_mouse_out,
        on_mouse_over = <TypeDefs as super::Types>::on_mouse_over,
        on_mouse_up = <TypeDefs as super::Types>::on_mouse_up,
        on_touch_cancel = <TypeDefs as super::Types>::on_touch_cancel,
        on_touch_end = <TypeDefs as super::Types>::on_touch_end,
        on_touch_move = <TypeDefs as super::Types>::on_touch_move,
        on_touch_start = <TypeDefs as super::Types>::on_touch_start,
    >;
    pub type on_context_menu<TypeDefs, Value> = dyn super::Types<
        children = <TypeDefs as super::Types>::children,
        class = <TypeDefs as super::Types>::class,
        id = <TypeDefs as super::Types>::id,
        part = <TypeDefs as super::Types>::part,
        on_cancel = <TypeDefs as super::Types>::on_cancel,
        on_error = <TypeDefs as super::Types>::on_error,
        on_scroll = <TypeDefs as super::Types>::on_scroll,
        on_security_policy_violation = <TypeDefs as super::Types>::on_security_policy_violation,
        on_select = <TypeDefs as super::Types>::on_select,
        on_wheel = <TypeDefs as super::Types>::on_wheel,
        on_copy = <TypeDefs as super::Types>::on_copy,
        on_cut = <TypeDefs as super::Types>::on_cut,
        on_paste = <TypeDefs as super::Types>::on_paste,
        on_composition_end = <TypeDefs as super::Types>::on_composition_end,
        on_composition_start = <TypeDefs as super::Types>::on_composition_start,
        on_composition_update = <TypeDefs as super::Types>::on_composition_update,
        on_blur = <TypeDefs as super::Types>::on_blur,
        on_focus = <TypeDefs as super::Types>::on_focus,
        on_focus_in = <TypeDefs as super::Types>::on_focus_in,
        on_focus_out = <TypeDefs as super::Types>::on_focus_out,
        on_fullscreen_change = <TypeDefs as super::Types>::on_fullscreen_change,
        on_fullscreen_error = <TypeDefs as super::Types>::on_fullscreen_error,
        on_key_down = <TypeDefs as super::Types>::on_key_down,
        on_key_up = <TypeDefs as super::Types>::on_key_up,
        on_aux_click = <TypeDefs as super::Types>::on_aux_click,
        on_click = <TypeDefs as super::Types>::on_click,
        on_context_menu = Value,
        on_double_click = <TypeDefs as super::Types>::on_double_click,
        on_mouse_down = <TypeDefs as super::Types>::on_mouse_down,
        on_mouse_enter = <TypeDefs as super::Types>::on_mouse_enter,
        on_mouse_leave = <TypeDefs as super::Types>::on_mouse_leave,
        on_mouse_move = <TypeDefs as super::Types>::on_mouse_move,
        on_mouse_out = <TypeDefs as super::Types>::on_mouse_out,
        on_mouse_over = <TypeDefs as super::Types>::on_mouse_over,
        on_mouse_up = <TypeDefs as super::Types>::on_mouse_up,
        on_touch_cancel = <TypeDefs as super::Types>::on_touch_cancel,
        on_touch_end = <TypeDefs as super::Types>::on_touch_end,
        on_touch_move = <TypeDefs as super::Types>::on_touch_move,
        on_touch_start = <TypeDefs as super::Types>::on_touch_start,
    >;
    pub type on_double_click<TypeDefs, Value> = dyn super::Types<
        children = <TypeDefs as super::Types>::children,
        class = <TypeDefs as super::Types>::class,
        id = <TypeDefs as super::Types>::id,
        part = <TypeDefs as super::Types>::part,
        on_cancel = <TypeDefs as super::Types>::on_cancel,
        on_error = <TypeDefs as super::Types>::on_error,
        on_scroll = <TypeDefs as super::Types>::on_scroll,
        on_security_policy_violation = <TypeDefs as super::Types>::on_security_policy_violation,
        on_select = <TypeDefs as super::Types>::on_select,
        on_wheel = <TypeDefs as super::Types>::on_wheel,
        on_copy = <TypeDefs as super::Types>::on_copy,
        on_cut = <TypeDefs as super::Types>::on_cut,
        on_paste = <TypeDefs as super::Types>::on_paste,
        on_composition_end = <TypeDefs as super::Types>::on_composition_end,
        on_composition_start = <TypeDefs as super::Types>::on_composition_start,
        on_composition_update = <TypeDefs as super::Types>::on_composition_update,
        on_blur = <TypeDefs as super::Types>::on_blur,
        on_focus = <TypeDefs as super::Types>::on_focus,
        on_focus_in = <TypeDefs as super::Types>::on_focus_in,
        on_focus_out = <TypeDefs as super::Types>::on_focus_out,
        on_fullscreen_change = <TypeDefs as super::Types>::on_fullscreen_change,
        on_fullscreen_error = <TypeDefs as super::Types>::on_fullscreen_error,
        on_key_down = <TypeDefs as super::Types>::on_key_down,
        on_key_up = <TypeDefs as super::Types>::on_key_up,
        on_aux_click = <TypeDefs as super::Types>::on_aux_click,
        on_click = <TypeDefs as super::Types>::on_click,
        on_context_menu = <TypeDefs as super::Types>::on_context_menu,
        on_double_click = Value,
        on_mouse_down = <TypeDefs as super::Types>::on_mouse_down,
        on_mouse_enter = <TypeDefs as super::Types>::on_mouse_enter,
        on_mouse_leave = <TypeDefs as super::Types>::on_mouse_leave,
        on_mouse_move = <TypeDefs as super::Types>::on_mouse_move,
        on_mouse_out = <TypeDefs as super::Types>::on_mouse_out,
        on_mouse_over = <TypeDefs as super::Types>::on_mouse_over,
        on_mouse_up = <TypeDefs as super::Types>::on_mouse_up,
        on_touch_cancel = <TypeDefs as super::Types>::on_touch_cancel,
        on_touch_end = <TypeDefs as super::Types>::on_touch_end,
        on_touch_move = <TypeDefs as super::Types>::on_touch_move,
        on_touch_start = <TypeDefs as super::Types>::on_touch_start,
    >;
    pub type on_mouse_down<TypeDefs, Value> = dyn super::Types<
        children = <TypeDefs as super::Types>::children,
        class = <TypeDefs as super::Types>::class,
        id = <TypeDefs as super::Types>::id,
        part = <TypeDefs as super::Types>::part,
        on_cancel = <TypeDefs as super::Types>::on_cancel,
        on_error = <TypeDefs as super::Types>::on_error,
        on_scroll = <TypeDefs as super::Types>::on_scroll,
        on_security_policy_violation = <TypeDefs as super::Types>::on_security_policy_violation,
        on_select = <TypeDefs as super::Types>::on_select,
        on_wheel = <TypeDefs as super::Types>::on_wheel,
        on_copy = <TypeDefs as super::Types>::on_copy,
        on_cut = <TypeDefs as super::Types>::on_cut,
        on_paste = <TypeDefs as super::Types>::on_paste,
        on_composition_end = <TypeDefs as super::Types>::on_composition_end,
        on_composition_start = <TypeDefs as super::Types>::on_composition_start,
        on_composition_update = <TypeDefs as super::Types>::on_composition_update,
        on_blur = <TypeDefs as super::Types>::on_blur,
        on_focus = <TypeDefs as super::Types>::on_focus,
        on_focus_in = <TypeDefs as super::Types>::on_focus_in,
        on_focus_out = <TypeDefs as super::Types>::on_focus_out,
        on_fullscreen_change = <TypeDefs as super::Types>::on_fullscreen_change,
        on_fullscreen_error = <TypeDefs as super::Types>::on_fullscreen_error,
        on_key_down = <TypeDefs as super::Types>::on_key_down,
        on_key_up = <TypeDefs as super::Types>::on_key_up,
        on_aux_click = <TypeDefs as super::Types>::on_aux_click,
        on_click = <TypeDefs as super::Types>::on_click,
        on_context_menu = <TypeDefs as super::Types>::on_context_menu,
        on_double_click = <TypeDefs as super::Types>::on_double_click,
        on_mouse_down = Value,
        on_mouse_enter = <TypeDefs as super::Types>::on_mouse_enter,
        on_mouse_leave = <TypeDefs as super::Types>::on_mouse_leave,
        on_mouse_move = <TypeDefs as super::Types>::on_mouse_move,
        on_mouse_out = <TypeDefs as super::Types>::on_mouse_out,
        on_mouse_over = <TypeDefs as super::Types>::on_mouse_over,
        on_mouse_up = <TypeDefs as super::Types>::on_mouse_up,
        on_touch_cancel = <TypeDefs as super::Types>::on_touch_cancel,
        on_touch_end = <TypeDefs as super::Types>::on_touch_end,
        on_touch_move = <TypeDefs as super::Types>::on_touch_move,
        on_touch_start = <TypeDefs as super::Types>::on_touch_start,
    >;
    pub type on_mouse_enter<TypeDefs, Value> = dyn super::Types<
        children = <TypeDefs as super::Types>::children,
        class = <TypeDefs as super::Types>::class,
        id = <TypeDefs as super::Types>::id,
        part = <TypeDefs as super::Types>::part,
        on_cancel = <TypeDefs as super::Types>::on_cancel,
        on_error = <TypeDefs as super::Types>::on_error,
        on_scroll = <TypeDefs as super::Types>::on_scroll,
        on_security_policy_violation = <TypeDefs as super::Types>::on_security_policy_violation,
        on_select = <TypeDefs as super::Types>::on_select,
        on_wheel = <TypeDefs as super::Types>::on_wheel,
        on_copy = <TypeDefs as super::Types>::on_copy,
        on_cut = <TypeDefs as super::Types>::on_cut,
        on_paste = <TypeDefs as super::Types>::on_paste,
        on_composition_end = <TypeDefs as super::Types>::on_composition_end,
        on_composition_start = <TypeDefs as super::Types>::on_composition_start,
        on_composition_update = <TypeDefs as super::Types>::on_composition_update,
        on_blur = <TypeDefs as super::Types>::on_blur,
        on_focus = <TypeDefs as super::Types>::on_focus,
        on_focus_in = <TypeDefs as super::Types>::on_focus_in,
        on_focus_out = <TypeDefs as super::Types>::on_focus_out,
        on_fullscreen_change = <TypeDefs as super::Types>::on_fullscreen_change,
        on_fullscreen_error = <TypeDefs as super::Types>::on_fullscreen_error,
        on_key_down = <TypeDefs as super::Types>::on_key_down,
        on_key_up = <TypeDefs as super::Types>::on_key_up,
        on_aux_click = <TypeDefs as super::Types>::on_aux_click,
        on_click = <TypeDefs as super::Types>::on_click,
        on_context_menu = <TypeDefs as super::Types>::on_context_menu,
        on_double_click = <TypeDefs as super::Types>::on_double_click,
        on_mouse_down = <TypeDefs as super::Types>::on_mouse_down,
        on_mouse_enter = Value,
        on_mouse_leave = <TypeDefs as super::Types>::on_mouse_leave,
        on_mouse_move = <TypeDefs as super::Types>::on_mouse_move,
        on_mouse_out = <TypeDefs as super::Types>::on_mouse_out,
        on_mouse_over = <TypeDefs as super::Types>::on_mouse_over,
        on_mouse_up = <TypeDefs as super::Types>::on_mouse_up,
        on_touch_cancel = <TypeDefs as super::Types>::on_touch_cancel,
        on_touch_end = <TypeDefs as super::Types>::on_touch_end,
        on_touch_move = <TypeDefs as super::Types>::on_touch_move,
        on_touch_start = <TypeDefs as super::Types>::on_touch_start,
    >;
    pub type on_mouse_leave<TypeDefs, Value> = dyn super::Types<
        children = <TypeDefs as super::Types>::children,
        class = <TypeDefs as super::Types>::class,
        id = <TypeDefs as super::Types>::id,
        part = <TypeDefs as super::Types>::part,
        on_cancel = <TypeDefs as super::Types>::on_cancel,
        on_error = <TypeDefs as super::Types>::on_error,
        on_scroll = <TypeDefs as super::Types>::on_scroll,
        on_security_policy_violation = <TypeDefs as super::Types>::on_security_policy_violation,
        on_select = <TypeDefs as super::Types>::on_select,
        on_wheel = <TypeDefs as super::Types>::on_wheel,
        on_copy = <TypeDefs as super::Types>::on_copy,
        on_cut = <TypeDefs as super::Types>::on_cut,
        on_paste = <TypeDefs as super::Types>::on_paste,
        on_composition_end = <TypeDefs as super::Types>::on_composition_end,
        on_composition_start = <TypeDefs as super::Types>::on_composition_start,
        on_composition_update = <TypeDefs as super::Types>::on_composition_update,
        on_blur = <TypeDefs as super::Types>::on_blur,
        on_focus = <TypeDefs as super::Types>::on_focus,
        on_focus_in = <TypeDefs as super::Types>::on_focus_in,
        on_focus_out = <TypeDefs as super::Types>::on_focus_out,
        on_fullscreen_change = <TypeDefs as super::Types>::on_fullscreen_change,
        on_fullscreen_error = <TypeDefs as super::Types>::on_fullscreen_error,
        on_key_down = <TypeDefs as super::Types>::on_key_down,
        on_key_up = <TypeDefs as super::Types>::on_key_up,
        on_aux_click = <TypeDefs as super::Types>::on_aux_click,
        on_click = <TypeDefs as super::Types>::on_click,
        on_context_menu = <TypeDefs as super::Types>::on_context_menu,
        on_double_click = <TypeDefs as super::Types>::on_double_click,
        on_mouse_down = <TypeDefs as super::Types>::on_mouse_down,
        on_mouse_enter = <TypeDefs as super::Types>::on_mouse_enter,
        on_mouse_leave = Value,
        on_mouse_move = <TypeDefs as super::Types>::on_mouse_move,
        on_mouse_out = <TypeDefs as super::Types>::on_mouse_out,
        on_mouse_over = <TypeDefs as super::Types>::on_mouse_over,
        on_mouse_up = <TypeDefs as super::Types>::on_mouse_up,
        on_touch_cancel = <TypeDefs as super::Types>::on_touch_cancel,
        on_touch_end = <TypeDefs as super::Types>::on_touch_end,
        on_touch_move = <TypeDefs as super::Types>::on_touch_move,
        on_touch_start = <TypeDefs as super::Types>::on_touch_start,
    >;
    pub type on_mouse_move<TypeDefs, Value> = dyn super::Types<
        children = <TypeDefs as super::Types>::children,
        class = <TypeDefs as super::Types>::class,
        id = <TypeDefs as super::Types>::id,
        part = <TypeDefs as super::Types>::part,
        on_cancel = <TypeDefs as super::Types>::on_cancel,
        on_error = <TypeDefs as super::Types>::on_error,
        on_scroll = <TypeDefs as super::Types>::on_scroll,
        on_security_policy_violation = <TypeDefs as super::Types>::on_security_policy_violation,
        on_select = <TypeDefs as super::Types>::on_select,
        on_wheel = <TypeDefs as super::Types>::on_wheel,
        on_copy = <TypeDefs as super::Types>::on_copy,
        on_cut = <TypeDefs as super::Types>::on_cut,
        on_paste = <TypeDefs as super::Types>::on_paste,
        on_composition_end = <TypeDefs as super::Types>::on_composition_end,
        on_composition_start = <TypeDefs as super::Types>::on_composition_start,
        on_composition_update = <TypeDefs as super::Types>::on_composition_update,
        on_blur = <TypeDefs as super::Types>::on_blur,
        on_focus = <TypeDefs as super::Types>::on_focus,
        on_focus_in = <TypeDefs as super::Types>::on_focus_in,
        on_focus_out = <TypeDefs as super::Types>::on_focus_out,
        on_fullscreen_change = <TypeDefs as super::Types>::on_fullscreen_change,
        on_fullscreen_error = <TypeDefs as super::Types>::on_fullscreen_error,
        on_key_down = <TypeDefs as super::Types>::on_key_down,
        on_key_up = <TypeDefs as super::Types>::on_key_up,
        on_aux_click = <TypeDefs as super::Types>::on_aux_click,
        on_click = <TypeDefs as super::Types>::on_click,
        on_context_menu = <TypeDefs as super::Types>::on_context_menu,
        on_double_click = <TypeDefs as super::Types>::on_double_click,
        on_mouse_down = <TypeDefs as super::Types>::on_mouse_down,
        on_mouse_enter = <TypeDefs as super::Types>::on_mouse_enter,
        on_mouse_leave = <TypeDefs as super::Types>::on_mouse_leave,
        on_mouse_move = Value,
        on_mouse_out = <TypeDefs as super::Types>::on_mouse_out,
        on_mouse_over = <TypeDefs as super::Types>::on_mouse_over,
        on_mouse_up = <TypeDefs as super::Types>::on_mouse_up,
        on_touch_cancel = <TypeDefs as super::Types>::on_touch_cancel,
        on_touch_end = <TypeDefs as super::Types>::on_touch_end,
        on_touch_move = <TypeDefs as super::Types>::on_touch_move,
        on_touch_start = <TypeDefs as super::Types>::on_touch_start,
    >;
    pub type on_mouse_out<TypeDefs, Value> = dyn super::Types<
        children = <TypeDefs as super::Types>::children,
        class = <TypeDefs as super::Types>::class,
        id = <TypeDefs as super::Types>::id,
        part = <TypeDefs as super::Types>::part,
        on_cancel = <TypeDefs as super::Types>::on_cancel,
        on_error = <TypeDefs as super::Types>::on_error,
        on_scroll = <TypeDefs as super::Types>::on_scroll,
        on_security_policy_violation = <TypeDefs as super::Types>::on_security_policy_violation,
        on_select = <TypeDefs as super::Types>::on_select,
        on_wheel = <TypeDefs as super::Types>::on_wheel,
        on_copy = <TypeDefs as super::Types>::on_copy,
        on_cut = <TypeDefs as super::Types>::on_cut,
        on_paste = <TypeDefs as super::Types>::on_paste,
        on_composition_end = <TypeDefs as super::Types>::on_composition_end,
        on_composition_start = <TypeDefs as super::Types>::on_composition_start,
        on_composition_update = <TypeDefs as super::Types>::on_composition_update,
        on_blur = <TypeDefs as super::Types>::on_blur,
        on_focus = <TypeDefs as super::Types>::on_focus,
        on_focus_in = <TypeDefs as super::Types>::on_focus_in,
        on_focus_out = <TypeDefs as super::Types>::on_focus_out,
        on_fullscreen_change = <TypeDefs as super::Types>::on_fullscreen_change,
        on_fullscreen_error = <TypeDefs as super::Types>::on_fullscreen_error,
        on_key_down = <TypeDefs as super::Types>::on_key_down,
        on_key_up = <TypeDefs as super::Types>::on_key_up,
        on_aux_click = <TypeDefs as super::Types>::on_aux_click,
        on_click = <TypeDefs as super::Types>::on_click,
        on_context_menu = <TypeDefs as super::Types>::on_context_menu,
        on_double_click = <TypeDefs as super::Types>::on_double_click,
        on_mouse_down = <TypeDefs as super::Types>::on_mouse_down,
        on_mouse_enter = <TypeDefs as super::Types>::on_mouse_enter,
        on_mouse_leave = <TypeDefs as super::Types>::on_mouse_leave,
        on_mouse_move = <TypeDefs as super::Types>::on_mouse_move,
        on_mouse_out = Value,
        on_mouse_over = <TypeDefs as super::Types>::on_mouse_over,
        on_mouse_up = <TypeDefs as super::Types>::on_mouse_up,
        on_touch_cancel = <TypeDefs as super::Types>::on_touch_cancel,
        on_touch_end = <TypeDefs as super::Types>::on_touch_end,
        on_touch_move = <TypeDefs as super::Types>::on_touch_move,
        on_touch_start = <TypeDefs as super::Types>::on_touch_start,
    >;
    pub type on_mouse_over<TypeDefs, Value> = dyn super::Types<
        children = <TypeDefs as super::Types>::children,
        class = <TypeDefs as super::Types>::class,
        id = <TypeDefs as super::Types>::id,
        part = <TypeDefs as super::Types>::part,
        on_cancel = <TypeDefs as super::Types>::on_cancel,
        on_error = <TypeDefs as super::Types>::on_error,
        on_scroll = <TypeDefs as super::Types>::on_scroll,
        on_security_policy_violation = <TypeDefs as super::Types>::on_security_policy_violation,
        on_select = <TypeDefs as super::Types>::on_select,
        on_wheel = <TypeDefs as super::Types>::on_wheel,
        on_copy = <TypeDefs as super::Types>::on_copy,
        on_cut = <TypeDefs as super::Types>::on_cut,
        on_paste = <TypeDefs as super::Types>::on_paste,
        on_composition_end = <TypeDefs as super::Types>::on_composition_end,
        on_composition_start = <TypeDefs as super::Types>::on_composition_start,
        on_composition_update = <TypeDefs as super::Types>::on_composition_update,
        on_blur = <TypeDefs as super::Types>::on_blur,
        on_focus = <TypeDefs as super::Types>::on_focus,
        on_focus_in = <TypeDefs as super::Types>::on_focus_in,
        on_focus_out = <TypeDefs as super::Types>::on_focus_out,
        on_fullscreen_change = <TypeDefs as super::Types>::on_fullscreen_change,
        on_fullscreen_error = <TypeDefs as super::Types>::on_fullscreen_error,
        on_key_down = <TypeDefs as super::Types>::on_key_down,
        on_key_up = <TypeDefs as super::Types>::on_key_up,
        on_aux_click = <TypeDefs as super::Types>::on_aux_click,
        on_click = <TypeDefs as super::Types>::on_click,
        on_context_menu = <TypeDefs as super::Types>::on_context_menu,
        on_double_click = <TypeDefs as super::Types>::on_double_click,
        on_mouse_down = <TypeDefs as super::Types>::on_mouse_down,
        on_mouse_enter = <TypeDefs as super::Types>::on_mouse_enter,
        on_mouse_leave = <TypeDefs as super::Types>::on_mouse_leave,
        on_mouse_move = <TypeDefs as super::Types>::on_mouse_move,
        on_mouse_out = <TypeDefs as super::Types>::on_mouse_out,
        on_mouse_over = Value,
        on_mouse_up = <TypeDefs as super::Types>::on_mouse_up,
        on_touch_cancel = <TypeDefs as super::Types>::on_touch_cancel,
        on_touch_end = <TypeDefs as super::Types>::on_touch_end,
        on_touch_move = <TypeDefs as super::Types>::on_touch_move,
        on_touch_start = <TypeDefs as super::Types>::on_touch_start,
    >;
    pub type on_mouse_up<TypeDefs, Value> = dyn super::Types<
        children = <TypeDefs as super::Types>::children,
        class = <TypeDefs as super::Types>::class,
        id = <TypeDefs as super::Types>::id,
        part = <TypeDefs as super::Types>::part,
        on_cancel = <TypeDefs as super::Types>::on_cancel,
        on_error = <TypeDefs as super::Types>::on_error,
        on_scroll = <TypeDefs as super::Types>::on_scroll,
        on_security_policy_violation = <TypeDefs as super::Types>::on_security_policy_violation,
        on_select = <TypeDefs as super::Types>::on_select,
        on_wheel = <TypeDefs as super::Types>::on_wheel,
        on_copy = <TypeDefs as super::Types>::on_copy,
        on_cut = <TypeDefs as super::Types>::on_cut,
        on_paste = <TypeDefs as super::Types>::on_paste,
        on_composition_end = <TypeDefs as super::Types>::on_composition_end,
        on_composition_start = <TypeDefs as super::Types>::on_composition_start,
        on_composition_update = <TypeDefs as super::Types>::on_composition_update,
        on_blur = <TypeDefs as super::Types>::on_blur,
        on_focus = <TypeDefs as super::Types>::on_focus,
        on_focus_in = <TypeDefs as super::Types>::on_focus_in,
        on_focus_out = <TypeDefs as super::Types>::on_focus_out,
        on_fullscreen_change = <TypeDefs as super::Types>::on_fullscreen_change,
        on_fullscreen_error = <TypeDefs as super::Types>::on_fullscreen_error,
        on_key_down = <TypeDefs as super::Types>::on_key_down,
        on_key_up = <TypeDefs as super::Types>::on_key_up,
        on_aux_click = <TypeDefs as super::Types>::on_aux_click,
        on_click = <TypeDefs as super::Types>::on_click,
        on_context_menu = <TypeDefs as super::Types>::on_context_menu,
        on_double_click = <TypeDefs as super::Types>::on_double_click,
        on_mouse_down = <TypeDefs as super::Types>::on_mouse_down,
        on_mouse_enter = <TypeDefs as super::Types>::on_mouse_enter,
        on_mouse_leave = <TypeDefs as super::Types>::on_mouse_leave,
        on_mouse_move = <TypeDefs as super::Types>::on_mouse_move,
        on_mouse_out = <TypeDefs as super::Types>::on_mouse_out,
        on_mouse_over = <TypeDefs as super::Types>::on_mouse_over,
        on_mouse_up = Value,
        on_touch_cancel = <TypeDefs as super::Types>::on_touch_cancel,
        on_touch_end = <TypeDefs as super::Types>::on_touch_end,
        on_touch_move = <TypeDefs as super::Types>::on_touch_move,
        on_touch_start = <TypeDefs as super::Types>::on_touch_start,
    >;
    pub type on_touch_cancel<TypeDefs, Value> = dyn super::Types<
        children = <TypeDefs as super::Types>::children,
        class = <TypeDefs as super::Types>::class,
        id = <TypeDefs as super::Types>::id,
        part = <TypeDefs as super::Types>::part,
        on_cancel = <TypeDefs as super::Types>::on_cancel,
        on_error = <TypeDefs as super::Types>::on_error,
        on_scroll = <TypeDefs as super::Types>::on_scroll,
        on_security_policy_violation = <TypeDefs as super::Types>::on_security_policy_violation,
        on_select = <TypeDefs as super::Types>::on_select,
        on_wheel = <TypeDefs as super::Types>::on_wheel,
        on_copy = <TypeDefs as super::Types>::on_copy,
        on_cut = <TypeDefs as super::Types>::on_cut,
        on_paste = <TypeDefs as super::Types>::on_paste,
        on_composition_end = <TypeDefs as super::Types>::on_composition_end,
        on_composition_start = <TypeDefs as super::Types>::on_composition_start,
        on_composition_update = <TypeDefs as super::Types>::on_composition_update,
        on_blur = <TypeDefs as super::Types>::on_blur,
        on_focus = <TypeDefs as super::Types>::on_focus,
        on_focus_in = <TypeDefs as super::Types>::on_focus_in,
        on_focus_out = <TypeDefs as super::Types>::on_focus_out,
        on_fullscreen_change = <TypeDefs as super::Types>::on_fullscreen_change,
        on_fullscreen_error = <TypeDefs as super::Types>::on_fullscreen_error,
        on_key_down = <TypeDefs as super::Types>::on_key_down,
        on_key_up = <TypeDefs as super::Types>::on_key_up,
        on_aux_click = <TypeDefs as super::Types>::on_aux_click,
        on_click = <TypeDefs as super::Types>::on_click,
        on_context_menu = <TypeDefs as super::Types>::on_context_menu,
        on_double_click = <TypeDefs as super::Types>::on_double_click,
        on_mouse_down = <TypeDefs as super::Types>::on_mouse_down,
        on_mouse_enter = <TypeDefs as super::Types>::on_mouse_enter,
        on_mouse_leave = <TypeDefs as super::Types>::on_mouse_leave,
        on_mouse_move = <TypeDefs as super::Types>::on_mouse_move,
        on_mouse_out = <TypeDefs as super::Types>::on_mouse_out,
        on_mouse_over = <TypeDefs as super::Types>::on_mouse_over,
        on_mouse_up = <TypeDefs as super::Types>::on_mouse_up,
        on_touch_cancel = Value,
        on_touch_end = <TypeDefs as super::Types>::on_touch_end,
        on_touch_move = <TypeDefs as super::Types>::on_touch_move,
        on_touch_start = <TypeDefs as super::Types>::on_touch_start,
    >;
    pub type on_touch_end<TypeDefs, Value> = dyn super::Types<
        children = <TypeDefs as super::Types>::children,
        class = <TypeDefs as super::Types>::class,
        id = <TypeDefs as super::Types>::id,
        part = <TypeDefs as super::Types>::part,
        on_cancel = <TypeDefs as super::Types>::on_cancel,
        on_error = <TypeDefs as super::Types>::on_error,
        on_scroll = <TypeDefs as super::Types>::on_scroll,
        on_security_policy_violation = <TypeDefs as super::Types>::on_security_policy_violation,
        on_select = <TypeDefs as super::Types>::on_select,
        on_wheel = <TypeDefs as super::Types>::on_wheel,
        on_copy = <TypeDefs as super::Types>::on_copy,
        on_cut = <TypeDefs as super::Types>::on_cut,
        on_paste = <TypeDefs as super::Types>::on_paste,
        on_composition_end = <TypeDefs as super::Types>::on_composition_end,
        on_composition_start = <TypeDefs as super::Types>::on_composition_start,
        on_composition_update = <TypeDefs as super::Types>::on_composition_update,
        on_blur = <TypeDefs as super::Types>::on_blur,
        on_focus = <TypeDefs as super::Types>::on_focus,
        on_focus_in = <TypeDefs as super::Types>::on_focus_in,
        on_focus_out = <TypeDefs as super::Types>::on_focus_out,
        on_fullscreen_change = <TypeDefs as super::Types>::on_fullscreen_change,
        on_fullscreen_error = <TypeDefs as super::Types>::on_fullscreen_error,
        on_key_down = <TypeDefs as super::Types>::on_key_down,
        on_key_up = <TypeDefs as super::Types>::on_key_up,
        on_aux_click = <TypeDefs as super::Types>::on_aux_click,
        on_click = <TypeDefs as super::Types>::on_click,
        on_context_menu = <TypeDefs as super::Types>::on_context_menu,
        on_double_click = <TypeDefs as super::Types>::on_double_click,
        on_mouse_down = <TypeDefs as super::Types>::on_mouse_down,
        on_mouse_enter = <TypeDefs as super::Types>::on_mouse_enter,
        on_mouse_leave = <TypeDefs as super::Types>::on_mouse_leave,
        on_mouse_move = <TypeDefs as super::Types>::on_mouse_move,
        on_mouse_out = <TypeDefs as super::Types>::on_mouse_out,
        on_mouse_over = <TypeDefs as super::Types>::on_mouse_over,
        on_mouse_up = <TypeDefs as super::Types>::on_mouse_up,
        on_touch_cancel = <TypeDefs as super::Types>::on_touch_cancel,
        on_touch_end = Value,
        on_touch_move = <TypeDefs as super::Types>::on_touch_move,
        on_touch_start = <TypeDefs as super::Types>::on_touch_start,
    >;
    pub type on_touch_move<TypeDefs, Value> = dyn super::Types<
        children = <TypeDefs as super::Types>::children,
        class = <TypeDefs as super::Types>::class,
        id = <TypeDefs as super::Types>::id,
        part = <TypeDefs as super::Types>::part,
        on_cancel = <TypeDefs as super::Types>::on_cancel,
        on_error = <TypeDefs as super::Types>::on_error,
        on_scroll = <TypeDefs as super::Types>::on_scroll,
        on_security_policy_violation = <TypeDefs as super::Types>::on_security_policy_violation,
        on_select = <TypeDefs as super::Types>::on_select,
        on_wheel = <TypeDefs as super::Types>::on_wheel,
        on_copy = <TypeDefs as super::Types>::on_copy,
        on_cut = <TypeDefs as super::Types>::on_cut,
        on_paste = <TypeDefs as super::Types>::on_paste,
        on_composition_end = <TypeDefs as super::Types>::on_composition_end,
        on_composition_start = <TypeDefs as super::Types>::on_composition_start,
        on_composition_update = <TypeDefs as super::Types>::on_composition_update,
        on_blur = <TypeDefs as super::Types>::on_blur,
        on_focus = <TypeDefs as super::Types>::on_focus,
        on_focus_in = <TypeDefs as super::Types>::on_focus_in,
        on_focus_out = <TypeDefs as super::Types>::on_focus_out,
        on_fullscreen_change = <TypeDefs as super::Types>::on_fullscreen_change,
        on_fullscreen_error = <TypeDefs as super::Types>::on_fullscreen_error,
        on_key_down = <TypeDefs as super::Types>::on_key_down,
        on_key_up = <TypeDefs as super::Types>::on_key_up,
        on_aux_click = <TypeDefs as super::Types>::on_aux_click,
        on_click = <TypeDefs as super::Types>::on_click,
        on_context_menu = <TypeDefs as super::Types>::on_context_menu,
        on_double_click = <TypeDefs as super::Types>::on_double_click,
        on_mouse_down = <TypeDefs as super::Types>::on_mouse_down,
        on_mouse_enter = <TypeDefs as super::Types>::on_mouse_enter,
        on_mouse_leave = <TypeDefs as super::Types>::on_mouse_leave,
        on_mouse_move = <TypeDefs as super::Types>::on_mouse_move,
        on_mouse_out = <TypeDefs as super::Types>::on_mouse_out,
        on_mouse_over = <TypeDefs as super::Types>::on_mouse_over,
        on_mouse_up = <TypeDefs as super::Types>::on_mouse_up,
        on_touch_cancel = <TypeDefs as super::Types>::on_touch_cancel,
        on_touch_end = <TypeDefs as super::Types>::on_touch_end,
        on_touch_move = Value,
        on_touch_start = <TypeDefs as super::Types>::on_touch_start,
    >;
    pub type on_touch_start<TypeDefs, Value> = dyn super::Types<
        children = <TypeDefs as super::Types>::children,
        class = <TypeDefs as super::Types>::class,
        id = <TypeDefs as super::Types>::id,
        part = <TypeDefs as super::Types>::part,
        on_cancel = <TypeDefs as super::Types>::on_cancel,
        on_error = <TypeDefs as super::Types>::on_error,
        on_scroll = <TypeDefs as super::Types>::on_scroll,
        on_security_policy_violation = <TypeDefs as super::Types>::on_security_policy_violation,
        on_select = <TypeDefs as super::Types>::on_select,
        on_wheel = <TypeDefs as super::Types>::on_wheel,
        on_copy = <TypeDefs as super::Types>::on_copy,
        on_cut = <TypeDefs as super::Types>::on_cut,
        on_paste = <TypeDefs as super::Types>::on_paste,
        on_composition_end = <TypeDefs as super::Types>::on_composition_end,
        on_composition_start = <TypeDefs as super::Types>::on_composition_start,
        on_composition_update = <TypeDefs as super::Types>::on_composition_update,
        on_blur = <TypeDefs as super::Types>::on_blur,
        on_focus = <TypeDefs as super::Types>::on_focus,
        on_focus_in = <TypeDefs as super::Types>::on_focus_in,
        on_focus_out = <TypeDefs as super::Types>::on_focus_out,
        on_fullscreen_change = <TypeDefs as super::Types>::on_fullscreen_change,
        on_fullscreen_error = <TypeDefs as super::Types>::on_fullscreen_error,
        on_key_down = <TypeDefs as super::Types>::on_key_down,
        on_key_up = <TypeDefs as super::Types>::on_key_up,
        on_aux_click = <TypeDefs as super::Types>::on_aux_click,
        on_click = <TypeDefs as super::Types>::on_click,
        on_context_menu = <TypeDefs as super::Types>::on_context_menu,
        on_double_click = <TypeDefs as super::Types>::on_double_click,
        on_mouse_down = <TypeDefs as super::Types>::on_mouse_down,
        on_mouse_enter = <TypeDefs as super::Types>::on_mouse_enter,
        on_mouse_leave = <TypeDefs as super::Types>::on_mouse_leave,
        on_mouse_move = <TypeDefs as super::Types>::on_mouse_move,
        on_mouse_out = <TypeDefs as super::Types>::on_mouse_out,
        on_mouse_over = <TypeDefs as super::Types>::on_mouse_over,
        on_mouse_up = <TypeDefs as super::Types>::on_mouse_up,
        on_touch_cancel = <TypeDefs as super::Types>::on_touch_cancel,
        on_touch_end = <TypeDefs as super::Types>::on_touch_end,
        on_touch_move = <TypeDefs as super::Types>::on_touch_move,
        on_touch_start = Value,
    >;
}
mod trait_types {
    #[allow(unused_imports)]
    use super::super::*;
    #[allow(non_camel_case_types)]
    pub trait Types {
        type children;
        type class: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>;
        type id: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>;
        type part: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>;
        type on_cancel;
        type on_error;
        type on_scroll;
        type on_security_policy_violation;
        type on_select;
        type on_wheel;
        type on_copy;
        type on_cut;
        type on_paste;
        type on_composition_end;
        type on_composition_start;
        type on_composition_update;
        type on_blur;
        type on_focus;
        type on_focus_in;
        type on_focus_out;
        type on_fullscreen_change;
        type on_fullscreen_error;
        type on_key_down;
        type on_key_up;
        type on_aux_click;
        type on_click;
        type on_context_menu;
        type on_double_click;
        type on_mouse_down;
        type on_mouse_enter;
        type on_mouse_leave;
        type on_mouse_move;
        type on_mouse_out;
        type on_mouse_over;
        type on_mouse_up;
        type on_touch_cancel;
        type on_touch_end;
        type on_touch_move;
        type on_touch_start;
    }
}
pub use trait_types::Types;
pub use trait_types::Types as ValidTypes;
pub mod data_struct {
    #[non_exhaustive]
    pub struct ElementProps<TypeDefs: super::Types + ?::core::marker::Sized> {
        pub children: TypeDefs::children,
        pub class: TypeDefs::class,
        pub id: TypeDefs::id,
        pub part: TypeDefs::part,
        pub on_cancel: TypeDefs::on_cancel,
        pub on_error: TypeDefs::on_error,
        pub on_scroll: TypeDefs::on_scroll,
        pub on_security_policy_violation: TypeDefs::on_security_policy_violation,
        pub on_select: TypeDefs::on_select,
        pub on_wheel: TypeDefs::on_wheel,
        pub on_copy: TypeDefs::on_copy,
        pub on_cut: TypeDefs::on_cut,
        pub on_paste: TypeDefs::on_paste,
        pub on_composition_end: TypeDefs::on_composition_end,
        pub on_composition_start: TypeDefs::on_composition_start,
        pub on_composition_update: TypeDefs::on_composition_update,
        pub on_blur: TypeDefs::on_blur,
        pub on_focus: TypeDefs::on_focus,
        pub on_focus_in: TypeDefs::on_focus_in,
        pub on_focus_out: TypeDefs::on_focus_out,
        pub on_fullscreen_change: TypeDefs::on_fullscreen_change,
        pub on_fullscreen_error: TypeDefs::on_fullscreen_error,
        pub on_key_down: TypeDefs::on_key_down,
        pub on_key_up: TypeDefs::on_key_up,
        pub on_aux_click: TypeDefs::on_aux_click,
        pub on_click: TypeDefs::on_click,
        pub on_context_menu: TypeDefs::on_context_menu,
        pub on_double_click: TypeDefs::on_double_click,
        pub on_mouse_down: TypeDefs::on_mouse_down,
        pub on_mouse_enter: TypeDefs::on_mouse_enter,
        pub on_mouse_leave: TypeDefs::on_mouse_leave,
        pub on_mouse_move: TypeDefs::on_mouse_move,
        pub on_mouse_out: TypeDefs::on_mouse_out,
        pub on_mouse_over: TypeDefs::on_mouse_over,
        pub on_mouse_up: TypeDefs::on_mouse_up,
        pub on_touch_cancel: TypeDefs::on_touch_cancel,
        pub on_touch_end: TypeDefs::on_touch_end,
        pub on_touch_move: TypeDefs::on_touch_move,
        pub on_touch_start: TypeDefs::on_touch_start,
    }
}
pub use ::core::convert::identity as Building;
pub use ::core::convert::identity as build;
pub use data_struct::ElementProps as Data;
pub use data_struct::ElementProps as Building;
pub struct Replacing<TypeDefs: ?::core::marker::Sized + Types>(pub Data<TypeDefs>);
mod types_initial {
    #[allow(unused_imports)]
    use super::super::*;
    pub type TypesInitial = dyn super::Types<
        children = (),
        class = (),
        id = (),
        part = (),
        on_cancel = (),
        on_error = (),
        on_scroll = (),
        on_security_policy_violation = (),
        on_select = (),
        on_wheel = (),
        on_copy = (),
        on_cut = (),
        on_paste = (),
        on_composition_end = (),
        on_composition_start = (),
        on_composition_update = (),
        on_blur = (),
        on_focus = (),
        on_focus_in = (),
        on_focus_out = (),
        on_fullscreen_change = (),
        on_fullscreen_error = (),
        on_key_down = (),
        on_key_up = (),
        on_aux_click = (),
        on_click = (),
        on_context_menu = (),
        on_double_click = (),
        on_mouse_down = (),
        on_mouse_enter = (),
        on_mouse_leave = (),
        on_mouse_move = (),
        on_mouse_out = (),
        on_mouse_over = (),
        on_mouse_up = (),
        on_touch_cancel = (),
        on_touch_end = (),
        on_touch_move = (),
        on_touch_start = (),
    >;
}
pub use types_initial::TypesInitial;
pub type DataInitial = Data<TypesInitial>;
#[cfg(feature = "dom")]
pub mod render_state {
    #[allow(non_camel_case_types)]
    pub trait RenderStateTypes {
        type children: ::frender_core::RenderState;
        type class;
        type id;
        type part;
        type on_cancel;
        type on_error;
        type on_scroll;
        type on_security_policy_violation;
        type on_select;
        type on_wheel;
        type on_copy;
        type on_cut;
        type on_paste;
        type on_composition_end;
        type on_composition_start;
        type on_composition_update;
        type on_blur;
        type on_focus;
        type on_focus_in;
        type on_focus_out;
        type on_fullscreen_change;
        type on_fullscreen_error;
        type on_key_down;
        type on_key_up;
        type on_aux_click;
        type on_click;
        type on_context_menu;
        type on_double_click;
        type on_mouse_down;
        type on_mouse_enter;
        type on_mouse_leave;
        type on_mouse_move;
        type on_mouse_out;
        type on_mouse_over;
        type on_mouse_up;
        type on_touch_cancel;
        type on_touch_end;
        type on_touch_move;
        type on_touch_start;
    }
    pub struct RenderState<TypeDefs: RenderStateTypes>
    where
        TypeDefs: ?::core::marker::Sized,
    {
        pub children: TypeDefs::children,
        pub class: TypeDefs::class,
        pub id: TypeDefs::id,
        pub part: TypeDefs::part,
        pub on_cancel: TypeDefs::on_cancel,
        pub on_error: TypeDefs::on_error,
        pub on_scroll: TypeDefs::on_scroll,
        pub on_security_policy_violation: TypeDefs::on_security_policy_violation,
        pub on_select: TypeDefs::on_select,
        pub on_wheel: TypeDefs::on_wheel,
        pub on_copy: TypeDefs::on_copy,
        pub on_cut: TypeDefs::on_cut,
        pub on_paste: TypeDefs::on_paste,
        pub on_composition_end: TypeDefs::on_composition_end,
        pub on_composition_start: TypeDefs::on_composition_start,
        pub on_composition_update: TypeDefs::on_composition_update,
        pub on_blur: TypeDefs::on_blur,
        pub on_focus: TypeDefs::on_focus,
        pub on_focus_in: TypeDefs::on_focus_in,
        pub on_focus_out: TypeDefs::on_focus_out,
        pub on_fullscreen_change: TypeDefs::on_fullscreen_change,
        pub on_fullscreen_error: TypeDefs::on_fullscreen_error,
        pub on_key_down: TypeDefs::on_key_down,
        pub on_key_up: TypeDefs::on_key_up,
        pub on_aux_click: TypeDefs::on_aux_click,
        pub on_click: TypeDefs::on_click,
        pub on_context_menu: TypeDefs::on_context_menu,
        pub on_double_click: TypeDefs::on_double_click,
        pub on_mouse_down: TypeDefs::on_mouse_down,
        pub on_mouse_enter: TypeDefs::on_mouse_enter,
        pub on_mouse_leave: TypeDefs::on_mouse_leave,
        pub on_mouse_move: TypeDefs::on_mouse_move,
        pub on_mouse_out: TypeDefs::on_mouse_out,
        pub on_mouse_over: TypeDefs::on_mouse_over,
        pub on_mouse_up: TypeDefs::on_mouse_up,
        pub on_touch_cancel: TypeDefs::on_touch_cancel,
        pub on_touch_end: TypeDefs::on_touch_end,
        pub on_touch_move: TypeDefs::on_touch_move,
        pub on_touch_start: TypeDefs::on_touch_start,
    }
    #[allow(dead_code)]
    #[allow(single_use_lifetimes)]
    #[allow(clippy::unknown_clippy_lints)]
    #[allow(clippy::mut_mut)]
    #[allow(clippy::redundant_pub_crate)]
    #[allow(clippy::ref_option_ref)]
    #[allow(clippy::type_repetition_in_bounds)]
    pub(crate) struct RenderStateProj<'__pin, TypeDefs: RenderStateTypes>
    where
        RenderState<TypeDefs>: '__pin,
        TypeDefs: ?::core::marker::Sized,
    {
        pub children: ::pin_project_lite::__private::Pin<&'__pin mut (TypeDefs::children)>,
        pub class: &'__pin mut (TypeDefs::class),
        pub id: &'__pin mut (TypeDefs::id),
        pub part: &'__pin mut (TypeDefs::part),
        pub on_cancel: &'__pin mut (TypeDefs::on_cancel),
        pub on_error: &'__pin mut (TypeDefs::on_error),
        pub on_scroll: &'__pin mut (TypeDefs::on_scroll),
        pub on_security_policy_violation: &'__pin mut (TypeDefs::on_security_policy_violation),
        pub on_select: &'__pin mut (TypeDefs::on_select),
        pub on_wheel: &'__pin mut (TypeDefs::on_wheel),
        pub on_copy: &'__pin mut (TypeDefs::on_copy),
        pub on_cut: &'__pin mut (TypeDefs::on_cut),
        pub on_paste: &'__pin mut (TypeDefs::on_paste),
        pub on_composition_end: &'__pin mut (TypeDefs::on_composition_end),
        pub on_composition_start: &'__pin mut (TypeDefs::on_composition_start),
        pub on_composition_update: &'__pin mut (TypeDefs::on_composition_update),
        pub on_blur: &'__pin mut (TypeDefs::on_blur),
        pub on_focus: &'__pin mut (TypeDefs::on_focus),
        pub on_focus_in: &'__pin mut (TypeDefs::on_focus_in),
        pub on_focus_out: &'__pin mut (TypeDefs::on_focus_out),
        pub on_fullscreen_change: &'__pin mut (TypeDefs::on_fullscreen_change),
        pub on_fullscreen_error: &'__pin mut (TypeDefs::on_fullscreen_error),
        pub on_key_down: &'__pin mut (TypeDefs::on_key_down),
        pub on_key_up: &'__pin mut (TypeDefs::on_key_up),
        pub on_aux_click: &'__pin mut (TypeDefs::on_aux_click),
        pub on_click: &'__pin mut (TypeDefs::on_click),
        pub on_context_menu: &'__pin mut (TypeDefs::on_context_menu),
        pub on_double_click: &'__pin mut (TypeDefs::on_double_click),
        pub on_mouse_down: &'__pin mut (TypeDefs::on_mouse_down),
        pub on_mouse_enter: &'__pin mut (TypeDefs::on_mouse_enter),
        pub on_mouse_leave: &'__pin mut (TypeDefs::on_mouse_leave),
        pub on_mouse_move: &'__pin mut (TypeDefs::on_mouse_move),
        pub on_mouse_out: &'__pin mut (TypeDefs::on_mouse_out),
        pub on_mouse_over: &'__pin mut (TypeDefs::on_mouse_over),
        pub on_mouse_up: &'__pin mut (TypeDefs::on_mouse_up),
        pub on_touch_cancel: &'__pin mut (TypeDefs::on_touch_cancel),
        pub on_touch_end: &'__pin mut (TypeDefs::on_touch_end),
        pub on_touch_move: &'__pin mut (TypeDefs::on_touch_move),
        pub on_touch_start: &'__pin mut (TypeDefs::on_touch_start),
    }
    #[allow(explicit_outlives_requirements)]
    #[allow(single_use_lifetimes)]
    #[allow(clippy::unknown_clippy_lints)]
    #[allow(clippy::redundant_pub_crate)]
    #[allow(clippy::used_underscore_binding)]
    const _: () = {
        #[allow(dead_code)]
        #[allow(single_use_lifetimes)]
        #[allow(clippy::unknown_clippy_lints)]
        #[allow(clippy::mut_mut)]
        #[allow(clippy::redundant_pub_crate)]
        #[allow(clippy::ref_option_ref)]
        #[allow(clippy::type_repetition_in_bounds)]
        pub(crate) struct ProjectionRef<'__pin, TypeDefs: RenderStateTypes>
        where
            RenderState<TypeDefs>: '__pin,
            TypeDefs: ?::core::marker::Sized,
        {
            pub children: ::pin_project_lite::__private::Pin<&'__pin (TypeDefs::children)>,
            pub class: &'__pin (TypeDefs::class),
            pub id: &'__pin (TypeDefs::id),
            pub part: &'__pin (TypeDefs::part),
            pub on_cancel: &'__pin (TypeDefs::on_cancel),
            pub on_error: &'__pin (TypeDefs::on_error),
            pub on_scroll: &'__pin (TypeDefs::on_scroll),
            pub on_security_policy_violation: &'__pin (TypeDefs::on_security_policy_violation),
            pub on_select: &'__pin (TypeDefs::on_select),
            pub on_wheel: &'__pin (TypeDefs::on_wheel),
            pub on_copy: &'__pin (TypeDefs::on_copy),
            pub on_cut: &'__pin (TypeDefs::on_cut),
            pub on_paste: &'__pin (TypeDefs::on_paste),
            pub on_composition_end: &'__pin (TypeDefs::on_composition_end),
            pub on_composition_start: &'__pin (TypeDefs::on_composition_start),
            pub on_composition_update: &'__pin (TypeDefs::on_composition_update),
            pub on_blur: &'__pin (TypeDefs::on_blur),
            pub on_focus: &'__pin (TypeDefs::on_focus),
            pub on_focus_in: &'__pin (TypeDefs::on_focus_in),
            pub on_focus_out: &'__pin (TypeDefs::on_focus_out),
            pub on_fullscreen_change: &'__pin (TypeDefs::on_fullscreen_change),
            pub on_fullscreen_error: &'__pin (TypeDefs::on_fullscreen_error),
            pub on_key_down: &'__pin (TypeDefs::on_key_down),
            pub on_key_up: &'__pin (TypeDefs::on_key_up),
            pub on_aux_click: &'__pin (TypeDefs::on_aux_click),
            pub on_click: &'__pin (TypeDefs::on_click),
            pub on_context_menu: &'__pin (TypeDefs::on_context_menu),
            pub on_double_click: &'__pin (TypeDefs::on_double_click),
            pub on_mouse_down: &'__pin (TypeDefs::on_mouse_down),
            pub on_mouse_enter: &'__pin (TypeDefs::on_mouse_enter),
            pub on_mouse_leave: &'__pin (TypeDefs::on_mouse_leave),
            pub on_mouse_move: &'__pin (TypeDefs::on_mouse_move),
            pub on_mouse_out: &'__pin (TypeDefs::on_mouse_out),
            pub on_mouse_over: &'__pin (TypeDefs::on_mouse_over),
            pub on_mouse_up: &'__pin (TypeDefs::on_mouse_up),
            pub on_touch_cancel: &'__pin (TypeDefs::on_touch_cancel),
            pub on_touch_end: &'__pin (TypeDefs::on_touch_end),
            pub on_touch_move: &'__pin (TypeDefs::on_touch_move),
            pub on_touch_start: &'__pin (TypeDefs::on_touch_start),
        }
        impl<TypeDefs: RenderStateTypes> RenderState<TypeDefs>
        where
            TypeDefs: ?::core::marker::Sized,
        {
            pub(crate) fn project<'__pin>(
                self: ::pin_project_lite::__private::Pin<&'__pin mut Self>,
            ) -> RenderStateProj<'__pin, TypeDefs> {
                unsafe {
                    let Self {
                        children,
                        class,
                        id,
                        part,
                        on_cancel,
                        on_error,
                        on_scroll,
                        on_security_policy_violation,
                        on_select,
                        on_wheel,
                        on_copy,
                        on_cut,
                        on_paste,
                        on_composition_end,
                        on_composition_start,
                        on_composition_update,
                        on_blur,
                        on_focus,
                        on_focus_in,
                        on_focus_out,
                        on_fullscreen_change,
                        on_fullscreen_error,
                        on_key_down,
                        on_key_up,
                        on_aux_click,
                        on_click,
                        on_context_menu,
                        on_double_click,
                        on_mouse_down,
                        on_mouse_enter,
                        on_mouse_leave,
                        on_mouse_move,
                        on_mouse_out,
                        on_mouse_over,
                        on_mouse_up,
                        on_touch_cancel,
                        on_touch_end,
                        on_touch_move,
                        on_touch_start,
                    } = self.get_unchecked_mut();
                    RenderStateProj {
                        children: ::pin_project_lite::__private::Pin::new_unchecked(children),
                        class: class,
                        id: id,
                        part: part,
                        on_cancel: on_cancel,
                        on_error: on_error,
                        on_scroll: on_scroll,
                        on_security_policy_violation: on_security_policy_violation,
                        on_select: on_select,
                        on_wheel: on_wheel,
                        on_copy: on_copy,
                        on_cut: on_cut,
                        on_paste: on_paste,
                        on_composition_end: on_composition_end,
                        on_composition_start: on_composition_start,
                        on_composition_update: on_composition_update,
                        on_blur: on_blur,
                        on_focus: on_focus,
                        on_focus_in: on_focus_in,
                        on_focus_out: on_focus_out,
                        on_fullscreen_change: on_fullscreen_change,
                        on_fullscreen_error: on_fullscreen_error,
                        on_key_down: on_key_down,
                        on_key_up: on_key_up,
                        on_aux_click: on_aux_click,
                        on_click: on_click,
                        on_context_menu: on_context_menu,
                        on_double_click: on_double_click,
                        on_mouse_down: on_mouse_down,
                        on_mouse_enter: on_mouse_enter,
                        on_mouse_leave: on_mouse_leave,
                        on_mouse_move: on_mouse_move,
                        on_mouse_out: on_mouse_out,
                        on_mouse_over: on_mouse_over,
                        on_mouse_up: on_mouse_up,
                        on_touch_cancel: on_touch_cancel,
                        on_touch_end: on_touch_end,
                        on_touch_move: on_touch_move,
                        on_touch_start: on_touch_start,
                    }
                }
            }
            pub(crate) fn project_ref<'__pin>(
                self: ::pin_project_lite::__private::Pin<&'__pin Self>,
            ) -> ProjectionRef<'__pin, TypeDefs> {
                unsafe {
                    let Self {
                        children,
                        class,
                        id,
                        part,
                        on_cancel,
                        on_error,
                        on_scroll,
                        on_security_policy_violation,
                        on_select,
                        on_wheel,
                        on_copy,
                        on_cut,
                        on_paste,
                        on_composition_end,
                        on_composition_start,
                        on_composition_update,
                        on_blur,
                        on_focus,
                        on_focus_in,
                        on_focus_out,
                        on_fullscreen_change,
                        on_fullscreen_error,
                        on_key_down,
                        on_key_up,
                        on_aux_click,
                        on_click,
                        on_context_menu,
                        on_double_click,
                        on_mouse_down,
                        on_mouse_enter,
                        on_mouse_leave,
                        on_mouse_move,
                        on_mouse_out,
                        on_mouse_over,
                        on_mouse_up,
                        on_touch_cancel,
                        on_touch_end,
                        on_touch_move,
                        on_touch_start,
                    } = self.get_ref();
                    ProjectionRef {
                        children: ::pin_project_lite::__private::Pin::new_unchecked(children),
                        class: class,
                        id: id,
                        part: part,
                        on_cancel: on_cancel,
                        on_error: on_error,
                        on_scroll: on_scroll,
                        on_security_policy_violation: on_security_policy_violation,
                        on_select: on_select,
                        on_wheel: on_wheel,
                        on_copy: on_copy,
                        on_cut: on_cut,
                        on_paste: on_paste,
                        on_composition_end: on_composition_end,
                        on_composition_start: on_composition_start,
                        on_composition_update: on_composition_update,
                        on_blur: on_blur,
                        on_focus: on_focus,
                        on_focus_in: on_focus_in,
                        on_focus_out: on_focus_out,
                        on_fullscreen_change: on_fullscreen_change,
                        on_fullscreen_error: on_fullscreen_error,
                        on_key_down: on_key_down,
                        on_key_up: on_key_up,
                        on_aux_click: on_aux_click,
                        on_click: on_click,
                        on_context_menu: on_context_menu,
                        on_double_click: on_double_click,
                        on_mouse_down: on_mouse_down,
                        on_mouse_enter: on_mouse_enter,
                        on_mouse_leave: on_mouse_leave,
                        on_mouse_move: on_mouse_move,
                        on_mouse_out: on_mouse_out,
                        on_mouse_over: on_mouse_over,
                        on_mouse_up: on_mouse_up,
                        on_touch_cancel: on_touch_cancel,
                        on_touch_end: on_touch_end,
                        on_touch_move: on_touch_move,
                        on_touch_start: on_touch_start,
                    }
                }
            }
        }
        #[allow(non_snake_case)]
        pub struct __Origin<'__pin, TypeDefs: RenderStateTypes>
        where
            TypeDefs: ?::core::marker::Sized,
        {
            __dummy_lifetime: ::pin_project_lite::__private::PhantomData<&'__pin ()>,
            children: TypeDefs::children,
            class: ::pin_project_lite::__private::AlwaysUnpin<TypeDefs::class>,
            id: ::pin_project_lite::__private::AlwaysUnpin<TypeDefs::id>,
            part: ::pin_project_lite::__private::AlwaysUnpin<TypeDefs::part>,
            on_cancel: ::pin_project_lite::__private::AlwaysUnpin<TypeDefs::on_cancel>,
            on_error: ::pin_project_lite::__private::AlwaysUnpin<TypeDefs::on_error>,
            on_scroll: ::pin_project_lite::__private::AlwaysUnpin<TypeDefs::on_scroll>,
            on_security_policy_violation:
                ::pin_project_lite::__private::AlwaysUnpin<TypeDefs::on_security_policy_violation>,
            on_select: ::pin_project_lite::__private::AlwaysUnpin<TypeDefs::on_select>,
            on_wheel: ::pin_project_lite::__private::AlwaysUnpin<TypeDefs::on_wheel>,
            on_copy: ::pin_project_lite::__private::AlwaysUnpin<TypeDefs::on_copy>,
            on_cut: ::pin_project_lite::__private::AlwaysUnpin<TypeDefs::on_cut>,
            on_paste: ::pin_project_lite::__private::AlwaysUnpin<TypeDefs::on_paste>,
            on_composition_end:
                ::pin_project_lite::__private::AlwaysUnpin<TypeDefs::on_composition_end>,
            on_composition_start:
                ::pin_project_lite::__private::AlwaysUnpin<TypeDefs::on_composition_start>,
            on_composition_update:
                ::pin_project_lite::__private::AlwaysUnpin<TypeDefs::on_composition_update>,
            on_blur: ::pin_project_lite::__private::AlwaysUnpin<TypeDefs::on_blur>,
            on_focus: ::pin_project_lite::__private::AlwaysUnpin<TypeDefs::on_focus>,
            on_focus_in: ::pin_project_lite::__private::AlwaysUnpin<TypeDefs::on_focus_in>,
            on_focus_out: ::pin_project_lite::__private::AlwaysUnpin<TypeDefs::on_focus_out>,
            on_fullscreen_change:
                ::pin_project_lite::__private::AlwaysUnpin<TypeDefs::on_fullscreen_change>,
            on_fullscreen_error:
                ::pin_project_lite::__private::AlwaysUnpin<TypeDefs::on_fullscreen_error>,
            on_key_down: ::pin_project_lite::__private::AlwaysUnpin<TypeDefs::on_key_down>,
            on_key_up: ::pin_project_lite::__private::AlwaysUnpin<TypeDefs::on_key_up>,
            on_aux_click: ::pin_project_lite::__private::AlwaysUnpin<TypeDefs::on_aux_click>,
            on_click: ::pin_project_lite::__private::AlwaysUnpin<TypeDefs::on_click>,
            on_context_menu: ::pin_project_lite::__private::AlwaysUnpin<TypeDefs::on_context_menu>,
            on_double_click: ::pin_project_lite::__private::AlwaysUnpin<TypeDefs::on_double_click>,
            on_mouse_down: ::pin_project_lite::__private::AlwaysUnpin<TypeDefs::on_mouse_down>,
            on_mouse_enter: ::pin_project_lite::__private::AlwaysUnpin<TypeDefs::on_mouse_enter>,
            on_mouse_leave: ::pin_project_lite::__private::AlwaysUnpin<TypeDefs::on_mouse_leave>,
            on_mouse_move: ::pin_project_lite::__private::AlwaysUnpin<TypeDefs::on_mouse_move>,
            on_mouse_out: ::pin_project_lite::__private::AlwaysUnpin<TypeDefs::on_mouse_out>,
            on_mouse_over: ::pin_project_lite::__private::AlwaysUnpin<TypeDefs::on_mouse_over>,
            on_mouse_up: ::pin_project_lite::__private::AlwaysUnpin<TypeDefs::on_mouse_up>,
            on_touch_cancel: ::pin_project_lite::__private::AlwaysUnpin<TypeDefs::on_touch_cancel>,
            on_touch_end: ::pin_project_lite::__private::AlwaysUnpin<TypeDefs::on_touch_end>,
            on_touch_move: ::pin_project_lite::__private::AlwaysUnpin<TypeDefs::on_touch_move>,
            on_touch_start: ::pin_project_lite::__private::AlwaysUnpin<TypeDefs::on_touch_start>,
        }
        impl<'__pin, TypeDefs: RenderStateTypes> ::pin_project_lite::__private::Unpin
            for RenderState<TypeDefs>
        where
            __Origin<'__pin, TypeDefs>: ::pin_project_lite::__private::Unpin,
            TypeDefs: ?::core::marker::Sized,
        {
        }
        trait MustNotImplDrop {}
        #[allow(clippy::drop_bounds, drop_bounds)]
        impl<T: ::pin_project_lite::__private::Drop> MustNotImplDrop for T {}
        impl<TypeDefs: RenderStateTypes> MustNotImplDrop for RenderState<TypeDefs> where
            TypeDefs: ?::core::marker::Sized
        {
        }
        #[forbid(unaligned_references, safe_packed_borrows)]
        fn __assert_not_repr_packed<TypeDefs: RenderStateTypes>(this: &RenderState<TypeDefs>)
        where
            TypeDefs: ?::core::marker::Sized,
        {
            let _ = &this.children;
            let _ = &this.class;
            let _ = &this.id;
            let _ = &this.part;
            let _ = &this.on_cancel;
            let _ = &this.on_error;
            let _ = &this.on_scroll;
            let _ = &this.on_security_policy_violation;
            let _ = &this.on_select;
            let _ = &this.on_wheel;
            let _ = &this.on_copy;
            let _ = &this.on_cut;
            let _ = &this.on_paste;
            let _ = &this.on_composition_end;
            let _ = &this.on_composition_start;
            let _ = &this.on_composition_update;
            let _ = &this.on_blur;
            let _ = &this.on_focus;
            let _ = &this.on_focus_in;
            let _ = &this.on_focus_out;
            let _ = &this.on_fullscreen_change;
            let _ = &this.on_fullscreen_error;
            let _ = &this.on_key_down;
            let _ = &this.on_key_up;
            let _ = &this.on_aux_click;
            let _ = &this.on_click;
            let _ = &this.on_context_menu;
            let _ = &this.on_double_click;
            let _ = &this.on_mouse_down;
            let _ = &this.on_mouse_enter;
            let _ = &this.on_mouse_leave;
            let _ = &this.on_mouse_move;
            let _ = &this.on_mouse_out;
            let _ = &this.on_mouse_over;
            let _ = &this.on_mouse_up;
            let _ = &this.on_touch_cancel;
            let _ = &this.on_touch_end;
            let _ = &this.on_touch_move;
            let _ = &this.on_touch_start;
        }
    };
    impl<TypeDefs: ?::core::marker::Sized + RenderStateTypes> RenderState<TypeDefs> {
        #[inline(always)]
        pub(crate) fn pin_project(
            self: ::core::pin::Pin<&mut Self>,
        ) -> RenderStateProj<'_, TypeDefs> {
            self.project()
        }
    }
    impl<TypeDefs: ?::core::marker::Sized + RenderStateTypes>
        crate::imports::frender_dom::props::IntrinsicComponentPollReactive
        for RenderState<TypeDefs>
    {
        #[inline]
        fn intrinsic_component_poll_reactive(
            self: ::core::pin::Pin<&mut Self>,
            cx: &mut ::core::task::Context<'_>,
        ) -> ::core::task::Poll<bool> {
            crate::imports::frender_core::RenderState::poll_reactive(self.project().children, cx)
        }
    }
}
mod builder_and_replacer {
    #[allow(unused_imports)]
    use super::super::*;
    impl<TypeDefs: super::Types + ?::core::marker::Sized> super::Building<TypeDefs> {
        #[inline(always)]
        pub fn children<V>(
            self,
            children: V,
        ) -> super::Building<super::overwrite::children<TypeDefs, V>> {
            super::Data {
                children,
                class: self.class,
                id: self.id,
                part: self.part,
                on_cancel: self.on_cancel,
                on_error: self.on_error,
                on_scroll: self.on_scroll,
                on_security_policy_violation: self.on_security_policy_violation,
                on_select: self.on_select,
                on_wheel: self.on_wheel,
                on_copy: self.on_copy,
                on_cut: self.on_cut,
                on_paste: self.on_paste,
                on_composition_end: self.on_composition_end,
                on_composition_start: self.on_composition_start,
                on_composition_update: self.on_composition_update,
                on_blur: self.on_blur,
                on_focus: self.on_focus,
                on_focus_in: self.on_focus_in,
                on_focus_out: self.on_focus_out,
                on_fullscreen_change: self.on_fullscreen_change,
                on_fullscreen_error: self.on_fullscreen_error,
                on_key_down: self.on_key_down,
                on_key_up: self.on_key_up,
                on_aux_click: self.on_aux_click,
                on_click: self.on_click,
                on_context_menu: self.on_context_menu,
                on_double_click: self.on_double_click,
                on_mouse_down: self.on_mouse_down,
                on_mouse_enter: self.on_mouse_enter,
                on_mouse_leave: self.on_mouse_leave,
                on_mouse_move: self.on_mouse_move,
                on_mouse_out: self.on_mouse_out,
                on_mouse_over: self.on_mouse_over,
                on_mouse_up: self.on_mouse_up,
                on_touch_cancel: self.on_touch_cancel,
                on_touch_end: self.on_touch_end,
                on_touch_move: self.on_touch_move,
                on_touch_start: self.on_touch_start,
            }
        }
        #[inline(always)]
        pub fn class<V: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>>(
            self,
            class: V,
        ) -> super::Building<super::overwrite::class<TypeDefs, V>> {
            super::Data {
                children: self.children,
                class,
                id: self.id,
                part: self.part,
                on_cancel: self.on_cancel,
                on_error: self.on_error,
                on_scroll: self.on_scroll,
                on_security_policy_violation: self.on_security_policy_violation,
                on_select: self.on_select,
                on_wheel: self.on_wheel,
                on_copy: self.on_copy,
                on_cut: self.on_cut,
                on_paste: self.on_paste,
                on_composition_end: self.on_composition_end,
                on_composition_start: self.on_composition_start,
                on_composition_update: self.on_composition_update,
                on_blur: self.on_blur,
                on_focus: self.on_focus,
                on_focus_in: self.on_focus_in,
                on_focus_out: self.on_focus_out,
                on_fullscreen_change: self.on_fullscreen_change,
                on_fullscreen_error: self.on_fullscreen_error,
                on_key_down: self.on_key_down,
                on_key_up: self.on_key_up,
                on_aux_click: self.on_aux_click,
                on_click: self.on_click,
                on_context_menu: self.on_context_menu,
                on_double_click: self.on_double_click,
                on_mouse_down: self.on_mouse_down,
                on_mouse_enter: self.on_mouse_enter,
                on_mouse_leave: self.on_mouse_leave,
                on_mouse_move: self.on_mouse_move,
                on_mouse_out: self.on_mouse_out,
                on_mouse_over: self.on_mouse_over,
                on_mouse_up: self.on_mouse_up,
                on_touch_cancel: self.on_touch_cancel,
                on_touch_end: self.on_touch_end,
                on_touch_move: self.on_touch_move,
                on_touch_start: self.on_touch_start,
            }
        }
        #[inline(always)]
        pub fn id<V: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>>(
            self,
            id: V,
        ) -> super::Building<super::overwrite::id<TypeDefs, V>> {
            super::Data {
                children: self.children,
                class: self.class,
                id,
                part: self.part,
                on_cancel: self.on_cancel,
                on_error: self.on_error,
                on_scroll: self.on_scroll,
                on_security_policy_violation: self.on_security_policy_violation,
                on_select: self.on_select,
                on_wheel: self.on_wheel,
                on_copy: self.on_copy,
                on_cut: self.on_cut,
                on_paste: self.on_paste,
                on_composition_end: self.on_composition_end,
                on_composition_start: self.on_composition_start,
                on_composition_update: self.on_composition_update,
                on_blur: self.on_blur,
                on_focus: self.on_focus,
                on_focus_in: self.on_focus_in,
                on_focus_out: self.on_focus_out,
                on_fullscreen_change: self.on_fullscreen_change,
                on_fullscreen_error: self.on_fullscreen_error,
                on_key_down: self.on_key_down,
                on_key_up: self.on_key_up,
                on_aux_click: self.on_aux_click,
                on_click: self.on_click,
                on_context_menu: self.on_context_menu,
                on_double_click: self.on_double_click,
                on_mouse_down: self.on_mouse_down,
                on_mouse_enter: self.on_mouse_enter,
                on_mouse_leave: self.on_mouse_leave,
                on_mouse_move: self.on_mouse_move,
                on_mouse_out: self.on_mouse_out,
                on_mouse_over: self.on_mouse_over,
                on_mouse_up: self.on_mouse_up,
                on_touch_cancel: self.on_touch_cancel,
                on_touch_end: self.on_touch_end,
                on_touch_move: self.on_touch_move,
                on_touch_start: self.on_touch_start,
            }
        }
        #[inline(always)]
        pub fn part<V: crate::imports::frender_html::props::MaybeUpdateValueWithState<str>>(
            self,
            part: V,
        ) -> super::Building<super::overwrite::part<TypeDefs, V>> {
            super::Data {
                children: self.children,
                class: self.class,
                id: self.id,
                part,
                on_cancel: self.on_cancel,
                on_error: self.on_error,
                on_scroll: self.on_scroll,
                on_security_policy_violation: self.on_security_policy_violation,
                on_select: self.on_select,
                on_wheel: self.on_wheel,
                on_copy: self.on_copy,
                on_cut: self.on_cut,
                on_paste: self.on_paste,
                on_composition_end: self.on_composition_end,
                on_composition_start: self.on_composition_start,
                on_composition_update: self.on_composition_update,
                on_blur: self.on_blur,
                on_focus: self.on_focus,
                on_focus_in: self.on_focus_in,
                on_focus_out: self.on_focus_out,
                on_fullscreen_change: self.on_fullscreen_change,
                on_fullscreen_error: self.on_fullscreen_error,
                on_key_down: self.on_key_down,
                on_key_up: self.on_key_up,
                on_aux_click: self.on_aux_click,
                on_click: self.on_click,
                on_context_menu: self.on_context_menu,
                on_double_click: self.on_double_click,
                on_mouse_down: self.on_mouse_down,
                on_mouse_enter: self.on_mouse_enter,
                on_mouse_leave: self.on_mouse_leave,
                on_mouse_move: self.on_mouse_move,
                on_mouse_out: self.on_mouse_out,
                on_mouse_over: self.on_mouse_over,
                on_mouse_up: self.on_mouse_up,
                on_touch_cancel: self.on_touch_cancel,
                on_touch_end: self.on_touch_end,
                on_touch_move: self.on_touch_move,
                on_touch_start: self.on_touch_start,
            }
        }
        #[inline(always)]
        pub fn on_cancel<V>(
            self,
            on_cancel: V,
        ) -> super::Building<super::overwrite::on_cancel<TypeDefs, V>> {
            super::Data {
                children: self.children,
                class: self.class,
                id: self.id,
                part: self.part,
                on_cancel,
                on_error: self.on_error,
                on_scroll: self.on_scroll,
                on_security_policy_violation: self.on_security_policy_violation,
                on_select: self.on_select,
                on_wheel: self.on_wheel,
                on_copy: self.on_copy,
                on_cut: self.on_cut,
                on_paste: self.on_paste,
                on_composition_end: self.on_composition_end,
                on_composition_start: self.on_composition_start,
                on_composition_update: self.on_composition_update,
                on_blur: self.on_blur,
                on_focus: self.on_focus,
                on_focus_in: self.on_focus_in,
                on_focus_out: self.on_focus_out,
                on_fullscreen_change: self.on_fullscreen_change,
                on_fullscreen_error: self.on_fullscreen_error,
                on_key_down: self.on_key_down,
                on_key_up: self.on_key_up,
                on_aux_click: self.on_aux_click,
                on_click: self.on_click,
                on_context_menu: self.on_context_menu,
                on_double_click: self.on_double_click,
                on_mouse_down: self.on_mouse_down,
                on_mouse_enter: self.on_mouse_enter,
                on_mouse_leave: self.on_mouse_leave,
                on_mouse_move: self.on_mouse_move,
                on_mouse_out: self.on_mouse_out,
                on_mouse_over: self.on_mouse_over,
                on_mouse_up: self.on_mouse_up,
                on_touch_cancel: self.on_touch_cancel,
                on_touch_end: self.on_touch_end,
                on_touch_move: self.on_touch_move,
                on_touch_start: self.on_touch_start,
            }
        }
        #[inline(always)]
        pub fn on_error<V>(
            self,
            on_error: V,
        ) -> super::Building<super::overwrite::on_error<TypeDefs, V>> {
            super::Data {
                children: self.children,
                class: self.class,
                id: self.id,
                part: self.part,
                on_cancel: self.on_cancel,
                on_error,
                on_scroll: self.on_scroll,
                on_security_policy_violation: self.on_security_policy_violation,
                on_select: self.on_select,
                on_wheel: self.on_wheel,
                on_copy: self.on_copy,
                on_cut: self.on_cut,
                on_paste: self.on_paste,
                on_composition_end: self.on_composition_end,
                on_composition_start: self.on_composition_start,
                on_composition_update: self.on_composition_update,
                on_blur: self.on_blur,
                on_focus: self.on_focus,
                on_focus_in: self.on_focus_in,
                on_focus_out: self.on_focus_out,
                on_fullscreen_change: self.on_fullscreen_change,
                on_fullscreen_error: self.on_fullscreen_error,
                on_key_down: self.on_key_down,
                on_key_up: self.on_key_up,
                on_aux_click: self.on_aux_click,
                on_click: self.on_click,
                on_context_menu: self.on_context_menu,
                on_double_click: self.on_double_click,
                on_mouse_down: self.on_mouse_down,
                on_mouse_enter: self.on_mouse_enter,
                on_mouse_leave: self.on_mouse_leave,
                on_mouse_move: self.on_mouse_move,
                on_mouse_out: self.on_mouse_out,
                on_mouse_over: self.on_mouse_over,
                on_mouse_up: self.on_mouse_up,
                on_touch_cancel: self.on_touch_cancel,
                on_touch_end: self.on_touch_end,
                on_touch_move: self.on_touch_move,
                on_touch_start: self.on_touch_start,
            }
        }
        #[inline(always)]
        pub fn on_scroll<V>(
            self,
            on_scroll: V,
        ) -> super::Building<super::overwrite::on_scroll<TypeDefs, V>> {
            super::Data {
                children: self.children,
                class: self.class,
                id: self.id,
                part: self.part,
                on_cancel: self.on_cancel,
                on_error: self.on_error,
                on_scroll,
                on_security_policy_violation: self.on_security_policy_violation,
                on_select: self.on_select,
                on_wheel: self.on_wheel,
                on_copy: self.on_copy,
                on_cut: self.on_cut,
                on_paste: self.on_paste,
                on_composition_end: self.on_composition_end,
                on_composition_start: self.on_composition_start,
                on_composition_update: self.on_composition_update,
                on_blur: self.on_blur,
                on_focus: self.on_focus,
                on_focus_in: self.on_focus_in,
                on_focus_out: self.on_focus_out,
                on_fullscreen_change: self.on_fullscreen_change,
                on_fullscreen_error: self.on_fullscreen_error,
                on_key_down: self.on_key_down,
                on_key_up: self.on_key_up,
                on_aux_click: self.on_aux_click,
                on_click: self.on_click,
                on_context_menu: self.on_context_menu,
                on_double_click: self.on_double_click,
                on_mouse_down: self.on_mouse_down,
                on_mouse_enter: self.on_mouse_enter,
                on_mouse_leave: self.on_mouse_leave,
                on_mouse_move: self.on_mouse_move,
                on_mouse_out: self.on_mouse_out,
                on_mouse_over: self.on_mouse_over,
                on_mouse_up: self.on_mouse_up,
                on_touch_cancel: self.on_touch_cancel,
                on_touch_end: self.on_touch_end,
                on_touch_move: self.on_touch_move,
                on_touch_start: self.on_touch_start,
            }
        }
        #[inline(always)]
        pub fn on_security_policy_violation<V>(
            self,
            on_security_policy_violation: V,
        ) -> super::Building<super::overwrite::on_security_policy_violation<TypeDefs, V>> {
            super::Data {
                children: self.children,
                class: self.class,
                id: self.id,
                part: self.part,
                on_cancel: self.on_cancel,
                on_error: self.on_error,
                on_scroll: self.on_scroll,
                on_security_policy_violation,
                on_select: self.on_select,
                on_wheel: self.on_wheel,
                on_copy: self.on_copy,
                on_cut: self.on_cut,
                on_paste: self.on_paste,
                on_composition_end: self.on_composition_end,
                on_composition_start: self.on_composition_start,
                on_composition_update: self.on_composition_update,
                on_blur: self.on_blur,
                on_focus: self.on_focus,
                on_focus_in: self.on_focus_in,
                on_focus_out: self.on_focus_out,
                on_fullscreen_change: self.on_fullscreen_change,
                on_fullscreen_error: self.on_fullscreen_error,
                on_key_down: self.on_key_down,
                on_key_up: self.on_key_up,
                on_aux_click: self.on_aux_click,
                on_click: self.on_click,
                on_context_menu: self.on_context_menu,
                on_double_click: self.on_double_click,
                on_mouse_down: self.on_mouse_down,
                on_mouse_enter: self.on_mouse_enter,
                on_mouse_leave: self.on_mouse_leave,
                on_mouse_move: self.on_mouse_move,
                on_mouse_out: self.on_mouse_out,
                on_mouse_over: self.on_mouse_over,
                on_mouse_up: self.on_mouse_up,
                on_touch_cancel: self.on_touch_cancel,
                on_touch_end: self.on_touch_end,
                on_touch_move: self.on_touch_move,
                on_touch_start: self.on_touch_start,
            }
        }
        #[inline(always)]
        pub fn on_select<V>(
            self,
            on_select: V,
        ) -> super::Building<super::overwrite::on_select<TypeDefs, V>> {
            super::Data {
                children: self.children,
                class: self.class,
                id: self.id,
                part: self.part,
                on_cancel: self.on_cancel,
                on_error: self.on_error,
                on_scroll: self.on_scroll,
                on_security_policy_violation: self.on_security_policy_violation,
                on_select,
                on_wheel: self.on_wheel,
                on_copy: self.on_copy,
                on_cut: self.on_cut,
                on_paste: self.on_paste,
                on_composition_end: self.on_composition_end,
                on_composition_start: self.on_composition_start,
                on_composition_update: self.on_composition_update,
                on_blur: self.on_blur,
                on_focus: self.on_focus,
                on_focus_in: self.on_focus_in,
                on_focus_out: self.on_focus_out,
                on_fullscreen_change: self.on_fullscreen_change,
                on_fullscreen_error: self.on_fullscreen_error,
                on_key_down: self.on_key_down,
                on_key_up: self.on_key_up,
                on_aux_click: self.on_aux_click,
                on_click: self.on_click,
                on_context_menu: self.on_context_menu,
                on_double_click: self.on_double_click,
                on_mouse_down: self.on_mouse_down,
                on_mouse_enter: self.on_mouse_enter,
                on_mouse_leave: self.on_mouse_leave,
                on_mouse_move: self.on_mouse_move,
                on_mouse_out: self.on_mouse_out,
                on_mouse_over: self.on_mouse_over,
                on_mouse_up: self.on_mouse_up,
                on_touch_cancel: self.on_touch_cancel,
                on_touch_end: self.on_touch_end,
                on_touch_move: self.on_touch_move,
                on_touch_start: self.on_touch_start,
            }
        }
        #[inline(always)]
        pub fn on_wheel<V>(
            self,
            on_wheel: V,
        ) -> super::Building<super::overwrite::on_wheel<TypeDefs, V>> {
            super::Data {
                children: self.children,
                class: self.class,
                id: self.id,
                part: self.part,
                on_cancel: self.on_cancel,
                on_error: self.on_error,
                on_scroll: self.on_scroll,
                on_security_policy_violation: self.on_security_policy_violation,
                on_select: self.on_select,
                on_wheel,
                on_copy: self.on_copy,
                on_cut: self.on_cut,
                on_paste: self.on_paste,
                on_composition_end: self.on_composition_end,
                on_composition_start: self.on_composition_start,
                on_composition_update: self.on_composition_update,
                on_blur: self.on_blur,
                on_focus: self.on_focus,
                on_focus_in: self.on_focus_in,
                on_focus_out: self.on_focus_out,
                on_fullscreen_change: self.on_fullscreen_change,
                on_fullscreen_error: self.on_fullscreen_error,
                on_key_down: self.on_key_down,
                on_key_up: self.on_key_up,
                on_aux_click: self.on_aux_click,
                on_click: self.on_click,
                on_context_menu: self.on_context_menu,
                on_double_click: self.on_double_click,
                on_mouse_down: self.on_mouse_down,
                on_mouse_enter: self.on_mouse_enter,
                on_mouse_leave: self.on_mouse_leave,
                on_mouse_move: self.on_mouse_move,
                on_mouse_out: self.on_mouse_out,
                on_mouse_over: self.on_mouse_over,
                on_mouse_up: self.on_mouse_up,
                on_touch_cancel: self.on_touch_cancel,
                on_touch_end: self.on_touch_end,
                on_touch_move: self.on_touch_move,
                on_touch_start: self.on_touch_start,
            }
        }
        #[inline(always)]
        pub fn on_copy<V>(
            self,
            on_copy: V,
        ) -> super::Building<super::overwrite::on_copy<TypeDefs, V>> {
            super::Data {
                children: self.children,
                class: self.class,
                id: self.id,
                part: self.part,
                on_cancel: self.on_cancel,
                on_error: self.on_error,
                on_scroll: self.on_scroll,
                on_security_policy_violation: self.on_security_policy_violation,
                on_select: self.on_select,
                on_wheel: self.on_wheel,
                on_copy,
                on_cut: self.on_cut,
                on_paste: self.on_paste,
                on_composition_end: self.on_composition_end,
                on_composition_start: self.on_composition_start,
                on_composition_update: self.on_composition_update,
                on_blur: self.on_blur,
                on_focus: self.on_focus,
                on_focus_in: self.on_focus_in,
                on_focus_out: self.on_focus_out,
                on_fullscreen_change: self.on_fullscreen_change,
                on_fullscreen_error: self.on_fullscreen_error,
                on_key_down: self.on_key_down,
                on_key_up: self.on_key_up,
                on_aux_click: self.on_aux_click,
                on_click: self.on_click,
                on_context_menu: self.on_context_menu,
                on_double_click: self.on_double_click,
                on_mouse_down: self.on_mouse_down,
                on_mouse_enter: self.on_mouse_enter,
                on_mouse_leave: self.on_mouse_leave,
                on_mouse_move: self.on_mouse_move,
                on_mouse_out: self.on_mouse_out,
                on_mouse_over: self.on_mouse_over,
                on_mouse_up: self.on_mouse_up,
                on_touch_cancel: self.on_touch_cancel,
                on_touch_end: self.on_touch_end,
                on_touch_move: self.on_touch_move,
                on_touch_start: self.on_touch_start,
            }
        }
        #[inline(always)]
        pub fn on_cut<V>(
            self,
            on_cut: V,
        ) -> super::Building<super::overwrite::on_cut<TypeDefs, V>> {
            super::Data {
                children: self.children,
                class: self.class,
                id: self.id,
                part: self.part,
                on_cancel: self.on_cancel,
                on_error: self.on_error,
                on_scroll: self.on_scroll,
                on_security_policy_violation: self.on_security_policy_violation,
                on_select: self.on_select,
                on_wheel: self.on_wheel,
                on_copy: self.on_copy,
                on_cut,
                on_paste: self.on_paste,
                on_composition_end: self.on_composition_end,
                on_composition_start: self.on_composition_start,
                on_composition_update: self.on_composition_update,
                on_blur: self.on_blur,
                on_focus: self.on_focus,
                on_focus_in: self.on_focus_in,
                on_focus_out: self.on_focus_out,
                on_fullscreen_change: self.on_fullscreen_change,
                on_fullscreen_error: self.on_fullscreen_error,
                on_key_down: self.on_key_down,
                on_key_up: self.on_key_up,
                on_aux_click: self.on_aux_click,
                on_click: self.on_click,
                on_context_menu: self.on_context_menu,
                on_double_click: self.on_double_click,
                on_mouse_down: self.on_mouse_down,
                on_mouse_enter: self.on_mouse_enter,
                on_mouse_leave: self.on_mouse_leave,
                on_mouse_move: self.on_mouse_move,
                on_mouse_out: self.on_mouse_out,
                on_mouse_over: self.on_mouse_over,
                on_mouse_up: self.on_mouse_up,
                on_touch_cancel: self.on_touch_cancel,
                on_touch_end: self.on_touch_end,
                on_touch_move: self.on_touch_move,
                on_touch_start: self.on_touch_start,
            }
        }
        #[inline(always)]
        pub fn on_paste<V>(
            self,
            on_paste: V,
        ) -> super::Building<super::overwrite::on_paste<TypeDefs, V>> {
            super::Data {
                children: self.children,
                class: self.class,
                id: self.id,
                part: self.part,
                on_cancel: self.on_cancel,
                on_error: self.on_error,
                on_scroll: self.on_scroll,
                on_security_policy_violation: self.on_security_policy_violation,
                on_select: self.on_select,
                on_wheel: self.on_wheel,
                on_copy: self.on_copy,
                on_cut: self.on_cut,
                on_paste,
                on_composition_end: self.on_composition_end,
                on_composition_start: self.on_composition_start,
                on_composition_update: self.on_composition_update,
                on_blur: self.on_blur,
                on_focus: self.on_focus,
                on_focus_in: self.on_focus_in,
                on_focus_out: self.on_focus_out,
                on_fullscreen_change: self.on_fullscreen_change,
                on_fullscreen_error: self.on_fullscreen_error,
                on_key_down: self.on_key_down,
                on_key_up: self.on_key_up,
                on_aux_click: self.on_aux_click,
                on_click: self.on_click,
                on_context_menu: self.on_context_menu,
                on_double_click: self.on_double_click,
                on_mouse_down: self.on_mouse_down,
                on_mouse_enter: self.on_mouse_enter,
                on_mouse_leave: self.on_mouse_leave,
                on_mouse_move: self.on_mouse_move,
                on_mouse_out: self.on_mouse_out,
                on_mouse_over: self.on_mouse_over,
                on_mouse_up: self.on_mouse_up,
                on_touch_cancel: self.on_touch_cancel,
                on_touch_end: self.on_touch_end,
                on_touch_move: self.on_touch_move,
                on_touch_start: self.on_touch_start,
            }
        }
        #[inline(always)]
        pub fn on_composition_end<V>(
            self,
            on_composition_end: V,
        ) -> super::Building<super::overwrite::on_composition_end<TypeDefs, V>> {
            super::Data {
                children: self.children,
                class: self.class,
                id: self.id,
                part: self.part,
                on_cancel: self.on_cancel,
                on_error: self.on_error,
                on_scroll: self.on_scroll,
                on_security_policy_violation: self.on_security_policy_violation,
                on_select: self.on_select,
                on_wheel: self.on_wheel,
                on_copy: self.on_copy,
                on_cut: self.on_cut,
                on_paste: self.on_paste,
                on_composition_end,
                on_composition_start: self.on_composition_start,
                on_composition_update: self.on_composition_update,
                on_blur: self.on_blur,
                on_focus: self.on_focus,
                on_focus_in: self.on_focus_in,
                on_focus_out: self.on_focus_out,
                on_fullscreen_change: self.on_fullscreen_change,
                on_fullscreen_error: self.on_fullscreen_error,
                on_key_down: self.on_key_down,
                on_key_up: self.on_key_up,
                on_aux_click: self.on_aux_click,
                on_click: self.on_click,
                on_context_menu: self.on_context_menu,
                on_double_click: self.on_double_click,
                on_mouse_down: self.on_mouse_down,
                on_mouse_enter: self.on_mouse_enter,
                on_mouse_leave: self.on_mouse_leave,
                on_mouse_move: self.on_mouse_move,
                on_mouse_out: self.on_mouse_out,
                on_mouse_over: self.on_mouse_over,
                on_mouse_up: self.on_mouse_up,
                on_touch_cancel: self.on_touch_cancel,
                on_touch_end: self.on_touch_end,
                on_touch_move: self.on_touch_move,
                on_touch_start: self.on_touch_start,
            }
        }
        #[inline(always)]
        pub fn on_composition_start<V>(
            self,
            on_composition_start: V,
        ) -> super::Building<super::overwrite::on_composition_start<TypeDefs, V>> {
            super::Data {
                children: self.children,
                class: self.class,
                id: self.id,
                part: self.part,
                on_cancel: self.on_cancel,
                on_error: self.on_error,
                on_scroll: self.on_scroll,
                on_security_policy_violation: self.on_security_policy_violation,
                on_select: self.on_select,
                on_wheel: self.on_wheel,
                on_copy: self.on_copy,
                on_cut: self.on_cut,
                on_paste: self.on_paste,
                on_composition_end: self.on_composition_end,
                on_composition_start,
                on_composition_update: self.on_composition_update,
                on_blur: self.on_blur,
                on_focus: self.on_focus,
                on_focus_in: self.on_focus_in,
                on_focus_out: self.on_focus_out,
                on_fullscreen_change: self.on_fullscreen_change,
                on_fullscreen_error: self.on_fullscreen_error,
                on_key_down: self.on_key_down,
                on_key_up: self.on_key_up,
                on_aux_click: self.on_aux_click,
                on_click: self.on_click,
                on_context_menu: self.on_context_menu,
                on_double_click: self.on_double_click,
                on_mouse_down: self.on_mouse_down,
                on_mouse_enter: self.on_mouse_enter,
                on_mouse_leave: self.on_mouse_leave,
                on_mouse_move: self.on_mouse_move,
                on_mouse_out: self.on_mouse_out,
                on_mouse_over: self.on_mouse_over,
                on_mouse_up: self.on_mouse_up,
                on_touch_cancel: self.on_touch_cancel,
                on_touch_end: self.on_touch_end,
                on_touch_move: self.on_touch_move,
                on_touch_start: self.on_touch_start,
            }
        }
        #[inline(always)]
        pub fn on_composition_update<V>(
            self,
            on_composition_update: V,
        ) -> super::Building<super::overwrite::on_composition_update<TypeDefs, V>> {
            super::Data {
                children: self.children,
                class: self.class,
                id: self.id,
                part: self.part,
                on_cancel: self.on_cancel,
                on_error: self.on_error,
                on_scroll: self.on_scroll,
                on_security_policy_violation: self.on_security_policy_violation,
                on_select: self.on_select,
                on_wheel: self.on_wheel,
                on_copy: self.on_copy,
                on_cut: self.on_cut,
                on_paste: self.on_paste,
                on_composition_end: self.on_composition_end,
                on_composition_start: self.on_composition_start,
                on_composition_update,
                on_blur: self.on_blur,
                on_focus: self.on_focus,
                on_focus_in: self.on_focus_in,
                on_focus_out: self.on_focus_out,
                on_fullscreen_change: self.on_fullscreen_change,
                on_fullscreen_error: self.on_fullscreen_error,
                on_key_down: self.on_key_down,
                on_key_up: self.on_key_up,
                on_aux_click: self.on_aux_click,
                on_click: self.on_click,
                on_context_menu: self.on_context_menu,
                on_double_click: self.on_double_click,
                on_mouse_down: self.on_mouse_down,
                on_mouse_enter: self.on_mouse_enter,
                on_mouse_leave: self.on_mouse_leave,
                on_mouse_move: self.on_mouse_move,
                on_mouse_out: self.on_mouse_out,
                on_mouse_over: self.on_mouse_over,
                on_mouse_up: self.on_mouse_up,
                on_touch_cancel: self.on_touch_cancel,
                on_touch_end: self.on_touch_end,
                on_touch_move: self.on_touch_move,
                on_touch_start: self.on_touch_start,
            }
        }
        #[inline(always)]
        pub fn on_blur<V>(
            self,
            on_blur: V,
        ) -> super::Building<super::overwrite::on_blur<TypeDefs, V>> {
            super::Data {
                children: self.children,
                class: self.class,
                id: self.id,
                part: self.part,
                on_cancel: self.on_cancel,
                on_error: self.on_error,
                on_scroll: self.on_scroll,
                on_security_policy_violation: self.on_security_policy_violation,
                on_select: self.on_select,
                on_wheel: self.on_wheel,
                on_copy: self.on_copy,
                on_cut: self.on_cut,
                on_paste: self.on_paste,
                on_composition_end: self.on_composition_end,
                on_composition_start: self.on_composition_start,
                on_composition_update: self.on_composition_update,
                on_blur,
                on_focus: self.on_focus,
                on_focus_in: self.on_focus_in,
                on_focus_out: self.on_focus_out,
                on_fullscreen_change: self.on_fullscreen_change,
                on_fullscreen_error: self.on_fullscreen_error,
                on_key_down: self.on_key_down,
                on_key_up: self.on_key_up,
                on_aux_click: self.on_aux_click,
                on_click: self.on_click,
                on_context_menu: self.on_context_menu,
                on_double_click: self.on_double_click,
                on_mouse_down: self.on_mouse_down,
                on_mouse_enter: self.on_mouse_enter,
                on_mouse_leave: self.on_mouse_leave,
                on_mouse_move: self.on_mouse_move,
                on_mouse_out: self.on_mouse_out,
                on_mouse_over: self.on_mouse_over,
                on_mouse_up: self.on_mouse_up,
                on_touch_cancel: self.on_touch_cancel,
                on_touch_end: self.on_touch_end,
                on_touch_move: self.on_touch_move,
                on_touch_start: self.on_touch_start,
            }
        }
        #[inline(always)]
        pub fn on_focus<V>(
            self,
            on_focus: V,
        ) -> super::Building<super::overwrite::on_focus<TypeDefs, V>> {
            super::Data {
                children: self.children,
                class: self.class,
                id: self.id,
                part: self.part,
                on_cancel: self.on_cancel,
                on_error: self.on_error,
                on_scroll: self.on_scroll,
                on_security_policy_violation: self.on_security_policy_violation,
                on_select: self.on_select,
                on_wheel: self.on_wheel,
                on_copy: self.on_copy,
                on_cut: self.on_cut,
                on_paste: self.on_paste,
                on_composition_end: self.on_composition_end,
                on_composition_start: self.on_composition_start,
                on_composition_update: self.on_composition_update,
                on_blur: self.on_blur,
                on_focus,
                on_focus_in: self.on_focus_in,
                on_focus_out: self.on_focus_out,
                on_fullscreen_change: self.on_fullscreen_change,
                on_fullscreen_error: self.on_fullscreen_error,
                on_key_down: self.on_key_down,
                on_key_up: self.on_key_up,
                on_aux_click: self.on_aux_click,
                on_click: self.on_click,
                on_context_menu: self.on_context_menu,
                on_double_click: self.on_double_click,
                on_mouse_down: self.on_mouse_down,
                on_mouse_enter: self.on_mouse_enter,
                on_mouse_leave: self.on_mouse_leave,
                on_mouse_move: self.on_mouse_move,
                on_mouse_out: self.on_mouse_out,
                on_mouse_over: self.on_mouse_over,
                on_mouse_up: self.on_mouse_up,
                on_touch_cancel: self.on_touch_cancel,
                on_touch_end: self.on_touch_end,
                on_touch_move: self.on_touch_move,
                on_touch_start: self.on_touch_start,
            }
        }
        #[inline(always)]
        pub fn on_focus_in<V>(
            self,
            on_focus_in: V,
        ) -> super::Building<super::overwrite::on_focus_in<TypeDefs, V>> {
            super::Data {
                children: self.children,
                class: self.class,
                id: self.id,
                part: self.part,
                on_cancel: self.on_cancel,
                on_error: self.on_error,
                on_scroll: self.on_scroll,
                on_security_policy_violation: self.on_security_policy_violation,
                on_select: self.on_select,
                on_wheel: self.on_wheel,
                on_copy: self.on_copy,
                on_cut: self.on_cut,
                on_paste: self.on_paste,
                on_composition_end: self.on_composition_end,
                on_composition_start: self.on_composition_start,
                on_composition_update: self.on_composition_update,
                on_blur: self.on_blur,
                on_focus: self.on_focus,
                on_focus_in,
                on_focus_out: self.on_focus_out,
                on_fullscreen_change: self.on_fullscreen_change,
                on_fullscreen_error: self.on_fullscreen_error,
                on_key_down: self.on_key_down,
                on_key_up: self.on_key_up,
                on_aux_click: self.on_aux_click,
                on_click: self.on_click,
                on_context_menu: self.on_context_menu,
                on_double_click: self.on_double_click,
                on_mouse_down: self.on_mouse_down,
                on_mouse_enter: self.on_mouse_enter,
                on_mouse_leave: self.on_mouse_leave,
                on_mouse_move: self.on_mouse_move,
                on_mouse_out: self.on_mouse_out,
                on_mouse_over: self.on_mouse_over,
                on_mouse_up: self.on_mouse_up,
                on_touch_cancel: self.on_touch_cancel,
                on_touch_end: self.on_touch_end,
                on_touch_move: self.on_touch_move,
                on_touch_start: self.on_touch_start,
            }
        }
        #[inline(always)]
        pub fn on_focus_out<V>(
            self,
            on_focus_out: V,
        ) -> super::Building<super::overwrite::on_focus_out<TypeDefs, V>> {
            super::Data {
                children: self.children,
                class: self.class,
                id: self.id,
                part: self.part,
                on_cancel: self.on_cancel,
                on_error: self.on_error,
                on_scroll: self.on_scroll,
                on_security_policy_violation: self.on_security_policy_violation,
                on_select: self.on_select,
                on_wheel: self.on_wheel,
                on_copy: self.on_copy,
                on_cut: self.on_cut,
                on_paste: self.on_paste,
                on_composition_end: self.on_composition_end,
                on_composition_start: self.on_composition_start,
                on_composition_update: self.on_composition_update,
                on_blur: self.on_blur,
                on_focus: self.on_focus,
                on_focus_in: self.on_focus_in,
                on_focus_out,
                on_fullscreen_change: self.on_fullscreen_change,
                on_fullscreen_error: self.on_fullscreen_error,
                on_key_down: self.on_key_down,
                on_key_up: self.on_key_up,
                on_aux_click: self.on_aux_click,
                on_click: self.on_click,
                on_context_menu: self.on_context_menu,
                on_double_click: self.on_double_click,
                on_mouse_down: self.on_mouse_down,
                on_mouse_enter: self.on_mouse_enter,
                on_mouse_leave: self.on_mouse_leave,
                on_mouse_move: self.on_mouse_move,
                on_mouse_out: self.on_mouse_out,
                on_mouse_over: self.on_mouse_over,
                on_mouse_up: self.on_mouse_up,
                on_touch_cancel: self.on_touch_cancel,
                on_touch_end: self.on_touch_end,
                on_touch_move: self.on_touch_move,
                on_touch_start: self.on_touch_start,
            }
        }
        #[inline(always)]
        pub fn on_fullscreen_change<V>(
            self,
            on_fullscreen_change: V,
        ) -> super::Building<super::overwrite::on_fullscreen_change<TypeDefs, V>> {
            super::Data {
                children: self.children,
                class: self.class,
                id: self.id,
                part: self.part,
                on_cancel: self.on_cancel,
                on_error: self.on_error,
                on_scroll: self.on_scroll,
                on_security_policy_violation: self.on_security_policy_violation,
                on_select: self.on_select,
                on_wheel: self.on_wheel,
                on_copy: self.on_copy,
                on_cut: self.on_cut,
                on_paste: self.on_paste,
                on_composition_end: self.on_composition_end,
                on_composition_start: self.on_composition_start,
                on_composition_update: self.on_composition_update,
                on_blur: self.on_blur,
                on_focus: self.on_focus,
                on_focus_in: self.on_focus_in,
                on_focus_out: self.on_focus_out,
                on_fullscreen_change,
                on_fullscreen_error: self.on_fullscreen_error,
                on_key_down: self.on_key_down,
                on_key_up: self.on_key_up,
                on_aux_click: self.on_aux_click,
                on_click: self.on_click,
                on_context_menu: self.on_context_menu,
                on_double_click: self.on_double_click,
                on_mouse_down: self.on_mouse_down,
                on_mouse_enter: self.on_mouse_enter,
                on_mouse_leave: self.on_mouse_leave,
                on_mouse_move: self.on_mouse_move,
                on_mouse_out: self.on_mouse_out,
                on_mouse_over: self.on_mouse_over,
                on_mouse_up: self.on_mouse_up,
                on_touch_cancel: self.on_touch_cancel,
                on_touch_end: self.on_touch_end,
                on_touch_move: self.on_touch_move,
                on_touch_start: self.on_touch_start,
            }
        }
        #[inline(always)]
        pub fn on_fullscreen_error<V>(
            self,
            on_fullscreen_error: V,
        ) -> super::Building<super::overwrite::on_fullscreen_error<TypeDefs, V>> {
            super::Data {
                children: self.children,
                class: self.class,
                id: self.id,
                part: self.part,
                on_cancel: self.on_cancel,
                on_error: self.on_error,
                on_scroll: self.on_scroll,
                on_security_policy_violation: self.on_security_policy_violation,
                on_select: self.on_select,
                on_wheel: self.on_wheel,
                on_copy: self.on_copy,
                on_cut: self.on_cut,
                on_paste: self.on_paste,
                on_composition_end: self.on_composition_end,
                on_composition_start: self.on_composition_start,
                on_composition_update: self.on_composition_update,
                on_blur: self.on_blur,
                on_focus: self.on_focus,
                on_focus_in: self.on_focus_in,
                on_focus_out: self.on_focus_out,
                on_fullscreen_change: self.on_fullscreen_change,
                on_fullscreen_error,
                on_key_down: self.on_key_down,
                on_key_up: self.on_key_up,
                on_aux_click: self.on_aux_click,
                on_click: self.on_click,
                on_context_menu: self.on_context_menu,
                on_double_click: self.on_double_click,
                on_mouse_down: self.on_mouse_down,
                on_mouse_enter: self.on_mouse_enter,
                on_mouse_leave: self.on_mouse_leave,
                on_mouse_move: self.on_mouse_move,
                on_mouse_out: self.on_mouse_out,
                on_mouse_over: self.on_mouse_over,
                on_mouse_up: self.on_mouse_up,
                on_touch_cancel: self.on_touch_cancel,
                on_touch_end: self.on_touch_end,
                on_touch_move: self.on_touch_move,
                on_touch_start: self.on_touch_start,
            }
        }
        #[inline(always)]
        pub fn on_key_down<V>(
            self,
            on_key_down: V,
        ) -> super::Building<super::overwrite::on_key_down<TypeDefs, V>> {
            super::Data {
                children: self.children,
                class: self.class,
                id: self.id,
                part: self.part,
                on_cancel: self.on_cancel,
                on_error: self.on_error,
                on_scroll: self.on_scroll,
                on_security_policy_violation: self.on_security_policy_violation,
                on_select: self.on_select,
                on_wheel: self.on_wheel,
                on_copy: self.on_copy,
                on_cut: self.on_cut,
                on_paste: self.on_paste,
                on_composition_end: self.on_composition_end,
                on_composition_start: self.on_composition_start,
                on_composition_update: self.on_composition_update,
                on_blur: self.on_blur,
                on_focus: self.on_focus,
                on_focus_in: self.on_focus_in,
                on_focus_out: self.on_focus_out,
                on_fullscreen_change: self.on_fullscreen_change,
                on_fullscreen_error: self.on_fullscreen_error,
                on_key_down,
                on_key_up: self.on_key_up,
                on_aux_click: self.on_aux_click,
                on_click: self.on_click,
                on_context_menu: self.on_context_menu,
                on_double_click: self.on_double_click,
                on_mouse_down: self.on_mouse_down,
                on_mouse_enter: self.on_mouse_enter,
                on_mouse_leave: self.on_mouse_leave,
                on_mouse_move: self.on_mouse_move,
                on_mouse_out: self.on_mouse_out,
                on_mouse_over: self.on_mouse_over,
                on_mouse_up: self.on_mouse_up,
                on_touch_cancel: self.on_touch_cancel,
                on_touch_end: self.on_touch_end,
                on_touch_move: self.on_touch_move,
                on_touch_start: self.on_touch_start,
            }
        }
        #[inline(always)]
        pub fn on_key_up<V>(
            self,
            on_key_up: V,
        ) -> super::Building<super::overwrite::on_key_up<TypeDefs, V>> {
            super::Data {
                children: self.children,
                class: self.class,
                id: self.id,
                part: self.part,
                on_cancel: self.on_cancel,
                on_error: self.on_error,
                on_scroll: self.on_scroll,
                on_security_policy_violation: self.on_security_policy_violation,
                on_select: self.on_select,
                on_wheel: self.on_wheel,
                on_copy: self.on_copy,
                on_cut: self.on_cut,
                on_paste: self.on_paste,
                on_composition_end: self.on_composition_end,
                on_composition_start: self.on_composition_start,
                on_composition_update: self.on_composition_update,
                on_blur: self.on_blur,
                on_focus: self.on_focus,
                on_focus_in: self.on_focus_in,
                on_focus_out: self.on_focus_out,
                on_fullscreen_change: self.on_fullscreen_change,
                on_fullscreen_error: self.on_fullscreen_error,
                on_key_down: self.on_key_down,
                on_key_up,
                on_aux_click: self.on_aux_click,
                on_click: self.on_click,
                on_context_menu: self.on_context_menu,
                on_double_click: self.on_double_click,
                on_mouse_down: self.on_mouse_down,
                on_mouse_enter: self.on_mouse_enter,
                on_mouse_leave: self.on_mouse_leave,
                on_mouse_move: self.on_mouse_move,
                on_mouse_out: self.on_mouse_out,
                on_mouse_over: self.on_mouse_over,
                on_mouse_up: self.on_mouse_up,
                on_touch_cancel: self.on_touch_cancel,
                on_touch_end: self.on_touch_end,
                on_touch_move: self.on_touch_move,
                on_touch_start: self.on_touch_start,
            }
        }
        #[inline(always)]
        pub fn on_aux_click<V>(
            self,
            on_aux_click: V,
        ) -> super::Building<super::overwrite::on_aux_click<TypeDefs, V>> {
            super::Data {
                children: self.children,
                class: self.class,
                id: self.id,
                part: self.part,
                on_cancel: self.on_cancel,
                on_error: self.on_error,
                on_scroll: self.on_scroll,
                on_security_policy_violation: self.on_security_policy_violation,
                on_select: self.on_select,
                on_wheel: self.on_wheel,
                on_copy: self.on_copy,
                on_cut: self.on_cut,
                on_paste: self.on_paste,
                on_composition_end: self.on_composition_end,
                on_composition_start: self.on_composition_start,
                on_composition_update: self.on_composition_update,
                on_blur: self.on_blur,
                on_focus: self.on_focus,
                on_focus_in: self.on_focus_in,
                on_focus_out: self.on_focus_out,
                on_fullscreen_change: self.on_fullscreen_change,
                on_fullscreen_error: self.on_fullscreen_error,
                on_key_down: self.on_key_down,
                on_key_up: self.on_key_up,
                on_aux_click,
                on_click: self.on_click,
                on_context_menu: self.on_context_menu,
                on_double_click: self.on_double_click,
                on_mouse_down: self.on_mouse_down,
                on_mouse_enter: self.on_mouse_enter,
                on_mouse_leave: self.on_mouse_leave,
                on_mouse_move: self.on_mouse_move,
                on_mouse_out: self.on_mouse_out,
                on_mouse_over: self.on_mouse_over,
                on_mouse_up: self.on_mouse_up,
                on_touch_cancel: self.on_touch_cancel,
                on_touch_end: self.on_touch_end,
                on_touch_move: self.on_touch_move,
                on_touch_start: self.on_touch_start,
            }
        }
        #[inline(always)]
        pub fn on_click<V>(
            self,
            on_click: V,
        ) -> super::Building<super::overwrite::on_click<TypeDefs, V>> {
            super::Data {
                children: self.children,
                class: self.class,
                id: self.id,
                part: self.part,
                on_cancel: self.on_cancel,
                on_error: self.on_error,
                on_scroll: self.on_scroll,
                on_security_policy_violation: self.on_security_policy_violation,
                on_select: self.on_select,
                on_wheel: self.on_wheel,
                on_copy: self.on_copy,
                on_cut: self.on_cut,
                on_paste: self.on_paste,
                on_composition_end: self.on_composition_end,
                on_composition_start: self.on_composition_start,
                on_composition_update: self.on_composition_update,
                on_blur: self.on_blur,
                on_focus: self.on_focus,
                on_focus_in: self.on_focus_in,
                on_focus_out: self.on_focus_out,
                on_fullscreen_change: self.on_fullscreen_change,
                on_fullscreen_error: self.on_fullscreen_error,
                on_key_down: self.on_key_down,
                on_key_up: self.on_key_up,
                on_aux_click: self.on_aux_click,
                on_click,
                on_context_menu: self.on_context_menu,
                on_double_click: self.on_double_click,
                on_mouse_down: self.on_mouse_down,
                on_mouse_enter: self.on_mouse_enter,
                on_mouse_leave: self.on_mouse_leave,
                on_mouse_move: self.on_mouse_move,
                on_mouse_out: self.on_mouse_out,
                on_mouse_over: self.on_mouse_over,
                on_mouse_up: self.on_mouse_up,
                on_touch_cancel: self.on_touch_cancel,
                on_touch_end: self.on_touch_end,
                on_touch_move: self.on_touch_move,
                on_touch_start: self.on_touch_start,
            }
        }
        #[inline(always)]
        pub fn on_context_menu<V>(
            self,
            on_context_menu: V,
        ) -> super::Building<super::overwrite::on_context_menu<TypeDefs, V>> {
            super::Data {
                children: self.children,
                class: self.class,
                id: self.id,
                part: self.part,
                on_cancel: self.on_cancel,
                on_error: self.on_error,
                on_scroll: self.on_scroll,
                on_security_policy_violation: self.on_security_policy_violation,
                on_select: self.on_select,
                on_wheel: self.on_wheel,
                on_copy: self.on_copy,
                on_cut: self.on_cut,
                on_paste: self.on_paste,
                on_composition_end: self.on_composition_end,
                on_composition_start: self.on_composition_start,
                on_composition_update: self.on_composition_update,
                on_blur: self.on_blur,
                on_focus: self.on_focus,
                on_focus_in: self.on_focus_in,
                on_focus_out: self.on_focus_out,
                on_fullscreen_change: self.on_fullscreen_change,
                on_fullscreen_error: self.on_fullscreen_error,
                on_key_down: self.on_key_down,
                on_key_up: self.on_key_up,
                on_aux_click: self.on_aux_click,
                on_click: self.on_click,
                on_context_menu,
                on_double_click: self.on_double_click,
                on_mouse_down: self.on_mouse_down,
                on_mouse_enter: self.on_mouse_enter,
                on_mouse_leave: self.on_mouse_leave,
                on_mouse_move: self.on_mouse_move,
                on_mouse_out: self.on_mouse_out,
                on_mouse_over: self.on_mouse_over,
                on_mouse_up: self.on_mouse_up,
                on_touch_cancel: self.on_touch_cancel,
                on_touch_end: self.on_touch_end,
                on_touch_move: self.on_touch_move,
                on_touch_start: self.on_touch_start,
            }
        }
        #[inline(always)]
        pub fn on_double_click<V>(
            self,
            on_double_click: V,
        ) -> super::Building<super::overwrite::on_double_click<TypeDefs, V>> {
            super::Data {
                children: self.children,
                class: self.class,
                id: self.id,
                part: self.part,
                on_cancel: self.on_cancel,
                on_error: self.on_error,
                on_scroll: self.on_scroll,
                on_security_policy_violation: self.on_security_policy_violation,
                on_select: self.on_select,
                on_wheel: self.on_wheel,
                on_copy: self.on_copy,
                on_cut: self.on_cut,
                on_paste: self.on_paste,
                on_composition_end: self.on_composition_end,
                on_composition_start: self.on_composition_start,
                on_composition_update: self.on_composition_update,
                on_blur: self.on_blur,
                on_focus: self.on_focus,
                on_focus_in: self.on_focus_in,
                on_focus_out: self.on_focus_out,
                on_fullscreen_change: self.on_fullscreen_change,
                on_fullscreen_error: self.on_fullscreen_error,
                on_key_down: self.on_key_down,
                on_key_up: self.on_key_up,
                on_aux_click: self.on_aux_click,
                on_click: self.on_click,
                on_context_menu: self.on_context_menu,
                on_double_click,
                on_mouse_down: self.on_mouse_down,
                on_mouse_enter: self.on_mouse_enter,
                on_mouse_leave: self.on_mouse_leave,
                on_mouse_move: self.on_mouse_move,
                on_mouse_out: self.on_mouse_out,
                on_mouse_over: self.on_mouse_over,
                on_mouse_up: self.on_mouse_up,
                on_touch_cancel: self.on_touch_cancel,
                on_touch_end: self.on_touch_end,
                on_touch_move: self.on_touch_move,
                on_touch_start: self.on_touch_start,
            }
        }
        #[inline(always)]
        pub fn on_mouse_down<V>(
            self,
            on_mouse_down: V,
        ) -> super::Building<super::overwrite::on_mouse_down<TypeDefs, V>> {
            super::Data {
                children: self.children,
                class: self.class,
                id: self.id,
                part: self.part,
                on_cancel: self.on_cancel,
                on_error: self.on_error,
                on_scroll: self.on_scroll,
                on_security_policy_violation: self.on_security_policy_violation,
                on_select: self.on_select,
                on_wheel: self.on_wheel,
                on_copy: self.on_copy,
                on_cut: self.on_cut,
                on_paste: self.on_paste,
                on_composition_end: self.on_composition_end,
                on_composition_start: self.on_composition_start,
                on_composition_update: self.on_composition_update,
                on_blur: self.on_blur,
                on_focus: self.on_focus,
                on_focus_in: self.on_focus_in,
                on_focus_out: self.on_focus_out,
                on_fullscreen_change: self.on_fullscreen_change,
                on_fullscreen_error: self.on_fullscreen_error,
                on_key_down: self.on_key_down,
                on_key_up: self.on_key_up,
                on_aux_click: self.on_aux_click,
                on_click: self.on_click,
                on_context_menu: self.on_context_menu,
                on_double_click: self.on_double_click,
                on_mouse_down,
                on_mouse_enter: self.on_mouse_enter,
                on_mouse_leave: self.on_mouse_leave,
                on_mouse_move: self.on_mouse_move,
                on_mouse_out: self.on_mouse_out,
                on_mouse_over: self.on_mouse_over,
                on_mouse_up: self.on_mouse_up,
                on_touch_cancel: self.on_touch_cancel,
                on_touch_end: self.on_touch_end,
                on_touch_move: self.on_touch_move,
                on_touch_start: self.on_touch_start,
            }
        }
        #[inline(always)]
        pub fn on_mouse_enter<V>(
            self,
            on_mouse_enter: V,
        ) -> super::Building<super::overwrite::on_mouse_enter<TypeDefs, V>> {
            super::Data {
                children: self.children,
                class: self.class,
                id: self.id,
                part: self.part,
                on_cancel: self.on_cancel,
                on_error: self.on_error,
                on_scroll: self.on_scroll,
                on_security_policy_violation: self.on_security_policy_violation,
                on_select: self.on_select,
                on_wheel: self.on_wheel,
                on_copy: self.on_copy,
                on_cut: self.on_cut,
                on_paste: self.on_paste,
                on_composition_end: self.on_composition_end,
                on_composition_start: self.on_composition_start,
                on_composition_update: self.on_composition_update,
                on_blur: self.on_blur,
                on_focus: self.on_focus,
                on_focus_in: self.on_focus_in,
                on_focus_out: self.on_focus_out,
                on_fullscreen_change: self.on_fullscreen_change,
                on_fullscreen_error: self.on_fullscreen_error,
                on_key_down: self.on_key_down,
                on_key_up: self.on_key_up,
                on_aux_click: self.on_aux_click,
                on_click: self.on_click,
                on_context_menu: self.on_context_menu,
                on_double_click: self.on_double_click,
                on_mouse_down: self.on_mouse_down,
                on_mouse_enter,
                on_mouse_leave: self.on_mouse_leave,
                on_mouse_move: self.on_mouse_move,
                on_mouse_out: self.on_mouse_out,
                on_mouse_over: self.on_mouse_over,
                on_mouse_up: self.on_mouse_up,
                on_touch_cancel: self.on_touch_cancel,
                on_touch_end: self.on_touch_end,
                on_touch_move: self.on_touch_move,
                on_touch_start: self.on_touch_start,
            }
        }
        #[inline(always)]
        pub fn on_mouse_leave<V>(
            self,
            on_mouse_leave: V,
        ) -> super::Building<super::overwrite::on_mouse_leave<TypeDefs, V>> {
            super::Data {
                children: self.children,
                class: self.class,
                id: self.id,
                part: self.part,
                on_cancel: self.on_cancel,
                on_error: self.on_error,
                on_scroll: self.on_scroll,
                on_security_policy_violation: self.on_security_policy_violation,
                on_select: self.on_select,
                on_wheel: self.on_wheel,
                on_copy: self.on_copy,
                on_cut: self.on_cut,
                on_paste: self.on_paste,
                on_composition_end: self.on_composition_end,
                on_composition_start: self.on_composition_start,
                on_composition_update: self.on_composition_update,
                on_blur: self.on_blur,
                on_focus: self.on_focus,
                on_focus_in: self.on_focus_in,
                on_focus_out: self.on_focus_out,
                on_fullscreen_change: self.on_fullscreen_change,
                on_fullscreen_error: self.on_fullscreen_error,
                on_key_down: self.on_key_down,
                on_key_up: self.on_key_up,
                on_aux_click: self.on_aux_click,
                on_click: self.on_click,
                on_context_menu: self.on_context_menu,
                on_double_click: self.on_double_click,
                on_mouse_down: self.on_mouse_down,
                on_mouse_enter: self.on_mouse_enter,
                on_mouse_leave,
                on_mouse_move: self.on_mouse_move,
                on_mouse_out: self.on_mouse_out,
                on_mouse_over: self.on_mouse_over,
                on_mouse_up: self.on_mouse_up,
                on_touch_cancel: self.on_touch_cancel,
                on_touch_end: self.on_touch_end,
                on_touch_move: self.on_touch_move,
                on_touch_start: self.on_touch_start,
            }
        }
        #[inline(always)]
        pub fn on_mouse_move<V>(
            self,
            on_mouse_move: V,
        ) -> super::Building<super::overwrite::on_mouse_move<TypeDefs, V>> {
            super::Data {
                children: self.children,
                class: self.class,
                id: self.id,
                part: self.part,
                on_cancel: self.on_cancel,
                on_error: self.on_error,
                on_scroll: self.on_scroll,
                on_security_policy_violation: self.on_security_policy_violation,
                on_select: self.on_select,
                on_wheel: self.on_wheel,
                on_copy: self.on_copy,
                on_cut: self.on_cut,
                on_paste: self.on_paste,
                on_composition_end: self.on_composition_end,
                on_composition_start: self.on_composition_start,
                on_composition_update: self.on_composition_update,
                on_blur: self.on_blur,
                on_focus: self.on_focus,
                on_focus_in: self.on_focus_in,
                on_focus_out: self.on_focus_out,
                on_fullscreen_change: self.on_fullscreen_change,
                on_fullscreen_error: self.on_fullscreen_error,
                on_key_down: self.on_key_down,
                on_key_up: self.on_key_up,
                on_aux_click: self.on_aux_click,
                on_click: self.on_click,
                on_context_menu: self.on_context_menu,
                on_double_click: self.on_double_click,
                on_mouse_down: self.on_mouse_down,
                on_mouse_enter: self.on_mouse_enter,
                on_mouse_leave: self.on_mouse_leave,
                on_mouse_move,
                on_mouse_out: self.on_mouse_out,
                on_mouse_over: self.on_mouse_over,
                on_mouse_up: self.on_mouse_up,
                on_touch_cancel: self.on_touch_cancel,
                on_touch_end: self.on_touch_end,
                on_touch_move: self.on_touch_move,
                on_touch_start: self.on_touch_start,
            }
        }
        #[inline(always)]
        pub fn on_mouse_out<V>(
            self,
            on_mouse_out: V,
        ) -> super::Building<super::overwrite::on_mouse_out<TypeDefs, V>> {
            super::Data {
                children: self.children,
                class: self.class,
                id: self.id,
                part: self.part,
                on_cancel: self.on_cancel,
                on_error: self.on_error,
                on_scroll: self.on_scroll,
                on_security_policy_violation: self.on_security_policy_violation,
                on_select: self.on_select,
                on_wheel: self.on_wheel,
                on_copy: self.on_copy,
                on_cut: self.on_cut,
                on_paste: self.on_paste,
                on_composition_end: self.on_composition_end,
                on_composition_start: self.on_composition_start,
                on_composition_update: self.on_composition_update,
                on_blur: self.on_blur,
                on_focus: self.on_focus,
                on_focus_in: self.on_focus_in,
                on_focus_out: self.on_focus_out,
                on_fullscreen_change: self.on_fullscreen_change,
                on_fullscreen_error: self.on_fullscreen_error,
                on_key_down: self.on_key_down,
                on_key_up: self.on_key_up,
                on_aux_click: self.on_aux_click,
                on_click: self.on_click,
                on_context_menu: self.on_context_menu,
                on_double_click: self.on_double_click,
                on_mouse_down: self.on_mouse_down,
                on_mouse_enter: self.on_mouse_enter,
                on_mouse_leave: self.on_mouse_leave,
                on_mouse_move: self.on_mouse_move,
                on_mouse_out,
                on_mouse_over: self.on_mouse_over,
                on_mouse_up: self.on_mouse_up,
                on_touch_cancel: self.on_touch_cancel,
                on_touch_end: self.on_touch_end,
                on_touch_move: self.on_touch_move,
                on_touch_start: self.on_touch_start,
            }
        }
        #[inline(always)]
        pub fn on_mouse_over<V>(
            self,
            on_mouse_over: V,
        ) -> super::Building<super::overwrite::on_mouse_over<TypeDefs, V>> {
            super::Data {
                children: self.children,
                class: self.class,
                id: self.id,
                part: self.part,
                on_cancel: self.on_cancel,
                on_error: self.on_error,
                on_scroll: self.on_scroll,
                on_security_policy_violation: self.on_security_policy_violation,
                on_select: self.on_select,
                on_wheel: self.on_wheel,
                on_copy: self.on_copy,
                on_cut: self.on_cut,
                on_paste: self.on_paste,
                on_composition_end: self.on_composition_end,
                on_composition_start: self.on_composition_start,
                on_composition_update: self.on_composition_update,
                on_blur: self.on_blur,
                on_focus: self.on_focus,
                on_focus_in: self.on_focus_in,
                on_focus_out: self.on_focus_out,
                on_fullscreen_change: self.on_fullscreen_change,
                on_fullscreen_error: self.on_fullscreen_error,
                on_key_down: self.on_key_down,
                on_key_up: self.on_key_up,
                on_aux_click: self.on_aux_click,
                on_click: self.on_click,
                on_context_menu: self.on_context_menu,
                on_double_click: self.on_double_click,
                on_mouse_down: self.on_mouse_down,
                on_mouse_enter: self.on_mouse_enter,
                on_mouse_leave: self.on_mouse_leave,
                on_mouse_move: self.on_mouse_move,
                on_mouse_out: self.on_mouse_out,
                on_mouse_over,
                on_mouse_up: self.on_mouse_up,
                on_touch_cancel: self.on_touch_cancel,
                on_touch_end: self.on_touch_end,
                on_touch_move: self.on_touch_move,
                on_touch_start: self.on_touch_start,
            }
        }
        #[inline(always)]
        pub fn on_mouse_up<V>(
            self,
            on_mouse_up: V,
        ) -> super::Building<super::overwrite::on_mouse_up<TypeDefs, V>> {
            super::Data {
                children: self.children,
                class: self.class,
                id: self.id,
                part: self.part,
                on_cancel: self.on_cancel,
                on_error: self.on_error,
                on_scroll: self.on_scroll,
                on_security_policy_violation: self.on_security_policy_violation,
                on_select: self.on_select,
                on_wheel: self.on_wheel,
                on_copy: self.on_copy,
                on_cut: self.on_cut,
                on_paste: self.on_paste,
                on_composition_end: self.on_composition_end,
                on_composition_start: self.on_composition_start,
                on_composition_update: self.on_composition_update,
                on_blur: self.on_blur,
                on_focus: self.on_focus,
                on_focus_in: self.on_focus_in,
                on_focus_out: self.on_focus_out,
                on_fullscreen_change: self.on_fullscreen_change,
                on_fullscreen_error: self.on_fullscreen_error,
                on_key_down: self.on_key_down,
                on_key_up: self.on_key_up,
                on_aux_click: self.on_aux_click,
                on_click: self.on_click,
                on_context_menu: self.on_context_menu,
                on_double_click: self.on_double_click,
                on_mouse_down: self.on_mouse_down,
                on_mouse_enter: self.on_mouse_enter,
                on_mouse_leave: self.on_mouse_leave,
                on_mouse_move: self.on_mouse_move,
                on_mouse_out: self.on_mouse_out,
                on_mouse_over: self.on_mouse_over,
                on_mouse_up,
                on_touch_cancel: self.on_touch_cancel,
                on_touch_end: self.on_touch_end,
                on_touch_move: self.on_touch_move,
                on_touch_start: self.on_touch_start,
            }
        }
        #[inline(always)]
        pub fn on_touch_cancel<V>(
            self,
            on_touch_cancel: V,
        ) -> super::Building<super::overwrite::on_touch_cancel<TypeDefs, V>> {
            super::Data {
                children: self.children,
                class: self.class,
                id: self.id,
                part: self.part,
                on_cancel: self.on_cancel,
                on_error: self.on_error,
                on_scroll: self.on_scroll,
                on_security_policy_violation: self.on_security_policy_violation,
                on_select: self.on_select,
                on_wheel: self.on_wheel,
                on_copy: self.on_copy,
                on_cut: self.on_cut,
                on_paste: self.on_paste,
                on_composition_end: self.on_composition_end,
                on_composition_start: self.on_composition_start,
                on_composition_update: self.on_composition_update,
                on_blur: self.on_blur,
                on_focus: self.on_focus,
                on_focus_in: self.on_focus_in,
                on_focus_out: self.on_focus_out,
                on_fullscreen_change: self.on_fullscreen_change,
                on_fullscreen_error: self.on_fullscreen_error,
                on_key_down: self.on_key_down,
                on_key_up: self.on_key_up,
                on_aux_click: self.on_aux_click,
                on_click: self.on_click,
                on_context_menu: self.on_context_menu,
                on_double_click: self.on_double_click,
                on_mouse_down: self.on_mouse_down,
                on_mouse_enter: self.on_mouse_enter,
                on_mouse_leave: self.on_mouse_leave,
                on_mouse_move: self.on_mouse_move,
                on_mouse_out: self.on_mouse_out,
                on_mouse_over: self.on_mouse_over,
                on_mouse_up: self.on_mouse_up,
                on_touch_cancel,
                on_touch_end: self.on_touch_end,
                on_touch_move: self.on_touch_move,
                on_touch_start: self.on_touch_start,
            }
        }
        #[inline(always)]
        pub fn on_touch_end<V>(
            self,
            on_touch_end: V,
        ) -> super::Building<super::overwrite::on_touch_end<TypeDefs, V>> {
            super::Data {
                children: self.children,
                class: self.class,
                id: self.id,
                part: self.part,
                on_cancel: self.on_cancel,
                on_error: self.on_error,
                on_scroll: self.on_scroll,
                on_security_policy_violation: self.on_security_policy_violation,
                on_select: self.on_select,
                on_wheel: self.on_wheel,
                on_copy: self.on_copy,
                on_cut: self.on_cut,
                on_paste: self.on_paste,
                on_composition_end: self.on_composition_end,
                on_composition_start: self.on_composition_start,
                on_composition_update: self.on_composition_update,
                on_blur: self.on_blur,
                on_focus: self.on_focus,
                on_focus_in: self.on_focus_in,
                on_focus_out: self.on_focus_out,
                on_fullscreen_change: self.on_fullscreen_change,
                on_fullscreen_error: self.on_fullscreen_error,
                on_key_down: self.on_key_down,
                on_key_up: self.on_key_up,
                on_aux_click: self.on_aux_click,
                on_click: self.on_click,
                on_context_menu: self.on_context_menu,
                on_double_click: self.on_double_click,
                on_mouse_down: self.on_mouse_down,
                on_mouse_enter: self.on_mouse_enter,
                on_mouse_leave: self.on_mouse_leave,
                on_mouse_move: self.on_mouse_move,
                on_mouse_out: self.on_mouse_out,
                on_mouse_over: self.on_mouse_over,
                on_mouse_up: self.on_mouse_up,
                on_touch_cancel: self.on_touch_cancel,
                on_touch_end,
                on_touch_move: self.on_touch_move,
                on_touch_start: self.on_touch_start,
            }
        }
        #[inline(always)]
        pub fn on_touch_move<V>(
            self,
            on_touch_move: V,
        ) -> super::Building<super::overwrite::on_touch_move<TypeDefs, V>> {
            super::Data {
                children: self.children,
                class: self.class,
                id: self.id,
                part: self.part,
                on_cancel: self.on_cancel,
                on_error: self.on_error,
                on_scroll: self.on_scroll,
                on_security_policy_violation: self.on_security_policy_violation,
                on_select: self.on_select,
                on_wheel: self.on_wheel,
                on_copy: self.on_copy,
                on_cut: self.on_cut,
                on_paste: self.on_paste,
                on_composition_end: self.on_composition_end,
                on_composition_start: self.on_composition_start,
                on_composition_update: self.on_composition_update,
                on_blur: self.on_blur,
                on_focus: self.on_focus,
                on_focus_in: self.on_focus_in,
                on_focus_out: self.on_focus_out,
                on_fullscreen_change: self.on_fullscreen_change,
                on_fullscreen_error: self.on_fullscreen_error,
                on_key_down: self.on_key_down,
                on_key_up: self.on_key_up,
                on_aux_click: self.on_aux_click,
                on_click: self.on_click,
                on_context_menu: self.on_context_menu,
                on_double_click: self.on_double_click,
                on_mouse_down: self.on_mouse_down,
                on_mouse_enter: self.on_mouse_enter,
                on_mouse_leave: self.on_mouse_leave,
                on_mouse_move: self.on_mouse_move,
                on_mouse_out: self.on_mouse_out,
                on_mouse_over: self.on_mouse_over,
                on_mouse_up: self.on_mouse_up,
                on_touch_cancel: self.on_touch_cancel,
                on_touch_end: self.on_touch_end,
                on_touch_move,
                on_touch_start: self.on_touch_start,
            }
        }
        #[inline(always)]
        pub fn on_touch_start<V>(
            self,
            on_touch_start: V,
        ) -> super::Building<super::overwrite::on_touch_start<TypeDefs, V>> {
            super::Data {
                children: self.children,
                class: self.class,
                id: self.id,
                part: self.part,
                on_cancel: self.on_cancel,
                on_error: self.on_error,
                on_scroll: self.on_scroll,
                on_security_policy_violation: self.on_security_policy_violation,
                on_select: self.on_select,
                on_wheel: self.on_wheel,
                on_copy: self.on_copy,
                on_cut: self.on_cut,
                on_paste: self.on_paste,
                on_composition_end: self.on_composition_end,
                on_composition_start: self.on_composition_start,
                on_composition_update: self.on_composition_update,
                on_blur: self.on_blur,
                on_focus: self.on_focus,
                on_focus_in: self.on_focus_in,
                on_focus_out: self.on_focus_out,
                on_fullscreen_change: self.on_fullscreen_change,
                on_fullscreen_error: self.on_fullscreen_error,
                on_key_down: self.on_key_down,
                on_key_up: self.on_key_up,
                on_aux_click: self.on_aux_click,
                on_click: self.on_click,
                on_context_menu: self.on_context_menu,
                on_double_click: self.on_double_click,
                on_mouse_down: self.on_mouse_down,
                on_mouse_enter: self.on_mouse_enter,
                on_mouse_leave: self.on_mouse_leave,
                on_mouse_move: self.on_mouse_move,
                on_mouse_out: self.on_mouse_out,
                on_mouse_over: self.on_mouse_over,
                on_mouse_up: self.on_mouse_up,
                on_touch_cancel: self.on_touch_cancel,
                on_touch_end: self.on_touch_end,
                on_touch_move: self.on_touch_move,
                on_touch_start,
            }
        }
    }
}
#[cfg(feature = "dom")]
mod impl_update_element {
    #[allow(unused_imports)]
    use super::super::*;
    impl<TypeDefs: ?::core::marker::Sized + super::Types>
        crate::imports::frender_dom::props::UpdateElement<web_sys::Element>
        for super::Data<TypeDefs>
    where
        TypeDefs::children: ::frender_core::UpdateRenderState<::frender_dom::Dom>,
        TypeDefs::on_cancel:
            crate::imports::frender_html::props::UpdateDomEventListener<events::Cancel>,
        TypeDefs::on_error:
            crate::imports::frender_html::props::UpdateDomEventListener<events::Error>,
        TypeDefs::on_scroll:
            crate::imports::frender_html::props::UpdateDomEventListener<events::Scroll>,
        TypeDefs::on_security_policy_violation:
            crate::imports::frender_html::props::UpdateDomEventListener<
                events::SecurityPolicyViolation,
            >,
        TypeDefs::on_select:
            crate::imports::frender_html::props::UpdateDomEventListener<events::Select>,
        TypeDefs::on_wheel:
            crate::imports::frender_html::props::UpdateDomEventListener<events::Wheel>,
        TypeDefs::on_copy:
            crate::imports::frender_html::props::UpdateDomEventListener<events::Copy>,
        TypeDefs::on_cut: crate::imports::frender_html::props::UpdateDomEventListener<events::Cut>,
        TypeDefs::on_paste:
            crate::imports::frender_html::props::UpdateDomEventListener<events::Paste>,
        TypeDefs::on_composition_end:
            crate::imports::frender_html::props::UpdateDomEventListener<events::CompositionEnd>,
        TypeDefs::on_composition_start:
            crate::imports::frender_html::props::UpdateDomEventListener<events::CompositionStart>,
        TypeDefs::on_composition_update:
            crate::imports::frender_html::props::UpdateDomEventListener<events::CompositionUpdate>,
        TypeDefs::on_blur:
            crate::imports::frender_html::props::UpdateDomEventListener<events::Blur>,
        TypeDefs::on_focus:
            crate::imports::frender_html::props::UpdateDomEventListener<events::Focus>,
        TypeDefs::on_focus_in:
            crate::imports::frender_html::props::UpdateDomEventListener<events::FocusIn>,
        TypeDefs::on_focus_out:
            crate::imports::frender_html::props::UpdateDomEventListener<events::FocusOut>,
        TypeDefs::on_fullscreen_change:
            crate::imports::frender_html::props::UpdateDomEventListener<events::FullscreenChange>,
        TypeDefs::on_fullscreen_error:
            crate::imports::frender_html::props::UpdateDomEventListener<events::FullscreenError>,
        TypeDefs::on_key_down:
            crate::imports::frender_html::props::UpdateDomEventListener<events::KeyDown>,
        TypeDefs::on_key_up:
            crate::imports::frender_html::props::UpdateDomEventListener<events::KeyUp>,
        TypeDefs::on_aux_click:
            crate::imports::frender_html::props::UpdateDomEventListener<events::AuxClick>,
        TypeDefs::on_click:
            crate::imports::frender_html::props::UpdateDomEventListener<events::Click>,
        TypeDefs::on_context_menu:
            crate::imports::frender_html::props::UpdateDomEventListener<events::ContextMenu>,
        TypeDefs::on_double_click:
            crate::imports::frender_html::props::UpdateDomEventListener<events::DoubleClick>,
        TypeDefs::on_mouse_down:
            crate::imports::frender_html::props::UpdateDomEventListener<events::MouseDown>,
        TypeDefs::on_mouse_enter:
            crate::imports::frender_html::props::UpdateDomEventListener<events::MouseEnter>,
        TypeDefs::on_mouse_leave:
            crate::imports::frender_html::props::UpdateDomEventListener<events::MouseLeave>,
        TypeDefs::on_mouse_move:
            crate::imports::frender_html::props::UpdateDomEventListener<events::MouseMove>,
        TypeDefs::on_mouse_out:
            crate::imports::frender_html::props::UpdateDomEventListener<events::MouseOut>,
        TypeDefs::on_mouse_over:
            crate::imports::frender_html::props::UpdateDomEventListener<events::MouseOver>,
        TypeDefs::on_mouse_up:
            crate::imports::frender_html::props::UpdateDomEventListener<events::MouseUp>,
        TypeDefs::on_touch_cancel:
            crate::imports::frender_html::props::UpdateDomEventListener<events::TouchCancel>,
        TypeDefs::on_touch_end:
            crate::imports::frender_html::props::UpdateDomEventListener<events::TouchEnd>,
        TypeDefs::on_touch_move:
            crate::imports::frender_html::props::UpdateDomEventListener<events::TouchMove>,
        TypeDefs::on_touch_start:
            crate::imports::frender_html::props::UpdateDomEventListener<events::TouchStart>,
    {
        type State = super::render_state::RenderState<
            dyn super::render_state::RenderStateTypes<
                children = <TypeDefs::children as frender_core::UpdateRenderState<
                    frender_dom::Dom,
                >>::State,
                class = <TypeDefs::class as ::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::State,
                id = <TypeDefs::id as ::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::State,
                part = <TypeDefs::part as ::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::State,
                on_cancel = <TypeDefs::on_cancel as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::Cancel,
                >>::State,
                on_error = <TypeDefs::on_error as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::Error,
                >>::State,
                on_scroll = <TypeDefs::on_scroll as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::Scroll,
                >>::State,
                on_security_policy_violation = <TypeDefs::on_security_policy_violation as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::SecurityPolicyViolation,
                >>::State,
                on_select = <TypeDefs::on_select as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::Select,
                >>::State,
                on_wheel = <TypeDefs::on_wheel as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::Wheel,
                >>::State,
                on_copy = <TypeDefs::on_copy as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::Copy,
                >>::State,
                on_cut = <TypeDefs::on_cut as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::Cut,
                >>::State,
                on_paste = <TypeDefs::on_paste as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::Paste,
                >>::State,
                on_composition_end = <TypeDefs::on_composition_end as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::CompositionEnd,
                >>::State,
                on_composition_start = <TypeDefs::on_composition_start as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::CompositionStart,
                >>::State,
                on_composition_update = <TypeDefs::on_composition_update as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::CompositionUpdate,
                >>::State,
                on_blur = <TypeDefs::on_blur as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::Blur,
                >>::State,
                on_focus = <TypeDefs::on_focus as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::Focus,
                >>::State,
                on_focus_in = <TypeDefs::on_focus_in as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::FocusIn,
                >>::State,
                on_focus_out = <TypeDefs::on_focus_out as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::FocusOut,
                >>::State,
                on_fullscreen_change = <TypeDefs::on_fullscreen_change as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::FullscreenChange,
                >>::State,
                on_fullscreen_error = <TypeDefs::on_fullscreen_error as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::FullscreenError,
                >>::State,
                on_key_down = <TypeDefs::on_key_down as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::KeyDown,
                >>::State,
                on_key_up = <TypeDefs::on_key_up as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::KeyUp,
                >>::State,
                on_aux_click = <TypeDefs::on_aux_click as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::AuxClick,
                >>::State,
                on_click = <TypeDefs::on_click as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::Click,
                >>::State,
                on_context_menu = <TypeDefs::on_context_menu as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::ContextMenu,
                >>::State,
                on_double_click = <TypeDefs::on_double_click as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::DoubleClick,
                >>::State,
                on_mouse_down = <TypeDefs::on_mouse_down as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::MouseDown,
                >>::State,
                on_mouse_enter = <TypeDefs::on_mouse_enter as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::MouseEnter,
                >>::State,
                on_mouse_leave = <TypeDefs::on_mouse_leave as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::MouseLeave,
                >>::State,
                on_mouse_move = <TypeDefs::on_mouse_move as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::MouseMove,
                >>::State,
                on_mouse_out = <TypeDefs::on_mouse_out as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::MouseOut,
                >>::State,
                on_mouse_over = <TypeDefs::on_mouse_over as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::MouseOver,
                >>::State,
                on_mouse_up = <TypeDefs::on_mouse_up as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::MouseUp,
                >>::State,
                on_touch_cancel = <TypeDefs::on_touch_cancel as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::TouchCancel,
                >>::State,
                on_touch_end = <TypeDefs::on_touch_end as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::TouchEnd,
                >>::State,
                on_touch_move = <TypeDefs::on_touch_move as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::TouchMove,
                >>::State,
                on_touch_start = <TypeDefs::on_touch_start as crate::imports::frender_html::props::UpdateDomEventListener<
                    events::TouchStart,
                >>::State,
            >,
        >;
        fn initialize_state(
            this: Self,
            element: &web_sys::Element,
            children_ctx: &mut ::frender_dom::Dom,
        ) -> Self::State {
            let dom_element: &::web_sys::Element = element.as_ref();
            super::render_state::RenderState {
                children: ::frender_core::UpdateRenderState::initialize_render_state(
                    this.children,
                    children_ctx,
                ),
                class: <TypeDefs::class as ::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::initialize_state_and_update(
                    this.class,
                    |v| crate::imports::frender_dom::props::UpdateElementAttribute::update_element_attribute(
                        v,
                        dom_element,
                        "class",
                    ),
                    || dom_element.remove_attribute("class").unwrap(),
                ),
                id: <TypeDefs::id as ::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::initialize_state_and_update(
                    this.id,
                    |v| element.set_id(v),
                    || dom_element.remove_attribute("id").unwrap(),
                ),
                part: <TypeDefs::part as ::frender_html::props::MaybeUpdateValueWithState<
                    str,
                >>::initialize_state_and_update(
                    this.part,
                    |v| crate::imports::frender_dom::props::UpdateElementAttribute::update_element_attribute(
                        v,
                        dom_element,
                        "part",
                    ),
                    || dom_element.remove_attribute("part").unwrap(),
                ),
                on_cancel: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::Cancel,
                >::initialize_dom_event_listener_state(this.on_cancel, element),
                on_error: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::Error,
                >::initialize_dom_event_listener_state(this.on_error, element),
                on_scroll: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::Scroll,
                >::initialize_dom_event_listener_state(this.on_scroll, element),
                on_security_policy_violation: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::SecurityPolicyViolation,
                >::initialize_dom_event_listener_state(
                    this.on_security_policy_violation,
                    element,
                ),
                on_select: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::Select,
                >::initialize_dom_event_listener_state(this.on_select, element),
                on_wheel: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::Wheel,
                >::initialize_dom_event_listener_state(this.on_wheel, element),
                on_copy: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::Copy,
                >::initialize_dom_event_listener_state(this.on_copy, element),
                on_cut: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::Cut,
                >::initialize_dom_event_listener_state(this.on_cut, element),
                on_paste: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::Paste,
                >::initialize_dom_event_listener_state(this.on_paste, element),
                on_composition_end: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::CompositionEnd,
                >::initialize_dom_event_listener_state(this.on_composition_end, element),
                on_composition_start: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::CompositionStart,
                >::initialize_dom_event_listener_state(
                    this.on_composition_start,
                    element,
                ),
                on_composition_update: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::CompositionUpdate,
                >::initialize_dom_event_listener_state(
                    this.on_composition_update,
                    element,
                ),
                on_blur: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::Blur,
                >::initialize_dom_event_listener_state(this.on_blur, element),
                on_focus: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::Focus,
                >::initialize_dom_event_listener_state(this.on_focus, element),
                on_focus_in: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::FocusIn,
                >::initialize_dom_event_listener_state(this.on_focus_in, element),
                on_focus_out: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::FocusOut,
                >::initialize_dom_event_listener_state(this.on_focus_out, element),
                on_fullscreen_change: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::FullscreenChange,
                >::initialize_dom_event_listener_state(
                    this.on_fullscreen_change,
                    element,
                ),
                on_fullscreen_error: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::FullscreenError,
                >::initialize_dom_event_listener_state(
                    this.on_fullscreen_error,
                    element,
                ),
                on_key_down: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::KeyDown,
                >::initialize_dom_event_listener_state(this.on_key_down, element),
                on_key_up: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::KeyUp,
                >::initialize_dom_event_listener_state(this.on_key_up, element),
                on_aux_click: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::AuxClick,
                >::initialize_dom_event_listener_state(this.on_aux_click, element),
                on_click: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::Click,
                >::initialize_dom_event_listener_state(this.on_click, element),
                on_context_menu: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::ContextMenu,
                >::initialize_dom_event_listener_state(this.on_context_menu, element),
                on_double_click: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::DoubleClick,
                >::initialize_dom_event_listener_state(this.on_double_click, element),
                on_mouse_down: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::MouseDown,
                >::initialize_dom_event_listener_state(this.on_mouse_down, element),
                on_mouse_enter: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::MouseEnter,
                >::initialize_dom_event_listener_state(this.on_mouse_enter, element),
                on_mouse_leave: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::MouseLeave,
                >::initialize_dom_event_listener_state(this.on_mouse_leave, element),
                on_mouse_move: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::MouseMove,
                >::initialize_dom_event_listener_state(this.on_mouse_move, element),
                on_mouse_out: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::MouseOut,
                >::initialize_dom_event_listener_state(this.on_mouse_out, element),
                on_mouse_over: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::MouseOver,
                >::initialize_dom_event_listener_state(this.on_mouse_over, element),
                on_mouse_up: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::MouseUp,
                >::initialize_dom_event_listener_state(this.on_mouse_up, element),
                on_touch_cancel: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::TouchCancel,
                >::initialize_dom_event_listener_state(this.on_touch_cancel, element),
                on_touch_end: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::TouchEnd,
                >::initialize_dom_event_listener_state(this.on_touch_end, element),
                on_touch_move: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::TouchMove,
                >::initialize_dom_event_listener_state(this.on_touch_move, element),
                on_touch_start: crate::imports::frender_html::props::UpdateDomEventListener::<
                    events::TouchStart,
                >::initialize_dom_event_listener_state(this.on_touch_start, element),
            }
        }
        fn update_element(
            this: Self,
            element: &web_sys::Element,
            children_ctx: &mut ::frender_dom::Dom,
            state: ::core::pin::Pin<&mut Self::State>,
        ) {
            let state = state.pin_project();
            let dom_element: &::web_sys::Element = element.as_ref();
            ::frender_core::UpdateRenderState::update_render_state(
                this.children,
                children_ctx,
                state.children,
            );
            <TypeDefs::class as ::frender_html::props::MaybeUpdateValueWithState<
                str,
            >>::maybe_update_value_with_state(
                this.class,
                state.class,
                |v| crate::imports::frender_dom::props::UpdateElementAttribute::update_element_attribute(
                    v,
                    dom_element,
                    "class",
                ),
                || dom_element.remove_attribute("class").unwrap(),
            );
            <TypeDefs::id as ::frender_html::props::MaybeUpdateValueWithState<
                str,
            >>::maybe_update_value_with_state(
                this.id,
                state.id,
                |v| element.set_id(v),
                || dom_element.remove_attribute("id").unwrap(),
            );
            <TypeDefs::part as ::frender_html::props::MaybeUpdateValueWithState<
                str,
            >>::maybe_update_value_with_state(
                this.part,
                state.part,
                |v| crate::imports::frender_dom::props::UpdateElementAttribute::update_element_attribute(
                    v,
                    dom_element,
                    "part",
                ),
                || dom_element.remove_attribute("part").unwrap(),
            );
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::Cancel,
            >::update_dom_event_listener(this.on_cancel, element, state.on_cancel);
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::Error,
            >::update_dom_event_listener(this.on_error, element, state.on_error);
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::Scroll,
            >::update_dom_event_listener(this.on_scroll, element, state.on_scroll);
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::SecurityPolicyViolation,
            >::update_dom_event_listener(
                this.on_security_policy_violation,
                element,
                state.on_security_policy_violation,
            );
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::Select,
            >::update_dom_event_listener(this.on_select, element, state.on_select);
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::Wheel,
            >::update_dom_event_listener(this.on_wheel, element, state.on_wheel);
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::Copy,
            >::update_dom_event_listener(this.on_copy, element, state.on_copy);
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::Cut,
            >::update_dom_event_listener(this.on_cut, element, state.on_cut);
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::Paste,
            >::update_dom_event_listener(this.on_paste, element, state.on_paste);
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::CompositionEnd,
            >::update_dom_event_listener(
                this.on_composition_end,
                element,
                state.on_composition_end,
            );
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::CompositionStart,
            >::update_dom_event_listener(
                this.on_composition_start,
                element,
                state.on_composition_start,
            );
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::CompositionUpdate,
            >::update_dom_event_listener(
                this.on_composition_update,
                element,
                state.on_composition_update,
            );
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::Blur,
            >::update_dom_event_listener(this.on_blur, element, state.on_blur);
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::Focus,
            >::update_dom_event_listener(this.on_focus, element, state.on_focus);
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::FocusIn,
            >::update_dom_event_listener(this.on_focus_in, element, state.on_focus_in);
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::FocusOut,
            >::update_dom_event_listener(this.on_focus_out, element, state.on_focus_out);
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::FullscreenChange,
            >::update_dom_event_listener(
                this.on_fullscreen_change,
                element,
                state.on_fullscreen_change,
            );
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::FullscreenError,
            >::update_dom_event_listener(
                this.on_fullscreen_error,
                element,
                state.on_fullscreen_error,
            );
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::KeyDown,
            >::update_dom_event_listener(this.on_key_down, element, state.on_key_down);
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::KeyUp,
            >::update_dom_event_listener(this.on_key_up, element, state.on_key_up);
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::AuxClick,
            >::update_dom_event_listener(this.on_aux_click, element, state.on_aux_click);
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::Click,
            >::update_dom_event_listener(this.on_click, element, state.on_click);
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::ContextMenu,
            >::update_dom_event_listener(
                this.on_context_menu,
                element,
                state.on_context_menu,
            );
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::DoubleClick,
            >::update_dom_event_listener(
                this.on_double_click,
                element,
                state.on_double_click,
            );
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::MouseDown,
            >::update_dom_event_listener(
                this.on_mouse_down,
                element,
                state.on_mouse_down,
            );
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::MouseEnter,
            >::update_dom_event_listener(
                this.on_mouse_enter,
                element,
                state.on_mouse_enter,
            );
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::MouseLeave,
            >::update_dom_event_listener(
                this.on_mouse_leave,
                element,
                state.on_mouse_leave,
            );
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::MouseMove,
            >::update_dom_event_listener(
                this.on_mouse_move,
                element,
                state.on_mouse_move,
            );
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::MouseOut,
            >::update_dom_event_listener(this.on_mouse_out, element, state.on_mouse_out);
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::MouseOver,
            >::update_dom_event_listener(
                this.on_mouse_over,
                element,
                state.on_mouse_over,
            );
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::MouseUp,
            >::update_dom_event_listener(this.on_mouse_up, element, state.on_mouse_up);
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::TouchCancel,
            >::update_dom_event_listener(
                this.on_touch_cancel,
                element,
                state.on_touch_cancel,
            );
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::TouchEnd,
            >::update_dom_event_listener(this.on_touch_end, element, state.on_touch_end);
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::TouchMove,
            >::update_dom_event_listener(
                this.on_touch_move,
                element,
                state.on_touch_move,
            );
            crate::imports::frender_html::props::UpdateDomEventListener::<
                events::TouchStart,
            >::update_dom_event_listener(
                this.on_touch_start,
                element,
                state.on_touch_start,
            );
        }
    }
}
#[cfg(feature = "ssr")]
mod impl_into_ssr_data {
    #[allow(unused_imports)]
    use super::super::*;
    impl<
        TypeDefs: ?::core::marker::Sized + super::Types,
        W: ::frender_ssr::AsyncWrite + ::core::marker::Unpin,
    > ::frender_ssr::IntoSsrData<W> for super::Data<TypeDefs>
    where
        TypeDefs::children: ::frender_core::UpdateRenderState<
            ::frender_ssr::SsrContext<W>,
        >,
        <TypeDefs::children as ::frender_core::UpdateRenderState<
            ::frender_ssr::SsrContext<W>,
        >>::State: ::core::marker::Unpin,
    {
        type Children = TypeDefs::children;
        type ChildrenRenderState = <TypeDefs::children as ::frender_core::UpdateRenderState<
            ::frender_ssr::SsrContext<W>,
        >>::State;
        type Attrs = ::frender_ssr::utils::filter::FilterArray<
            ::frender_ssr::element::html::HtmlAttrPair<'static>,
            3usize,
        >;
        fn into_ssr_data(this: Self) -> (Self::Children, Self::Attrs) {
            (
                this.children,
                ::frender_ssr::utils::filter::FilterIdentity(
                    [
                        <TypeDefs::class as ::frender_html::props::MaybeUpdateValueWithState<
                            str,
                        >>::maybe_into_html_attribute_value(this.class)
                            .map(|value| (
                                ::std::borrow::Cow::Borrowed("class"),
                                if let Some(value) = value {
                                    ::frender_ssr::element::html::HtmlAttributeValue::String(
                                        value,
                                    )
                                } else {
                                    ::frender_ssr::element::html::HtmlAttributeValue::BooleanTrue
                                },
                            )),
                        <TypeDefs::id as ::frender_html::props::MaybeUpdateValueWithState<
                            str,
                        >>::maybe_into_html_attribute_value(this.id)
                            .map(|value| (
                                ::std::borrow::Cow::Borrowed("id"),
                                if let Some(value) = value {
                                    ::frender_ssr::element::html::HtmlAttributeValue::String(
                                        value,
                                    )
                                } else {
                                    ::frender_ssr::element::html::HtmlAttributeValue::BooleanTrue
                                },
                            )),
                        <TypeDefs::part as ::frender_html::props::MaybeUpdateValueWithState<
                            str,
                        >>::maybe_into_html_attribute_value(this.part)
                            .map(|value| (
                                ::std::borrow::Cow::Borrowed("part"),
                                if let Some(value) = value {
                                    ::frender_ssr::element::html::HtmlAttributeValue::String(
                                        value,
                                    )
                                } else {
                                    ::frender_ssr::element::html::HtmlAttributeValue::BooleanTrue
                                },
                            )),
                    ]
                        .into_iter(),
                ),
            )
        }
    }
}
